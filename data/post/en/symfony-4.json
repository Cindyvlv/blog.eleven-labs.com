{"date":"2018-09-05T00:00:00.000Z","title":"Symfony 4","excerpt":"Let's take a look at Symfony 4 innovations and changes.","readingTime":"3mn","authors":["amoutte"],"categories":["php"],"content":"\nSymfony 4 has been released more than 6 months ago (30 november 2017). The main change is the way of creating applications and how to append features during the project lifetime.\n\n⚠️ Keep in mind that Symfony 4 now requires **PHP 7.1.3** at least!\n\n## Flex\n\n[Flex](https://github.com/symfony/flex) is the new tool used by Symfony for projects management.\nIt's a composer plugin aiming to help the developer creating a Symfony application.\n\n> ℹ️ It replaces [Symfony standard edition](https://github.com/symfony/symfony-standard) and the [Symfony installer](https://github.com/symfony/symfony-installer).\n\nFlex use `recipes` (ɹɛ.sɪ.piz).\nA `recipe` is a `manifest.json` file. It contains some actions to take during the installation process.\nIt allows you to create a folder, copy config files, add some environment variables (.env) etc...\nFull action list in the [documentation](https://github.com/symfony/recipes/blob/master/README.rst).\n\n`recipes` are stored in two repositories:\n * [main recipes repository](https://github.com/symfony/recipes) high quality `recipes`. Flex default repository.\n * [contrib recipes repository](https://github.com/symfony/recipes-contrib) community `recipes`, Flex always asks your permission before installing it.\n\n> ℹ️ You can go to the new website [symfony.sh](https://symfony.sh/) to find `recipes`.\n\n### Usage\n\nOk, we gonna to show how create Symfony 4 project with Flex.\n\n```\n$ composer create-project symfony/website-skeleton my-project\n\n```\n\n> ℹ️ Use `symfony/skeleton` `recipe` to create lightweight project.\n> It only requires:\n> * symfony/console\n> * symfony/flex\n> * symfony/framework-bundle\n> * symfony/lts\n> * symfony/yaml\n\nFlex will create the following folder trees.\n\n```\nassets        static ressources (image, js, css, ...)\nbin           runnable (console, phpunit, ...)\nconfig        application config files\npublic        public files (front controller index.php)\nsrc           application source code\ntemplates     templating files (twig, html, ...)\ntests         tests files\ntranslations  translation files\nvar           some temporary files (cache, logs, upload, ...)\nvendor        third party library\n```\n\nIn order to have your first page:\n\n* create the template file `my-project/templates/index.html.twig`\n\n\n```twig\n{% extends 'base.html.twig' %}\n{% block body %}Welcome{% endblock %}\n```\n\n\n* create controller file `my-project/src/Controller/DefaultController.php`\n\n\n```php\n<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController extends Controller\n{\n    /**\n     * @Route(\"/\", name=\"index\")\n     */\n    public function index()\n    {\n        return $this->render('index.html.twig');\n    }\n}\n```\n\n\n> Caution, the controller name is not suffixed by `Action` anymore.\n\n## Where is the bundle?\n\nYou don't have to create the bundle in src (AppBundle).\nYou can now register your bundle in the `config/bundles.php` file.\n\n\n```php\n<?php\n\nreturn [\n    // ...\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class => ['all' => true],\n    Symfony\\Bundle\\WebServerBundle\\WebServerBundle::class => ['dev' => true],\n    // ...\n];\n```\n\n\n## Conclusion\n\nWe had several choices before Symfony 4 :\n\n* Use the symfony distribution (standard, cmf-standard, rest ...) or [microkernel](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php).\n> Ready to use (ORM, swiftmailer, twig, ...).\n> It can bring useless features (forced to disable/delete).\n\n* Use the Symfony component as third party or use [Silex](https://github.com/silexphp/Silex)\n> Lightweight solution.\n> Need a strong knowledge in order to initialise all the components with configuration and cache.\n\nSymfony 4 was reworked to ease the initialisation process and not to bring unwanted components.\nIt helps to manage features along the project lifetime.\n\nThere is the top 3 [Symfony 4.0 changes](https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md) :\n* New folder structure.\n* `LockHandler` replaced by `Symfony\\Component\\Lock\\Store\\FlockStore`/`Symfony\\Component\\Lock\\Store\\FlockStore\\SemaphoreStore`\n* ClassLoader replaced by composer autoload.\n\nPS : I advise you to visit again [Symfony component list](https://github.com/symfony/symfony/tree/master/src/Symfony/Component),\nbecause now you need to use `recipe` or compose your need with a third party library.\n\n"}