{"date":"2017-10-26T00:00:00.000Z","title":"OpenPGP - Export Secret Keys to a Yubikey","excerpt":"After generating the OpenPGP keys, we will see how to store them on a USB key like the Yubikey. This will allow us to further secure our secret keys.","readingTime":"14mn","authors":["tthuon"],"categories":[],"content":"\nWe saw in the previous article [the generation of OpenPGP keys](/fr/openpgp-paire-clef-presque-parfaite-partie-1/).\nAs a reminder, we have in our keychain private keys:\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb   rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb   rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb   rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nWe also exported the keys in files:\n* 1A8132B1.priv.asc: contains all private keys\n* 1A8132B1.pub.asc: contains all public keys\n* 1A8132B1.sub_priv.asc: contains only the private keys of the subkeys\n\nWith this configuration, we have an effective strategy against theft or loss of the private key that is used for certification.\nIf an attacker take the computer, he will not be able to certify another key. However, the private keys that allow\nto sign, encrypt and authenticate are still present on the computer. So, in case of the theft of the keys, it would be possible\nto sign messages during a certain time (the time that the stolen subkey is revoked).\n\nTo counter this attack, it is possible to place private keys in a smart card. These devices are\nvery resistant to key extraction techniques. In addition to physical attacks, there is a pin code with 3 tries only. Then it's locked.\n\nWe will see in this article the export of the private keys of the subkeys in a smart card. For this example, I will use\na Yubikey 4.\n\n### Yubikey, what is it?\n\nYubikey is a device the size of a classic USB key. This key makes it possible to perform double authentication on website,\nsuch as Google or Github. Thus, if a person is in possession of both the email and the password of the victim, the attacker\nwill not be able to connect without this usb key. This is the principle of double authentication, you must be in possession of two secrets.\n\nYubikey implements an open protocol: *universal 2nd factor*.\n\nIn addition to this main protocol, it supports others: OpenPGP, TOTP, HOTP, challenge-response.\n\nThe one that will interest us is OpenPGP.\n\n### How to get one\n\nI recommend you go through [the official store](https://www.yubico.com/product/yubikey-4-series/){:rel=\"nofollow noreferrer\"}\nto ensure the origin of the product. We are on products related to safety, it's important to know where the purchased product comes from.\n\nFor those who have a Github account, there is a [promotional offer that allows to have -10%](https://www.yubico.com/github-special-offer/) on the cart. Interesting :){:rel=\"nofollow noreferrer\"}.\nHowever, it's valid only once. I recommend you order at least 2 products. The second will be useful to make a backup in the unfortunate event of the loss of the first one.\n\nLast but not least, our OpenPGP key was generated with a size of 4096 bits. Only the version 4 of the Yubikey allows\nto save keys of this size. Version 3 and NEO only support keys up to 3072 bits.\n\n### Install the necessary tools\n\nAs a reminder, we started our generation of OpenPGP key with a machine running Ubuntu 16.04 and GnuPG 2.1.11. To be able to\nexport the keys to the Yubikey, we need to install additional tools beforehand.\n\n```bash\nwilson@spaceship:~$ sudo apt-get install -y gnupg-agent pinentry-curses scdaemon pcscd yubikey-personalization libusb-1.0-0-dev\n```\n\n### Customize the Yubikey with gpg\n\nBefore using the Yubikey, check that the warranty tape has not been broken. If so, do not use it.\n\nInsert the Yubikey into a USB port and type the following command to verify that the card is well recognized.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-status\nReader ...........: 1050:0407:X:0\nApplication ID ...: D2760001240102010006064764950000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 06476495\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n```\n\nThe card is blank, there is no personal information. It is recommended to supplement the information in case a\nnobody would find this key.\n\nEdit the card and switch to admin mode. You can enter `help` to get the list of available commands.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-edit\ngpg/card> admin\nAdmin commands are allowed\n```\n\nFirst of all, we'll change the PIN key administration code and user PIN. By default, the administrator PIN is 12345678 and the user PIN is 123456.\n\nThe administrator PIN is required for some operations on the card, such as the key export, and to unlock when a PIN code has been entered 3 times by mistake.\n\nEnter `passwd` to change them. Let's start with the administrator PIN and then the user PIN.\n\n```\ngpg/card> passwd\ngpg: OpenPGP card no. D2760001240102010006064764950000 detected\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 3\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 1\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? q\ngpg/card>\n```\n\nThen enter the information to customize your key:\n\n```bash\ngpg/card> name\nCardholder's surname: Wilson\nCardholder's given name: Eleven\n\ngpg/card> lang\nLanguage preferences: fr\n\ngpg/card> login\nLogin data (account name): wilson.eleven@labs.com\n\ngpg/card> sex\nSex ((M)ale, (F)emale or space): m\n\ngpg/card> quit\n```\n\nThe key is now configured. We can export the private keys of the subkeys in the smart card.\n\n### Export the keys to the Yubikey\n\nThe goal is to move the secret keys of the subkeys into the Yubikey. In order to do so, we will\nselect each subkey one by one with the `key n` command and move it in the card with` keytocard`.\nIn the end, there will be no more secrets in the gpg keychain.\n\nLet's edit the key.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --edit-key 1A8132B1\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nLet's export the encryption key to `B73A9C79`.\n\n```bash\ngpg> key 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb* rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n```\n\nThe small asterisk in front of the key's fingerprint indicates that it's selected.\n\nEnter `keytocard` to export it to the Yubikey. Then type `2` which is the only choice. The Yubikey can store the 3 types\nsubkeys.\n\n```bash\ngpg> keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb* rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n```\n\ngpg will ask you for the password of the secret encryption key and then the admin pin code of the Yubikey key.\nOnce the Yubikey admin pin code entered, the secret encryption key is in the Yubikey. We can check it right after\nmoving the other two keys.\n\nLet's select the signature key. Deselect the first key and select the second.\n\n```bash\ngpg> key 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> key 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb* rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nThe second key is well selected because there is the small asterisk in front of the key `9CC8B2FB`.\n\nRepeat the operation with `keytocard` command and select `1` because it's a key signature.\n\n```bash\ngpg> keytocard\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb* rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nIt's ok for the second key. Repeat with the third.\n\n```bash\ngpg> key 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> key 3\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb* rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb* rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nWe are done. Type `save` and` quit`.\n\nLet's check that we do not have any secret keys in our gpg keychain anymore.\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n/home/wilson/.gnupg/pubring.gpg\n--------------------------------\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb>  rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb>  rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb>  rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nThe chevron `>` before `ssb` indicates that the secret key does not exist for this key. It's a stub.\n\nLet's check that these secret keys are in the Yubikey.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-status\n\nReader ...........: 1050:0407:X:0\nApplication ID ...: D2760001240102010006064764950000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 06476495\nName of cardholder: Eleven Wilson\nLanguage prefs ...: fr\nSex ..............: male\nURL of public key : [not set]\nLogin data .......: wilson.eleven@labs.com\nSignature PIN ....: not forced\nKey attributes ...: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: 49B7 73DB 292F 8A66 C254  AC97 69FE 9865 9CC8 B2FB\n      created ....: 2017-10-05 11:39:18\nEncryption key....: 88CD 3F3C BA60 1AFD D0A6  22E9 FE2B A21E B73A 9C79\n      created ....: 2017-10-05 11:36:19\nAuthentication key: 0E2F 255E DE28 F044 474D  E571 F000 F81C 8047 B454\n      created ....: 2017-10-05 11:43:21\nGeneral key info..: sub  rsa4096/9CC8B2FB 2017-10-05 Wilson Eleven <wilson.eleven@labs.com>\nsec#  rsa4096/1A8132B1  created: 2017-10-05  expires: 2018-10-05\nssb>  rsa4096/B73A9C79  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\nssb>  rsa4096/9CC8B2FB  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\nssb>  rsa4096/8047B454  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\n```\n\nWe find the personal information in the first part. Then there is the information\non the keys stored in the Yubikey.\n\nWe see that there is the chevron `>` before `ssb`. As seen above, this indicates the absence of the secret key in the\nkeychain. Just below, there is an extra line that tells gpg where to find the secret key.\nHere we have the serial number of the Yubikey `card-no: 0006 06476495`. This serial number is also printed on the key physically.\nIf you have multiple Yubikeys, it will be easy to find the one you are looking for.\n\n### Conclusion\n\nThrough these first two articles, we covered the creation of an OpenPGP key and the export of secrets on a smart card.\nThe use of a smart card provides additional protection against the theft of secret keys.\nIt will not be enough to hack the computer to steal them, but it will be necessary to physically steal\nthe key and the associated PIN code to use the secret keys. Moreover, as seen in the introduction, the secret\nkey cannot be extracted. Our key is well protected, except against the human factor which remains the only threat.\n\nIn addition, you can distribute your public key on [a key server](https://pgp.mit.edu/) and other services (GitHub, Kraken, keybase.io){:rel=\"nofollow noreferrer\"}.\nThis allows you to receive encrypted messages, and [sign your commits](https://help.github.com/articles/signing-commits-using-gpg/){:rel=\"nofollow noreferrer\"}\non GitHub (example on this commit [31dd621](https://github.com/eleven-labs/blog.eleven-labs.com/commit/31dd621db58a7ee1428bc9615c23e74d5ac98c3f)){:rel=\"nofollow noreferrer\"}.\n\nIn a future article, we will set up a backup strategy to cover for the potential loss of secret keys. An error can quickly happen,\nlike erasing your computer following a ransomware.\n\n### Article en relation\n* [OpenPGP - The almost perfect key pair (part 1)](/openpgp-almost-perfect-key-pair-part-1/)\n* [OpenPGP - Export Secret Keys to a Yubikey (part 2)](/openpgp-secret-keys-yubikey-part-2/)\n* [OpenPGP - Long term storage (part 3)](/fr/openpgp-stockage-froid-clefs-partie-3/)\n* [OpenPGP - I was in a Key Signing Party (part 4)](/fr/openpgp-clef-participe-a-une-fete-de-la-signature-des-clefs/)\n\n### Resources\n\n- [wikipedia - Universal 2nd Factor](https://en.wikipedia.org/wiki/Universal_2nd_Factor){:rel=\"nofollow noreferrer\"}\n- [fidoalliance -Universal 2nd Factor (U2F) Overview](https://fidoalliance.org/specs/fido-u2f-overview-ps-20150514.pdf){:rel=\"nofollow noreferrer\"}\n- [YubiKey 4 series](https://www.yubico.com/products/yubikey-hardware/yubikey4/){:rel=\"nofollow noreferrer\"}\n- [Yubico Expands FIPS Security Certification ](https://www.yubico.com/2016/05/yubikey-gains-support-for-higher-levels-of-federal-crypto-standards/){:rel=\"nofollow noreferrer\"}\n- [wikipedia - FIPS 140-2](https://en.wikipedia.org/wiki/FIPS_140-2#Level_1){:rel=\"nofollow noreferrer\"}\n- [Cryptographic Module Validation Program](https://csrc.nist.gov/projects/cryptographic-module-validation-program/Certificate/2267){:rel=\"nofollow noreferrer\"}\n- [Guide to using YubiKey as a SmartCard for GPG and SSH](https://github.com/drduh/YubiKey-Guide){:rel=\"nofollow noreferrer\"}\n- [RFC4880](https://tools.ietf.org/html/rfc4880){:rel=\"nofollow noreferrer\"}\n- [Nitrokey Storage Got Great Results in a 3rd Party Security Audit](https://www.nitrokey.com/news/2015/nitrokey-storage-got-great-results-3rd-party-security-audit){:rel=\"nofollow noreferrer\"}\n- [Secure Hardware vs. Open Source ](https://www.yubico.com/2016/05/secure-hardware-vs-open-source/){:rel=\"nofollow noreferrer\"}\n- [Yubico has replaced all open-source components](https://www.reddit.com/r/linux/comments/4ls94a/yubico_has_replaced_all_opensource_components/){:rel=\"nofollow noreferrer\"}\n- [Cover image source](https://www.yubico.com/press/images/){:rel=\"nofollow noreferrer\"}\n\n### Remarks\n\nThis tutorial uses a Yubikey for storing secrets. Yubikey is the most popular key in the general public, especially\nfor the second authentication factor feature. There are other keys that support OpenPGP such as [NitroKey](https://www.nitrokey.com/){:rel=\"nofollow noreferrer\"}.\nUnlike the Yubikey, the NitroKey is open-source. Security with closed and proprietary hardware is not a viable solution in the long term.\nIt's also contradictory to the OpenPGP spirit, that aims to be open. However, I chose the Yubikey for its ease of implementation and its ability to do double authentication.\n"}