{"date":"2018-02-11T00:00:00.000Z","title":"PHP 7 Throwable Errors Exceptions","excerpt":"Errors exist in our code, in external library, and also when hardware fail. That's why understanding Throwable is essential to handle these errors cleverly.","readingTime":"11mn","authors":["amoutte"],"categories":["php"],"content":"\nPHP 7 brings some changes about how errors are reported.\nFrom now on, most of the errors are reported through the exception class `Error`.\n\nAll `Throwable` will bubble up through the execution stack until they meet one of these cases:\n - when meeting a `catch` block which supports this kind of error;\n - if an exception handler is configured via `set_exception_handler()`;\n - or else, the exception will be converted into FATAL error and will be processed by the traditional system.\n\nWe are going to first define, and then see how to use  `Throwable`, `Error` and `Exception`.\n\n## Definition\n\n### Throwable\n\n`Throwable` is a PHP 7 interface which represents an error.\n\n```php\ninterface Throwable\n{\n    public function getMessage(): string;       // Error reason\n    public function getCode(): int;             // Error code\n    public function getFile(): string;          // Error begin file\n    public function getLine(): int;             // Error begin line\n    public function getTrace(): array;          // Return stack trace as array like debug_backtrace()\n    public function getTraceAsString(): string; // Return stack trace as string\n    public function getPrevious(): Throwable;   // Return previous `Trowable`\n    public function __toString(): string;       // Convert into string\n}\n```\n\n`Errors` and `Exceptions` are implementing `Throwable`.\n\nHere is `Throwable` hierarchy:\n\n```\ninterface Throwable\n  |- Error implements Throwable\n      |- ArithmeticError extends Error\n          |- DivisionByZeroError extends ArithmeticError\n      |- AssertionError extends Error\n      |- ParseError extends Error\n      |- TypeError extends Error\n          |- ArgumentCountError extends TypeError\n  |- Exception implements Throwable\n      |- ClosedGeneratorException extends Exception\n      |- DOMException extends Exception\n      |- ErrorException extends Exception\n      |- IntlException extends Exception\n      |- LogicException extends Exception\n          |- BadFunctionCallException extends LogicException\n              |- BadMethodCallException extends BadFunctionCallException\n          |- DomainException extends LogicException\n          |- InvalidArgumentException extends LogicException\n          |- LengthException extends LogicException\n          |- OutOfRangeException extends LogicException\n      |- PharException extends Exception\n      |- ReflectionException extends Exception\n      |- RuntimeException extends Exception\n          |- OutOfBoundsException extends RuntimeException\n          |- OverflowException extends RuntimeException\n          |- PDOException extends RuntimeException\n          |- RangeException extends RuntimeException\n          |- UnderflowException extends RuntimeException\n          |- UnexpectedValueException extends RuntimeException\n```\n\n> ⚠ Caution! You can only implement `Throwable` through `Error` and `Exception`.\n> Else you get a FATAL error\n> `PHP Fatal error:  Class MyClass cannot implement interface Throwable, extend Exception or Error instead`\n> But you can extend this interface in user space\n\n```php\ninterface MyThrowable extends Throwable {\n    public function myCustomMethod();\n}\n\nclass MyException extends Exception implements MyThrowable {\n    public function myCustomMethod()\n    {\n        // implement custom method code\n    }\n}\n```\n\n### Error\n\n`Error` is the base class of all the internal PHP errors.\n\nThe most commons are the following:\n - `ParseError`, which is thrown when we `require` or `eval` a code with syntax error.\n - `TypeError`, which is thrown when arguments/return do not match its declare type. It's also the case when an invalid number of arguments are passed to php built-in function in `strict mode`._\n\n_Sometimes you have the right to throw `Error` in your code, for example if you parse a file that contains a syntax error, or if you pass wrong numbers of arguments to a variadic function._\n\n### Exception\n\n`Exception` is the user exception base class.\n\nVery often you have to throw or create one, se we are going to see how it works and how use to it properly.\n\n## Usage\n\n### Throw exception\n\nYou have to use the `throw` keyword in order to throw an `Exception`.\n\n```php\nthrow new Exception('Render error.');\necho 'Example text.';\n```\n\n> An `Exception` interrupts the execution of next instructions.\n> In this example the `echo` won't be called.\n\n### Catch exception\n\nYou have to use `try` `catch` structure.\n\n```php\ntry {\n    if (!$_GET['title']) {\n        throw new Exception('Can't show title. Title is required.');\n    }\n    echo $_GET['title'];\n} catch (Exception $e) {\n    echo '⚠ Exception appear: ' . $e->getMessage();\n}\n\n> The script will show the title if it's provided, or else it will show the error message.\n\nYou can attach multiple `catch` to a `try` bloc in order to split different exception types.\nYou must respect catch block precedence.\n\n```php\ntry {\n    if (!$_GET['title']) {\n        throw new Exception('Can't show title. Title is required.');\n    }\n    if (!is_string($_GET['title'])) {\n        throw new RuntimeException('Title must be a string.');\n    }\n    echo $_GET['title'];\n} catch (RuntimeException $e) {\n    echo $e->getMessage();\n} catch (Exception $e) {\n    echo '⚠ Exception appear: ' . $e->getMessage();\n}\n```\n\n> `RuntimeException` extends `Exception`, then you must catch `RuntimeException` before `Exceptions`.\n\nIn PHP 7.1 you can specify multiple `Exception` types with `|` char.\n\n```php\ntry {\n    // Code\n} catch (OutOfBoundsException | LogicException $e) {\n    echo '⚠ Exception appear: ' . $e->getMessage();\n}\n```\n\n__⚠ It's very important to correctly choose the `Exception` type to preserve error handler consistency.__\n\n**Need to know**\n\nMost of `LogicException` usually leads to a code correction.\nTo catch `LogicException` is going to show an error page and log information in order to inform the developer.\n\n`RuntimeException` represents errors that appear during the execution (invalide data, data source error).\nYou can catch `RuntimeException` in order to execute an alternative code for finishing the process correctly.\n\nℹ️ _You must have an exception handler to render a nice error page to visitors.\nThe second purpose is to avoid any leaking informations (file path, stack trace, error message...)\nBest practice: Don't let the exception break the website._\n\n```\nset_exception_handler(function($exception){\n    echo 'Error appear. Retry in a moment.';\n    // log($exception->getMessage());\n    // developer email\n});\n```\n\n### Errors codes\n\nthe error code is an `integer` which can be used to codify/identify the error.\n\n> You can show the error code instead of the message of the real `Exception` to the visitor, and prevent him to potentially be confronted to sensitive data.\n\n## Advanced use\n\n### Customize an exception\n\nIt's very useful to create your custom `Exception` class. They are more accurate and can carry extra data (text, object, array...) to the error process.\n\n```php\nclass MyObject\n{\n    public $content;\n}\n\nclass MyObjectException extends RuntimeException\n{\n    /**\n     * @var MyObject\n     */\n    private $myObject;\n\n    public function __construct(MyObject $myObject, $message = \"\", $code = 0, Throwable $previous = null)\n    {\n        parent::__construct($message, $code, $previous);\n        $this->myObject = $myObject;\n    }\n\n    /**\n     * @return MyObject\n     */\n    public function getMyObject()\n    {\n        return $this->myObject;\n    }\n}\n```\n\n> When `MyObjectException` is caught, you can get back `MyObject` with the method `getMyObject()`\n> You can use this object to run alternative processes, that will provide you more information than with the regular `Exception`.\n\n### Rethrow an exception\n\nSometime we need to trace/log what's going wrong.\nIn this case we will have to catch the `Exception`, then do an alternative process (log, email, ...) and rethrow this exception.\n\n```php\ntry {\n    // content update\n} catch (Exception $e) {\n    // log('Update failed.');\n    throw $e;\n}\n```\n\nHere's a concrete example:\n\n```php\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Psr\\Log\\NullLogger;\n\nclass UserFactory implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    private $passwordGenerator;\n\n    public function construct(PasswordGeneratorInterface $passwordGenerator)\n    {\n        $this->passwordGenerator = $passwordGenerator;\n        $this->logger = new NullLogger();\n    }\n\n    public function create()\n    {\n        try {\n            $user = new User();\n            $password = $this->passwordGenerator->generatePassword();\n            $user->setPassword($password);\n\n            return $user;\n        } catch (Exception $exception) {\n            $this->logger->error('Error appear during user creation. Reason: ' . $exception->getMessage());\n\n            throw $exception;\n        }\n    }\n}\n\ninterface PasswordGeneratorInterface\n{\n    public function generatePassword();\n}\n```\n\n> We are logging a message and letting the `Exception` bubble up.\n\n### Wrap an exception\n\nWrap an `Exception` is very useful to create a nice stack trace and delegate the exception handling to the main exception handler.\n\n```php\ntry {\n    // content update\n} catch (RuntimeException $exception) {\n    throw new UpdateContentException('Content update failed.', 0, $exception);\n}\n\nclass UpdateContentException extends RuntimeException {}\n```\n\n> During the content update, the exception type doesn't matter and will always return an `UpdateContentException`. If you catch the `UpdateContentException`, you can access to all previous exceptions with the `getPrevious()` method.\n\n\nHere's a concrete example:\n\n```php\nclass UserFactory\n{\n    private $passwordGenerator;\n\n    public function construct(PasswordGeneratorInterface $passwordGenerator)\n    {\n        $this->passwordGenerator = $passwordGenerator;\n    }\n\n    public function create()\n    {\n        try {\n            $user = new User();\n            $password = $this->passwordGenerator->generatePassword();\n            $user->setPassword($password);\n\n            return $user;\n        } catch (Exception $exception) {\n            throw new UserFactoryException('Error appear during user creation.', 0, $exception);\n        }\n    }\n}\n\nclass UserFactoryException extends RuntimeException {}\n\ninterface PasswordGeneratorInterface\n{\n    public function generatePassword();\n}\n```\n\n> UserFactory::create() always tyhrows an `UserFactoryException`.\n> The first information we need to know is what is going wrong? -> We can't create a user. Why ? -> exception->getPrevious()\n> Layer separation is preserved.\n\n## Conclusion\n\nWe have seen how to throw and catch exceptions, and even how to customize them with PHP. We have also seen how more advanced exception usages such as rethrow and wrap, in order to have a better control when something wrong happens.\n\n**Errors exists in our code, in external library, or when hardware fails. that's why understanding Throwable is essential to handle errors cleverly.**\n\nPros\n - Better visibility about what's happening\n - Erros easier to read\n - Multiple types and error levels in order to split domain errors from software one\n - Easy to debug\n - Better split software responsibility (SOLID)\n - Error code can hide the real error reason\n\nCons\n - Need to know how to wrap/rethrow exception\n - Render/read stack trace can be complex\n - Don't forget to handle all exceptions with `catch`/`set_exception_handler` to avoid leaking informations\n\n## Interesting links\n\n* [Handle exceptions gracefully](/en/php_handle-exception-gracefully/)\n* [Errors in PHP 7](http://php.net/manual/fr/language.errors.php7.php)\n* [Example](https://3v4l.org/sDMsv)\n* [Throwable Exceptions and Errors in PHP 7](https://trowski.com/2015/06/24/throwable-exceptions-and-errors-in-php7/)\n"}