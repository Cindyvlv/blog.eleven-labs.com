{"date":"2020-01-29T00:00:00.000Z","title":"React i18next","excerpt":"In this article we are going to cover how to set up i18next in your React app","readingTime":"6mn","authors":["marishka"],"categories":["javascript"],"content":"\n# React i18next\n\n**React i18next** is a library that allows to set up internationalization on your website.\nThis library is based on [i18next](https://www.i18next.com/).\n\n# Initialization\n\nThe first thing we will do is add the library to our project:\n\n```bash\nnpm install react-i18next --save\n```\n\nThen we need to configure the way we are going to use it.\nFor that, I will create a file `helpers/i18n.js`:\n\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  .use(initReactI18next)\n  .init({\n    debug: true, // useful to see events that occur during development\n    lng: 'en',\n    fallbackLng: 'en',\n    resources: {\n      en: {\n        translations: { // default namespace\n          'home.hello': 'Hello! Welcome to my app!'\n        },\n      },\n    },\n  });\n\nexport default i18n;\n```\n\n\nAnd I will import it into `index.js` of my application:\n\n\n```js\nimport React from  'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport i18n from './helpers/i18n'; // initialisation of i18next\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n```\n\n\n# Usage\n\n## Simple translations\n\nHere is the `App.js` file with a simple example:\n\n\n```js\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    {t('home.hello')}\n  );\n};\n\nexport default App;\n```\n\n\nHere we use the `useTranslation` *hook* to access the translation service, but you can also use the HOC `withTranslation`:\n\n\n```js\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\n\nconst App = ({ t }) => {\n  return (\n    {t('home.hello')}\n  );\n};\n\nexport default withTranslation()(App);\n```\n\n\nIf you want to pass variables, this can also be done very easily. Let's say our translation key looks like this:\n\n\n```js\ntranslations: {\n  'home.hello': 'Hello, {{ name }}! Welcome to my app!'\n},\n```\n\n\nTo pass the `name` variable in our translation key we can do:\n\n\n```js\n{t('home.hello'), { name: 'Astronaut' }}\n```\n\n\n## HTML\n\nIf you need to put HTML in the translation, or if your translation key contains some, you can use the `Trans` component:\n\n\n```js\nimport React from 'react';\nimport { Trans } from 'react-i18next';\n\nconst App = () => {\n  return (\n    <Trans values={{ name: 'Astronaut' }}><h1>home.hello</h1></Trans>\n  );\n};\n\nexport default App;\n```\n\n\n## Pluralization\n\nOf course, we also need to handle the case where the translation varies according to a number or quantity.\n\n\n```js\ntranslations: {\n  'message': 'You have one message',\n  'message_plural': 'You have several messages',\n},\n```\n\n\nIn this case, we will specify an additional argument, `count`, like this:\n\n\n```js\n{t('home.hello'), { count: 5 }}\n<Trans count={5}><h1>home.hello</h1></Trans>\n```\n\n\n## Detecting user's preferred language\n\nSince we are working on a multi-language site, we want the user's preferred language to be automatically detected. In general, it is the browser's language. For this, we will add a new dependency:\n\n```bash\nnpm install i18next-browser-languagedetector --save\n```\n\nAnd we will change our configuration as follows:\n\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector'; // <= new\n\ni18n\n  .use(LanguageDetector) // <= new\n  .use(initReactI18next)\n  // ...\n;\nexport default i18n;\n```\n\n\n## Changing the language\n\nNow that our application is able to detect the user's browser language, the user may want to change it. For this, let's add a button:\n\n\n```js\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nconst LanguageSwitcher = () => {\n  const { i18n } = useTranslation();\n\n  const changeLanguage = async (lng) => {\n    await i18n.changeLanguage(lng); // i18n.changeLanguage returns a Promise\n  };\n\n  return (\n    <div>\n      <Button onClick={() => changeLanguage('en')}>English</Button>\n      <Button onClick={() => changeLanguage('fr')}>Fran√ßais</Button>\n    </div>\n  );\n}\n\nexport default LanguageSwitcher;\n```\n\n\n## Translation files\n\nObviously, we will want to put the translations into dedicated files, rather than keeping them in the configuration directly. Translation files are simple JSON files. We can imagine the following structure in our project:\n\n```bash\npublic/\n  locales/\n    en/\n      common.json\n      translations.json\n      other.json\n    fr/\n      common.json\n      translations.json\n      other.json\n```\n\n### Namespaces\n\ni18next works with *namespaces*, and you can have multiple namespaces per language. As a reminder, the default namespace is `translations`. In our example, `common`, ` translations` and `other` are namespaces.\n\nIn this case, each time we want to access the keys that are in a particular namespace, we will do:\n\n\n```js\nconst { t } = useTranslation(['ns1',  'ns2',  'ns3']);\nt('key'); // loaded from namespace 'ns1'\nt('ns2:key'); // loaded from namespace 'ns2'\n```\n\n\nIt is also possible to define a custom default namespace in the configuration:\n\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    defaultNS: 'common', // <= new\n    // ...\n  });\n;\n\nexport default i18n;\n```\n\n\n### Loading local files\n\nNow that the translations are in separate JSON files, we need to indicate in the i18next configuration how to retrieve them. For that, we will use `i18next-xhr-backend`:\n\n```bash\nnpm install i18next-xhr-backend --save\n```\n\nLet's update the configuration file:\n\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-xhr-backend'; // <= new\n\ni18n\n  .use(LanguageDetector)\n  .use(Backend) // <= new\n  .use(initReactI18next)\n  .init({\n    backend: { // <= new\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n    // ...\n  });\n;\n\nexport default i18n;\n```\n\n\nNote that the path specified in `loadPath` is in the `public` folder at the root of your project.\n\n### Loading remote files\n\nWe have presented [in a previous article](https://blog.eleven-labs.com/en/manage-translations-with-localise.biz/) that we use Localise.biz service and save translation files on a server in the cloud. Hence, we need to recover the files hosted on a remote server:\n\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-xhr-backend';\n\ni18n\n  .use(LanguageDetector)\n  .use(Backend)\n  .use(initReactI18next)\n  .init({\n    debug: true,\n    lng: 'en',\n    fallbackLng: 'en',\n    defaultNS: 'common',\n    backend: {\n      loadPath: `${process.env.TRANSLATIONS_ENDPOINT_URI}/{{ns}}.{{lng}}.json`, // we simply indicate the full URL to retrieve files\n    }\n  });\n;\n\nexport default i18n;\n```\n\n\n## SSR\n\nReact i18next can be configured to work with SSR. Here is the page that explains how to put this in place: [https://react.i18next.com/latest/ssr](https://react.i18next.com/latest/ssr).\n\nNevertheless, we had a problem activating the SSR - the loading of the translations from the remote server was not done on the server side. This happens because `i18next-xhr-backend` uses `fetch` to recover the files, and `fetch` is not available on the server side.\n\nAs a result, we needed to write a custom backend based on the documentation here: [https://www.i18next.com/misc/creating-own-plugins#backend](https://www.i18next.com/misc/Creating-own-plugins#backend). We used the `cross-fetch` library that works on both the client and server sides.\n"}