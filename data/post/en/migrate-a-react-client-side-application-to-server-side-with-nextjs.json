{"date":"2017-09-03T00:00:00.000Z","title":"Migrate a React client-side application to server-side with Next.JS","excerpt":"Most of the front-end applications using React that I've been able to work on are browser-based (client-side) applications.","readingTime":"8mn","authors":["vcomposieux"],"categories":["javascript"],"content":"\nMost of the front-end applications using React that I've been able to work on are browser-based (client-side) applications.\n\nHowever, depending on the tools you use, they may not be visible to search engines and therefore prevent a good indexing of your content (SEO).\n\nTo overcome this problem, frameworks have been developed to make server-side React applications possible.\nThis is the case of [Next.JS](https://github.com/zeit/next.js){:rel=\"nofollow noreferrer\"}{: target=\"blank\"} which we will study in this article.\n\nI had a React application used client-side and migrated it to a server side rendering in just a few hours thanks to the framework.\nThe purpose of this article is to share with you my technical experience on this migration.\n\nFirst steps\n-----------\n\nFirst of all, we need to look at what Next.JS has to offer so that we can see if this framework fits our needs:\n\n* A [simple installation](https://github.com/zeit/next.js#setup){:rel=\"nofollow noreferrer\"},\n* Rendering of [static files](https://github.com/zeit/next.js#static-file-serving-eg-images){:rel=\"nofollow noreferrer\"} such as images and CSS files in a `static` directory,\n* Routing URLs pre-defined from the names of the JS files in the `pages` directory,\n* Possibility to define [customized/parameterized routes](https://github.com/zeit/next.js/#custom-server-and-routing){:rel=\"nofollow noreferrer\"} (but I used [next-routes](https://github.com/fridays/next-routes){:rel=\"nofollow noreferrer\"} for this, a cleaner way),\n* Running [server-side actions only](https://github.com/zeit/next.js#fetching-data-and-component-lifecycle){:rel=\"nofollow noreferrer\"},\n* Simple integration with Redux using [next-redux-wrapper](https://github.com/kirill-konshin/next-redux-wrapper){:rel=\"nofollow noreferrer\"}.\n\nSo you should have everything you need to migrate your project. Let's get started!\n\nAdding dependencies\n-------------------\n\nThe first thing to do is to add our dependencies to the `package. json` file:\n\n```diff\n {\n   \"version\": \"0.0.1\",\n   \"private\": true,\n   \"dependencies\": {\n+    \"next\": \"^3.0.3\",\n+    \"next-redux-wrapper\": \"^1.3.2\",\n+    \"next-routes\": \"^1.0.40\",\n     \"prop-types\": \"^15.5.10\",\n     \"react\": \"^15.5.4\",\n     \"react-dom\": \"^15.5.4\",\n     \"react-scripts\": \"1.0.1\"\n   },\n   \"scripts\": {\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n-    \"test\": \"react-scripts test --env=jsdom\",\n+    \"dev\": \"next dev src\",\n+    \"start\": \"node server.js\",\n+    \"build\": \"next build src\",\n+    \"test\": \"react-scripts test --env=jsdom\"\n   }\n }\n```\n\nWe therefore add here our three dependencies: `next`, `next-redux-wrapper` and `next-routes`. No need to go into more details on the subject, to me the name of the libraries seems clear enough to guess their usefulness.\n\nWe also need to modify the scripts. Indeed, we will now need a `node` HTTP server and will use the `next' library to build and develop our application with an on-the-fly compiler.\n\nNote that for the moment, I have kept `react-scripts` to run my tests but this one could of course be deleted.\n\nNew file structure\n------------------\n\nWe will respect the conventions proposed by Next.JS, so we will place our different pages in a directory named `page`, and our static files in a `static` directory.\n\nThe only difference is that we will place them in `src`. This is why we have specified this directory in the previous commands.\n\nSo here's our project structure:\n\n```\n.\n├── src\n│   ├── actions\n│   │   ├── ...\n│   ├── components\n│   │   ├── ...\n│   ├── constants\n│   │   └── ...\n│   ├── containers\n│   │   ├── ...\n│   ├── pages\n│   │   ├── _error.js\n│   │   ├── index.js\n│   │   └── category.js\n│   ├── reducers\n│   │   ├── ...\n│   ├── static\n│   │   ├── css\n│   │   │   ├── ...\n│   │   ├── fonts\n│   │   │   └── ...\n│   │   ├── img\n│   │   │   ├── ...\n│   │   ├── favicon.ico\n│   │   └── index.html\n│   ├── store\n│   │   └── configureStore.js\n│   ├── translations\n│   │   ├── ...\n│   ├── index.js\n│   └── routes.js\n├── tests\n│   └── ...\n├── Makefile\n├── README.md\n├── package-lock.json\n├── package.json\n├── server.js\n```\n\nWe kept the same file structure we had with our client-side project and simply added the `pages` and `static` directories (which were previously named `assets` in our case).\n\nYou can already run the server on your development machine by running:\n\n```\n$ npm run dev (ou yarn dev)\n```\n\nOn the production side, the `server.js` node server will be executed. Here's his code:\n\n```js\nconst next = require('next')\nconst routes = require('./src/routes')\nconst app = next({dir: 'src', dev: false})\nconst handler = routes.getRequestHandler(app)\n\nconst {createServer} = require('http')\n\napp.prepare().then(() => {\n  createServer(handler).listen(8081)\n})\n```\n\nWe instantiate here Next.JS and retrieve the routes we will create later.\nWe also specify the `src` directory and specify that you are not in a development environment to optimize the build.\n\nWriting the first page\n----------------------\n\nNow it's time to write our first server-side page!\n\nWe will start with a very simple homepage. Place a file at `src/pages/index.js`:\n\n```js\nimport React from 'react'\nimport withRedux from 'next-redux-wrapper'\n\nimport { store } from '../store/configureStore'\nimport { Footer, Homepage } from '../components';\nimport { AppContainer, HeaderContainer } from '../containers';\n\nconst Page = () => (\n    <AppContainer className='App Homepage'>\n        <div>\n            <HeaderContainer />\n            <Homepage />\n            <Footer />\n        </div>\n    </AppContainer>\n)\n\nexport default withRedux(store)(Page)\n```\n\nVery simple, we instantiate a `Page` React object comprising the components that will form our page and call a function returned by `withRedux(store)` (provided by the `next-redux-wrapper` library) to synchronize our Redux store on this page.\n\nThis way, our entire page (and the components included inside) will have access and can manipulate the Redux store.\n\nIf you go to `http://localhost:3000/` now, your homepage should be visible!\n\nCustomized routes / including variables\n---------------------------------------\n\nUnfortunately, it is a bit complicated to declare custom routes and/or containing variables directly via Next.JS framework, that's why I choose to use the `next-routes` library which will allow me to do this very simply.\n\nFor this example, we will start with a `/category/: slug` URL.\n\nWe must then declare a file to `src/routes.js` with the following content:\n\n```js\nconst routes = module.exports = require('next-routes')()\n\nroutes\n  .add('category', '/category/:slug')\n```\n\nWhen the URL `/category/: slug` is called (or slug is a dynamic value), the `src/pages/category.js` file will be called.\n\nLet's create this file:\n\n```js\nimport React from 'react'\nimport withRedux from 'next-redux-wrapper'\n\nimport { store } from '../store/configureStore'\nimport { Category, Footer } from '../components';\nimport { AppContainer, HeaderContainer, } from '../containers';\n\nconst Page = ({ slug }) => (\n    <AppContainer className='App Homepage'>\n        <div>\n            <HeaderContainer displaySearch={true} />\n            <Category slug={slug} />\n            <Footer />\n        </div>\n    </AppContainer>\n)\n\nPage.getInitialProps = async ({ query }) => {\n    return { slug: query.slug }\n}\n\nexport default withRedux(store)(Page)\n```\n\nAs you can see here, we have added the following code to the component, allowing us to retrieve the `slug` parameter from the request and send it to our page component in its props (and then to our `Category` component):\n\n```js\nPage.getInitialProps = async ({ query }) => {\n    return { slug: query.slug }\n}\n```\n\nReally simple, isn't it? You now know how to perform dynamic routing!\n\nServer-side requests\n--------------------\n\nThe `getInitialProps()` method presented above will also allow you to make server-side requests, which means that the end client will not know about it.\n\nThis way, you will be able to retrieve the API data and insert it into your store.\n\nManipulating templates\n----------------------\n\nIn the templates of your React components, you can declare links to your routes this way, by importing the `Link` component available through your `routes.js` file and then:\n\n\n```js\nimport { Link } from '../routes';\n\n<Link route='category' params={{slug: 'hello-world'}}>\n    Go to hello-world category\n</Link>\n```\n\n\nNote that you can also use the following notation:\n\n```js\n<Link route='category/hello-world'>\n```\n\n> **Note :**\n> You can add a `prefetch` attribute if you want to preload your pages.\n\nNext.JS also provides a `Head` component that will allow you, as its name suggests, to manipulate the `<head>` HTML of your page.\n\nTo define the `<title>` of your page, you must write:\n\n```js\nimport Head from 'next/head';\n\nconst Page = () => (\n    <Head>\n        <title>My homepage title</title>\n    </Head>\n    ...\n)\n```\n\nAnother element that will allow you to improve your referencing and to further personalize your pages.\n\nConclusion\n----------\n\nMigrating from a client-side React application (initialized with `create-react-app`) took me only a few hours because the `Next.JS` framework is really easy to use and the community already quite large.\n\nIn fact, Next.JS integrates very well with most of the React ecosystem tools.\n\nI hope this article will help you migrate your client-side application to server-side.\n"}