{"date":"2017-10-13T00:00:00.000Z","title":"OpenPGP - The almost perfect key pair","excerpt":"Guide to create the almost perfect OpenPGP keys","readingTime":"13mn","authors":["tthuon"],"categories":[],"content":"\nIn this article, I would like to create a small guide on creating a perfect PGP key. For those who do not know,\nOpenPGP is a standard for encrypting and decrypting messages. Unlike a simple RSA key pair, the protocol\nOpenPGP allows to create a digital identity that is verified by other people and that is decentralized. There is no\nauthority that will control the identity. It's the users who will check the other people.\n\nThrough a set of 4 articles, we will see:\n* How to create the PGP key pair\n* How to export secrets on a Yubikey smart card\n* The storage and backup of master key\n* The join in a key signing party\n\n### Install the right tools\n\nWhether you are on Linux, Mac or Windows, everything can be done in command lines.\n\nFirst, let's install the tools:\n* Windows:  [GPG4Win](https://www.gpg4win.org/){:rel=\"nofollow noreferrer\"}\n* Mac:  [GPGtools](https://gpgtools.org/){:rel=\"nofollow noreferrer\"}\n* Linux:  [gnupg.org](https://gnupg.org/download/) (already integrated in Ubuntu for example){:rel=\"nofollow noreferrer\"}\n\nFor this article, I will run on Ubuntu 16.04 and GnuPG v2.1.11. This is the modern version of gnupg that will\nreplace v1.4 and v2.0.\n\nBefore you start creating the key, you need to configure gpg to enhance security.\nThe first lines avoid leaking information on how the key was created.\nThen there is the configuration of OpenPGP to display more information when listing keys. At the end of the configuration, there are restrictions on the encryption algorithms in order to use the best and most resistant to date.\n\nCopy this configuration to ~/.gnupg/gpg.conf (Linux and Mac) or C:\\Users\\[username]\\AppData\\Roaming\\gnupg\\gpg.conf (Windows).\n\n```\n# Avoid information leaked\nno-emit-version\nno-comments\nexport-options export-minimal\n\n# Displays the long format of the ID of the keys and their fingerprints\nkeyid-format 0xlong\nwith-fingerprint\n\n# Displays the validity of the keys\nlist-options show-uid-validity\nverify-options show-uid-validity\n\n# Limits the algorithms used\npersonal-cipher-preferences AES256\npersonal-digest-preferences SHA512\ndefault-preference-list SHA512 SHA384 SHA256 RIPEMD160 AES256 TWOFISH BLOWFISH ZLIB BZIP2 ZIP Uncompressed\n\ncipher-algo AES256\ndigest-algo SHA512\ncert-digest-algo SHA512\ncompress-algo ZLIB\n\ndisable-cipher-algo 3DES\nweak-digest SHA1\n\ns2k-cipher-algo AES256\ns2k-digest-algo SHA512\ns2k-mode 3\ns2k-count 65011712\n```\n### Take advantage of subkeys\n\nWhen creating an OpenPGP key in its basic mode, gpg will create a key pair that allows you to sign and certify.\nTo increase the security of our key, we will use a special feature of OpenPGP: the subkeys.\n\nOpenPGP allows to create subkeys with a specific use: sign, encrypt and authenticate. Another advantage to the use\nof the subkeys is that in the event of loss or theft of the secret keys of the subkeys, you only need to revoke the subkey\nwithout having to revoke the master key (the one that allows to certify other keys).\n\nLet's start by creating the master key, the one that will hold our identity. Then, we create subkeys to sign, encrypt and authenticate.\n\n### Creating the master key\n\nWe will choose to generate our key in a custom way and create the certification key for Wilson.\nIt will allow to certify other keys. It is very important, you must keep it safely. In the event of loss or theft, the person who holds the key would then be able to pretend to be the rightful owner.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --full-gen-key\n\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\nYour selection? 8\n```\n\nThen you have to select the attributes of this key. Only the capability **Certify**.\n\n```bash\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Sign Certify Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? s\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Certify Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? e\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Certify\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? q\n```\n\nWe have configured the capabilities of this first key to allow only certification.\nLet's move on to the size of the key: it is recommended to have a key\nof a minimum size of 2048. To this day, this length is still resistant, but it is\npreferable to take the maximum size: 4096.\n\nFor the lifetime of the key, it is always recommended to put one. If this key is lost, and it\nhas been sent to a key server, it will remain there forever valid. Put a duration up to 2 years. Here I will put 1 year.\nThis allows you to practice command lines every year :).\n\n```bash\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey does not expire at all\nIs this correct? (y/N) y\n```\n\nLet's add details about Wilson's identity:\n\n```bash\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Wilson Eleven\nEmail address: wilson.eleven@labs.com\nComment:\nYou selected this USER-ID:\n    \"Wilson Eleven <wilson.eleven@labs.com>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n```\n\nA window will appear. It will ask you to fill in a pass-phrase to protect the secret keys.\nChoose one long enough that you can memorize easily.\n\n```bash\ngpg: key 1A8132B1 marked as ultimately trusted\ngpg: directory '/home/wilson/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/home/wilson/.gnupg/openpgp-revocs.d/5EA44FF53CEB240FD3F1A6E4DCEE216E1A8132B1.rev'\npublic and secret key created and signed.\n\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: PGP\ngpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u\npub   rsa4096/1A8132B1 2017-10-05 [] [expires: 2018-10-10]\n      Key fingerprint = 5EA4 4FF5 3CEB 240F D3F1  A6E4 DCEE 216E 1A81 32B1\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\n```\n\nThe master key pair is created. Now create the subkeys.\n\n### Creating subkeys\n\nAs we saw in the introduction on the subkeys, it is important to have one dedicated to each task:\n* Authenticate (A)\n* Sign (S)\n* Encrypt (E)\n\nLet's create them now.\n\nWe will first list the available keys:\n\n```\nwilson@spaceship:~$ gpg2 --list-keys\n\n/home/wilson/.gnupg/pubring.gpg\n--------------------------------\npub   rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-10]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\n```\n\nEdit it to add subkeys. To do this, you will need to switch to expert mode.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --edit-key 1A8132B1\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nYou are now in edit mode.\n\nAdd the encryption key with the `addkey` command.\n\n```bash\ngpg> addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 8\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? s\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey expires at ven. 05 oct. 2018 13:37:19 CEST\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n\n```\n\nThe key with fingerprint B73A9C79 has been created. Repeat for *Signing* and *Authentication* key.\n\nIn the end, you must have these keys:\n\n```bash\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> save\ngpg> quit\n```\n\nEnter `save` then` quit`, and you're done. Wilson now has an OpenPGP key pair with its identity and subkeys with each a capability.\nBefore you can fully use this key, let's backup it.\n\n### Export the master key\n\nThe PGP key must not be used as it is. Remember, in the event of theft of the master key and the password,\nthe robber can spoof the digital identity and sign messages instead of the real person.\nIt is therefore essential to separate the master key from the subkeys. The master key, which allows to certify,\nwill be stored in a cold storage space and totally disconnected from the network.\n\nFirst, create a revocation certificate in the event of theft of the master key.\n\n```bash\nwilson@spaceship:~$ gpg2 --output 1A8132B1.rev --gen-revoke 1A8132B1\n```\n\nThe revocation certificate is created in `1A8132B1.rev`. It must be preserved in a safe place (we will see in part 3).\n\nLet's also save all keys.\n\n```bash\nwilson@spaceship:~$ gpg2 --export --armor 1A8132B1 > 1A8132B1.pub.asc\nwilson@spaceship:~$ gpg2 --export-secret-keys --armor 1A8132B1 > 1A8132B1.priv.asc\nwilson@spaceship:~$ gpg2 --export-secret-subkeys --armor 1A8132B1 > 1A8132B1.sub_priv.asc\n```\n\n`1A8132B1.pub.asc` will contain all public keys and `1A8132B1.priv.asc` the private keys of the master key.\n`1A8132B1.sub_priv.asc` contains only the private keys of the subkeys.\n\nAs mentioned above, we will only use the subkeys for daily use.\n\nLet's delete all private keys.\n\n```bash\nwilson@spaceship:~$ gpg2 --delete-secret-key 1A8132B1\n```\n\nThen, we import only the private keys of the subkeys.\n\n```bash\nwilson@spaceship:~$ gpg2 --import 1A8132B1.sub_priv.asc\n```\n\nLet's check that we have only the private keys of the subkeys:\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n/home/wilson/.gnupg/secring.gpg\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb   rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb   rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb   rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nThe small `#` before `sec` indicates that the secret key of the master key no longer exists, it's a stub instead.\n\nAll the files we have created will have to be kept offline (CD, USB stick, magnetic tape, paper sheet, ...).\n\n### Conclusion\n\nThrough this article, we have created a PGP key with a set of subkeys dedicated to a particular task. The advantage of using OpenPGP against a simple asymmetric key is the subkeys. If one of the keys is compromised, you only need to revoke it and regenerate a new one. It will not be necessary to revoke the master key, the one that holds our digital identity. This strategy offers a much higher level of security.\n\nYou can now sign your emails and get them encrypted, sign your commit git, use keybase.io and\neven authenticate yourself to a server in SSH.\n\nIn addition, on November 2, there will be a [key signing party](https://blog.mozfr.org/post/2017/09/Se-rencontrer-pour-echanger-ses-clefs-2-novembre-Paris) (key signing party){:rel=\"nofollow noreferrer\"} at Mozilla France.\nThis event is an opportunity to meet other OpenPGP enthusiasts and, above all, it will make it possible to have your newly created key certified.\n\n### Article en relation\n* [OpenPGP - The almost perfect key pair (part 1)](/openpgp-almost-perfect-key-pair-part-1/)\n* [OpenPGP - Export Secret Keys to a Yubikey (part 2)](/openpgp-secret-keys-yubikey-part-2/)\n* [OpenPGP - Long term storage (part 3)](/fr/openpgp-stockage-froid-clefs-partie-3/)\n* [OpenPGP - I was in a Key Signing Party (part 4)](/fr/openpgp-clef-participe-a-une-fete-de-la-signature-des-clefs/)\n\n### Resources\n* [GPG : création de votre première paire de clefs et chiffrement d'un fichier](https://www.nextinpact.com/news/98374-gnupg-creation-votre-premiere-paire-clefs-et-chiffrement-dun-fichier.htm){:rel=\"nofollow noreferrer\"}\n* [GPG : comment créer une paire de clefs presque parfaite](https://www.nextinpact.com/news/102685-gpg-comment-creer-paire-clefs-presque-parfaite.htm){:rel=\"nofollow noreferrer\"}\n* [Creating the perfect GPG keypair](https://alexcabal.com/creating-the-perfect-gpg-keypair/){:rel=\"nofollow noreferrer\"}\n* [Ma nouvelle clé PGP](http://www.bortzmeyer.org/nouvelle-cle-pgp.html){:rel=\"nofollow noreferrer\"}\n* [OpenPGP Best Practices](https://riseup.net/en/security/message-security/openpgp/best-practices){:rel=\"nofollow noreferrer\"}\n* [Using OpenPGP subkeys in Debian development](https://wiki.debian.org/Subkeys){:rel=\"nofollow noreferrer\"}\n* [PGP Key signing party](https://www.eventbrite.com/e/pgp-key-signing-party-tickets-37092612001){:rel=\"nofollow noreferrer\"}\n* [Se rencontrer pour échanger ses clefs le 2 novembre à Paris](https://blog.mozfr.org/post/2017/09/Se-rencontrer-pour-echanger-ses-clefs-2-novembre-Paris){:rel=\"nofollow noreferrer\"}\n"}