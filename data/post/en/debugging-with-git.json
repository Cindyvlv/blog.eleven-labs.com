{"date":"2017-11-08T00:00:00.000Z","title":"Debugging with Git","excerpt":"Today I'd like to talk about a tool that will allow us to rapidly isolate an incorrect commit, that caused a bug in our application: git bisect","readingTime":"4mn","authors":["rpierlot"],"categories":["javascript","php"],"content":"\nWhen deploying new features to a production environment, risks of regression exist. Especially in big applications with a lot of untested code. We are never safe from negative behaviour, or impacts that need our immediate attention.\n\nIn a project using Git as a source code management tool, it appears essential to rapidly find the source of our problem.\nWhen dealing with large teams composed of many people, every deployment comes with a lot of commits.\nBut if the origin of the problem is hidden in the middle of all those commits, it is quite complicated to check every commit for the source of the issue.\n\nGit is a very famous tool in software development, and it comes with a bunch of commands that prevent us from missing good old SVN.\nToday I'd like to talk about a tool that will allow us to rapidly isolate an incorrect commit, that caused a bug in our application:  : `git bisect`\n\nTo simplify my explanation of `git bisect`, I'm going to use the following history of commits:\n\n```\n* bad5bfe - fixed security issue (1 hour ago) <Wilson Bouncer>\n* a73d98b - implemented feature to get recipe in space kitchen (8 hours ago) <Wilson Cook>\n* 9bd6395 - updated metrics computation on space launcher (13 hours ago) <Wilson Analyst>\n* 99f3fa1 - worked on real-time suggestion when encounting problems in space (1 day ago) <Wilson Scientist>\n* 4021b7f - deleted ab test feature and cleaned up code (1 day ago) <Wilson Cleaner>\n* 0d7c223 - computed the ideal playlist based upon astronauts tastes (2 days ago) <Wilson DJ>\n* 29d90f9 - updated README.md (2 days ago) <Wilson Documentation>\n```\nImagine that those commits have been deployed to production. After a few moments, someone notices that something's wrong. One of the functionalities is broken.\nThe problem is immediately brought to developers and they have to isolate the cause of the bug. They only have one clue: everything was fine before the last deployment.\n\nGit takes away the boredom of testing our commits one by one with `git bisect`. This command does a [binary search](https://en.wikipedia.org/wiki/Binary_search_algorithm){:rel=\"nofollow noreferrer\"} in our history.\n\n![](/imgs/posts/2017-10-26-debugging-with-git/binary_search.jpg)\n\nAt every step of the binary search, we must tell `git bisect` if the issue still persists.\nAccording to our response, `bisect` will go forward or backward to isolate the issue.\n\nThere are two main commands with `git bisect` :\n* `git bisect good`: this allows us to say that the commit which `bisect` stopped us on does not contain the bug.\n* `git bisect bad`: this allows us to say that the bug still exists on the commit we're on.\n\n## Let's debug!\n\nBefore we begin debugging, we must start the script, and indicate the interval on which we're going to use `bisect`.\n\n```\ngit bisect start\ngit bisect good 29d90f9\ngit bisect bad bad5bfe\n```\nOnce this is done, we can notice that `bisect` changed our position in the commits history to the middle of our interval.\n```\nBisecting: 2 revisions left to test after this (roughly 2 steps)\n[99f3fa1b86489dd9d6f30368d5b5321e04a955df] worked on real-time suggestion when encounting problems in space\n```\nNow, we must check if the bug is still here. Unfortunately yes in this case!\nKeep on \"bisecting\".\n```\ngit bisect bad\n```\nWe're now on the middle of our last interval (binary search)\n```\nBisecting: 0 revisions left to test after this (roughly 1 step)\n[4021b7f911b84daa6ea5ccad51d3171fc0e46b67] deleted ab test feature and cleaned up code\n```\nNotice that the number of steps left in the search is indicated: `roughly 1 step`.\nWe still have the bug on this commit:\n```\ngit bisect bad\n```\nWe're getting closer!\n```\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[0d7c223dcfee62e1750e21385e7fa35b030bc8a7] computed the ideal playlist based upon astronauts taste\n```\nOn this commit, our problem is gone! Yay! Let's tell it to `git bisect`:\n```\ngit bisect good\n```\n`git bisect` has reached the end of its search. He has found the culprit:\n```\n4021b7f911b84daa6ea5ccad51d3171fc0e46b67 is the first bad commit\ncommit 4021b7f911b84daa6ea5ccad51d3171fc0e46b67\nAuthor: Wilson Cleaner <wilson.cleaner@eleven-labs.com>\nDate:   Tue Oct 17 16:56:06 2017 +0200\n\n    deleted ab test feature and cleaned up code\n\n:100644 100644 66f0d114adeee6d2141aa6fe64a5cc431ebce65e a0fe62c949a75957245ec1c04728fea047488697 M\tREADME.md\n```\n\nTo reinitialize nothing more simple:\n\n```\ngit bisect reset\n```\nWe're now where we began, but we have found the evil commit that tormented the whole team, all of this quite rapidly.\n\n## Bonus\n\nThe `bisect` command allows you to automate the search process.\nIndeed, if you have the luxury of adding a test that highlights the bug, you can launch git bisect as follow:\n```\ngit bisect run vendor/bin/phpunit --filter ThatWontHappenAgainISwearTest\n```\nThe command `vendor/bin/phpunit --filter ThatWontHappenAgainISwearTest` will be launched at every step seen before, and you'll automatically have the hash of the commit you're looking for.\n\n## Recap\n\nThe use of `git bisect` allows us to rapidly debug by isolating a bad commit with a binary search.\nJust indicate `git bisect good` or `git bisect bad` so that `bisect` can navigate through your history.\n\n"}