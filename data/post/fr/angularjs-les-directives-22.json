{"date":"2015-08-19T00:00:00.000Z","title":"AngularJS : Les Directives 2/2","excerpt":"## Préambule","readingTime":"3mn","authors":["denis"],"categories":["javascript"],"content":"\n## Préambule\n\nComme vu dans l’article précédent, une directive est un marqueur HTML interprété par AngularJS via son $compile.\nNous allons donc nous intéresser ici aux divers moyens nous permettant d’avoir une gestion la plus fine possible des\ntransformations de nos directives.\n\n## Manipulation du contenu\n\nNous pouvons donc agir à quatre moments clefs de la vie d’une directive :\n\n- Le compile n’est appelé qu’une seule fois lors de l’initialisation. C’est ici que l’on manipule le template de la\ndirective en amont, souvent dans un but d’optimisation.\n- Le controller est appelé quand une directive est instanciée. Il permet d’initialiser le scope de la directive et de\ndéfinir les méthodes de notre directive qui pourront éventuellement être partagées avec d’autres controllers extérieurs.\n- Le pre-link est très rarement utilisé, sa principale particularité est que les pre-link sont appelés en héritage parent\nvers les enfants, là ou les post-link sont appelés en remontant des enfants vers les parents.\n- Le post-link sera votre principal outil car à ce moment là, le contenu est prêt et disponible pour agir dessus.\nC’est donc ici que l’on pourra par exemple manipuler le DOM finalisé, attacher des événements, attacher des watchers sur\nle scope, observer les attributs de la directive ...\n\nCi-dessous une directive implémentant tous ces concepts :\n\n```js\nangular.module('exemple', [])\n  .directive('myDirective', function() {\n    return {\n      restrict: 'EA',\n      controller: function($scope, $element, $attrs, $transclude) {\n        // controller code\n      },\n      compile: function(tElement, tAttributes, transcludeFn) {\n        // compile code\n        return {\n          pre: function(scope, element, attributes, controller, transcludeFn) {\n            // pre-link code\n          },\n          post: function(scope, element, attributes, controller,transcludeFn) {\n            // post-link code\n          }\n        };\n      }\n    };  \n  });\n```\n\nLa fonction pre-link étant rarement utile, nous pouvons la supprimer. Dans ce cas le compile doit retourner la fonction\npost-link.\n\n```js\nangular.module('exemple', [])\n  .directive('myDirective', function() {\n    return {\n      restrict: 'EA',\n      controller: function($scope, $element, $attrs, $transclude) {\n        // controller code\n      },\n      compile: function(tElement, tAttributes, transcludeFn) {\n        // compile code\n        return function(scope, element, attributes, controller,transcludeFn) {\n          // post-link code\n        }\n      }\n    };  \n  });\n```\n\nSi l'on ne souhaite effectuer aucune manipulation du template, la fonction compile devient inutile Dans ce cas il est\npossible de déclarer uniquement un link contenant la fonction post-link.\n\n```js\nangular.module('exemple', [])\n  .directive('myDirective', function() {\n    return {\n      restrict: 'EA',\n      controller: function($scope, $element, $attrs, $transclude) {\n        // controller code\n      },\n      link: function(scope, element, attributes, controller,transcludeFn) {\n        // post-link code\n      }\n    };  \n  });\n```\n\n## Transclusion\n\nIl peut arriver qu'une directive doive modifier les éléments du DOM se trouvant à l’intérieur d'elle.\nDans ce cas, la transclusion est notre amie, et nous permet de récupérer le contenu interne à la directive pour le\nmanipuler.\n\n### Mise en place\n\nPour se faire il suffit de spécifier à sa directive qu'elle souhaite utiliser la transclusion.\n\n```js\nangular.module('exemple', [])\n  .directive('myDirective', function () {\n    return {\n      restrict: 'EA',\n      transclude: true,\n      scope: {\n        chapo: @\n      },\n      template: template.html\n      link: function(scope, element, attributes, controller,transcludeFn) {\n        // post-link code\n      }\n    };  \n  });\n```\n\nMais cela seul ne suffit pas, il vous faudra aussi définir dans son template l'emplacement où la transclusion sera faite\n\n```html\n<div>\n  <h2>{{chapo}}</h2>\n  <div ng-transclude></div>\n</div>\n```\n\nDans certains cas plus complexes, il faudra passer par la fonction $transclude, qui est un peu plus complexe mais pas\ninsurmontable.\n\nNous voilà donc au terme de notre promenade dans le monde merveilleux des directives sous Angular 1.x. Souvent un peu\ncomplexe à prendre en main au début, on peut très rapidement en devient friand parfois de façon un peu excessive.\n\nSi je peux vous donner un conseil assurez-vous que la fonctionnalité va être répété sinon il peut être contre-productif\nde faire une directive.\n\nEn complément n'hésitez à aller voir [le guide](https://docs.angularjs.org/guide/directive){:rel=\"nofollow noreferrer\"} du site officiel, et bon\nAngular à tous !\n"}