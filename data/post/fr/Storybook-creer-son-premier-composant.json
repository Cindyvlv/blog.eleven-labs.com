{"date":"2021-11-03T00:00:00.000Z","title":"Storybook - Cr√©er son premier composant","excerpt":"Storybook c'est le framework open-source qui a √©t√© r√©compens√© pendant la derni√®re React Europe, d√©crouvrons ce qu'il nous cache dans cette intro !","readingTime":"9mn","authors":["manu"],"categories":["javascript"],"content":"![Storybook banner](/imgs/posts/2019-11-27-Storybook-intro/storybooktitle.png)\n\n\nLe but de cette s√©rie d'article sur Storybook est de pr√©senter une feature de la librairie pour explorer ses possibilit√©s, le tout de la mani√®re la plus concise possible, avec des petits exemples.\n\nPour le cas pratique, c'est directement extrait de la documentation officielle de Storybook et ce sera souvent le cas.\nComme Gad Elmaleh, c'est pas grave si c'est mieux racont√©.\n\n\n\n## Mais qu'est-ce que c'est Storybook ?\n\n---\n\nStorybook c'est une librairie open source cr√©√©e pour le d√©veloppement de composant UI qui se concentre sur l'isolation des composants, permettant une cr√©ation plus organis√©e et donc plus efficace.\n\nC'est un environnement de d√©veloppement permettant de naviguer dans un catalogue de composant (book), de voir les diff√©rents √©tats d'un composant par use-case (story) tout en apportant des outils de test, de pr√©visualisation et de documentation du composant.\n\n\n\nStorybook fonctionne avec la plupart des frameworks UI, que ce soit le sacro-saint triptyque Vue-React-Angular autant que Svelte, React Native ou m√™me les Web Components ü§ô\n\n> *\"Ah le salaud il a pas cit√© mon framework\"*\n\n\n\n\n## P√®re Castor, raconte-moi une Story\n\n---\n\nL'id√©e derri√®re ce service est d'apporter une haute robustesse et maintenabilit√© aux composants de son interface, permettant de les r√©utiliser et de les partager dans un 'environnement de confiance' (√ßa c'est la pr√©face du conte).\n\n\n\nCela est possible gr√¢ce aux diff√©rentes fonctionnalit√©s de Storybook :\n- Construire des composants en isolation\n- Moquer facilement des √©tats cl√©s du composant difficiles √† recr√©er dans son application (loading, error, disabled, user not logged in, etc.)\n- Cr√©er, documenter, rejouer des use cases en tant que Story pour chaque composant\n\nAuxquelles s'ajoute l'utilisation :\n\n- De snapshots et tests unitaires pour les composants\n- D'add-ons (extensions) pour enrichir l'environnement de base de Storybook\n\n\n\nStorybook propose donc un cadre o√π l'on peut tester la r√©ponse d'un composant √† une story qui n'est, en soi, qu'un jeu de valeur des props pass√©s au composant.\n\n\n\nQui dit environnement de confiance, dit contrema√Ætres, et donc vous pourrez inviter PO, Scrum, Designer, QA √† votre beau projet pour qu'ils mettent des commentaires partout.\n\n> *\"Tr√®s joli ton carrousel Eric, maintenant que je le vois, je me dis qu'il faudrait l'enlever...\"*\n\n\n\nSi vous voulez de bons exemples üòâ\n\n‚Üí Storybook de Carbon : une librairie de composant\n\n[![Storybook de la librairie Carbon Design](/imgs/posts/2019-11-27-Storybook-intro/carbon.png)](http://react.carbondesignsystem.com/?path=/story/dropdown--default)\n\n\n‚Üí Storybook d'un composant Airbnb, celui du choix dans les dates\n\n[![Storybook d'un composant Airbnb](/imgs/posts/2019-11-27-Storybook-intro/airbnb.png)](https://airbnb.io/react-dates/?path=/story/daterangepicker-drp--default)\n\n\n\n\n\n## Read The Fucking Story\n\n---\n### useStorybook()\n\nApr√®s un bon vieux `create-react-app` des familles on peut initialiser Storybook (sb) facilement via npx\n\n`npx -p @storybook/cli sb init`\n\n√áa y est! Une nouvelle vie de d√©veloppeur front commence, Storybook install√©, les √©toiles plein les yeux, tu te dis que plus jamais tu n'auras √† retoucher 200 fois ton beau composant. D√©sormais, c'est le vrai monde qui t'attends, et le vrai monde, il va chez le coiffeur... et fait du CDD.\n\n[CDD](https://blog.hichroma.com/component-driven-development-ce1109d56c8e) ( Composent-Driven Development ), si on doit la faire courte, c'est comme du TDD mais √† la place des tests t'utilises des user stories.\n\n\n### Cas pratique\n\n---\n\n<div align=\"center\">\n  <img src=\"/imgs/posts/2019-11-27-Storybook-intro/pasorcier.png\">\n</div>\n\n\n\nOn va donc appliquer cette belle m√©thodologie, sur la meilleure application possible : cette bonne vieille to-do list!\n\nAlors on va commencer par se faire un tout petit composant bien gentil qui afficherait une t√¢che importante comme : *\"Pr√©venir Jeanine\".*\n\n``` javascript\n    // src/components/Task.js\n\n    import React from 'react';\n\n    export default function Task({ task: { id, title, state }, onArchiveTask, onPinTask }) {\n      return (\n        <div className=\"list-item\">\n          <input type=\"text\" value={title} readOnly={true} />\n        </div>\n      );\n    }\n```\nCette t√¢che va pouvoir vivre sa meilleure vie : √™tre normale, √™tre archiv√©e ou √™tre importante.\n\nOn va donc r√©diger des jolis cas d'usage pour ce composant, AVANT de coder ses fonctionnalit√©s (comme les tests en TDD)\n```javascript\n    // src/components/Task.stories.js\n\n    import React from 'react';\n    import { storiesOf } from '@storybook/react';\n    import { action } from '@storybook/addon-actions';\n\n    import Task from './Task';\n\n    // La t√¢che de notre composant <Task />\n    export const task = {\n        id: '1',\n        title: 'Pr√©venir Jeanine',\n        state: 'TASK_INBOX',\n        updatedAt: new Date(2018, 0, 1, 9, 0)\n    };\n\n    // Les callbacks qui sont mock via action()\n    export const actions = {\n        onPinTask: action('onPinTask'),\n        onArchiveTask: action('onArchiveTask')\n    };\n\n    // Les stories, c'est √ßa le truc styl√©.\n\n    /*  storiesOf('NomDuComposant', module)\n        .add('nomStory', render() callback)\n    */\n    storiesOf('Task', module)\n    .add('default', () => <Task task={task} {...actions} />)\n    .add('pinned', () => <Task task={/{...task, state: 'TASK_PINNED'}/} {...actions} />)\n    .add('archived', () => <Task task={/{...task, state: 'TASK_ARCHIVED'}/} {...actions} />);\n```\n\nEt l√†, c'est le d√©clic, Storybook permet de render facilement ses composants dans diff√©rents √©tats.\nIl devient donc facile de wrapper son composant autour de tout un tas de Providers.\n\n```javascript\n  storiesOf('NomDuComposant', module)\n    .add('nomStory', render() callback)\n    .add('shouldFetchItemList', () => {\n      const GET_TRUC_QUERY = gql``\n      return (\n        <Query query={GET_TRUC_QUERY}>\n          {({data, error, loading}) => {\n              if (loading) return <p>Loading...</p>\n              if (error) return <p>Error: {error}</p>\n              return <ItemList>\n                  {data.items.map(item => <Item item={item} key={item.id}/>)}\n              </ItemList>\n          }}\n        </Query>\n      )\n    })\n```\n\n> *\"Mais √ßa fait 6 fois que tu nous le dit\"*\n\nOui mais l√† on le voit Billy.\n\n\n\nMaintenant qu'on a ce joli cadre de travail on va pouvoir changer le composant `<Task />` pour qu'il exploite tout ce que l'on souhaite tester avec nos stories.\n```javascript\n    // src/components/Task.js\n\n    import React from 'react';\n\n    export default function Task({ task: { id, title, state }, onArchiveTask, onPinTask }) {\n      return (\n        <div className={`list-item ${state}`}>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={state === 'TASK_ARCHIVED'}\n              disabled={true}\n              name=\"checked\"\n            />\n            <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n          </label>\n\n          <div className=\"title\">\n            <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" />\n          </div>\n\n          <div className=\"actions\" onClick={event => event.stopPropagation()}>\n            {state !== 'TASK_ARCHIVED' && (\n              <a onClick={() => onPinTask(id)}>\n                <span className={`icon-star`} />\n              </a>\n            )}\n          </div>\n        </div>\n      );\n    }\n```\n\nBon on cr√®ve tous d'envie de voir ce fameux catalogue de composant, LE storybook, celui qui te fait te lever tous les matins, allons-y de ce p-\n\n> Stop right there criminal scum\n\nIl ne faut pas oublier de dire √† Storybook o√π sont les stories sinon il va faire la gueule...\nIl est un peu susceptible le George.\n\n```javascript\n    // .storybook/config.js\n\n    import { configure } from '@storybook/react';\n    import '../src/index.css';\n\n    const req = require.context('../src', true, /\\.stories.js$/);\n\n    function loadStories() {\n      req.keys().forEach(filename => req(filename));\n    }\n\n    configure(loadStories, module);\n```\n\n1. `yarn storybook`\n2. Wait...\n3. `localhost:9009`\n\n![Storybook web UI](/imgs/posts/2019-11-27-Storybook-intro/tutobook.gif)\n\nEt voil√† c'est tout pour notre premier article !\n\n> Mais... esp√®ce de truand, c'est pas une to do list !\n\nEn effet, mais, mon lecteur ador√©, je sais que tu es une personne adulte et que tu sauras te d√©brouiller comme un grand.\n\nEt si tu n'as pas lu l'encart en d√©but d'article, la suite c'est simplement [ici](https://www.learnstorybook.com/intro-to-storybook/react/en/composite-component/).\n\n\n\n*√Ä bient√¥t les bichons* üëã\n\n\n\n## Autres articles sur Storybook\n\n---\n\n‚Üí Documenter son Storybook avec MDX et DocsPage\n\n![Article Documenter Storybook](/imgs/posts/2019-11-27-Storybook-intro/docarticle.png)\n\n\n\n‚Üí Test structurel de composant avec Storyshots et Jest\n\n![Tester ses composants sous Storybook](/imgs/posts/2019-11-27-Storybook-intro/testarticle.png)\n\n"}