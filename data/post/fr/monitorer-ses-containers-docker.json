{"date":"2017-12-12T00:00:00.000Z","title":"Monitorer ses containers Docker","excerpt":"Les containers sont aujourd'hui largement utilisés du développement jusqu'en production. Cependant un `docker stats` en ssh ne permet pas de gérer correctement son environnement de production. Nous allons donc voir comment répondre à ce besoin de monitoring pour des containers en production.","readingTime":"5mn","authors":["qneyrat"],"categories":[],"content":"\nLes containers sont aujourd'hui largement utilisés du développement jusqu'en production. Cependant un `docker stats` en ssh ne permet pas de gérer correctement son environnement de production. Nous allons donc voir comment répondre à ce besoin de monitoring pour des containers en production.\n\nNous allons aborder plusieurs technologies pour répondre à ce besoin :\n- [cAdvisor](https://github.com/google/cadvisor), solution rendue open-source par Google qui permet d'exposer l'ensemble des metrics des containers.\n- [Prometheus](https://github.com/prometheus/prometheus), solution open-source de base de données orientée time series.\n- [Grafana](https://github.com/grafana/grafana), solution open-source de dashboard très facilement configurable qui va permettre de tracer de jolis graphs.\n\n> **Ressource :**\n> [ctop](https://ctop.sh/) vous permet de visualiser les infos de `docker stats` dans le style de `htop`.\n\nLa stack que nous allons voir fonctionne comme ceci :\n\n- `cAdvisor` va exposer un endpoint `http://cadvisor:8080/metrics` avec l'ensemble des metrics des containers au moment `t`.\n\n- `Prometheus` va requêter toute les `x` secondes l'endpoint de cAdvisor et stocker les metrics dans sa base de données.\n\n- `Grafana` va afficher les metrics de Prometheus sous forme de graphs.\n\nAvant de commencer, assurez-vous d'avoir installé `docker` et `docker-compose`. Mes versions pour écrire cet article sont :\n\n```bash\n> $ docker --version; docker-compose --version\nDocker version 17.11.0-ce, build 1caf76c\ndocker-compose version 1.17.1, build 6d101fb\n```\n\nPour commencer, nous allons installer rapidement une application, prenons par exemple comme base [Api Platform](https://api-platform.com/).\n\n```bash\n> $ git clone git@github.com:api-platform/api-platform.git\n> $ cd api-platform\n> $ git checkout v2.1.4\n> $ docker-compose up\n> $ open http://127.0.0.1\n```\nNous avons maintenant accès à la documentation de l’api que vous venez d’installer.\n\n![api]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/api.png)\n\n## cAdvisor\n\nNous allons maintenant ajouter `cAdvisor` au `docker-compose.yml` :\n\n> **Ressource :**\n> vous pouvez retrouver [les fichiers `docker-compose.yml` et `prometheus.yml` ici](https://gist.github.com/qneyrat/318e7433b8c4de9edeccbac8ef0ec335).\n\n```yml\nservices:\n...\n  cadvisor:\n    image: google/cadvisor\n    container_name: cadvisor\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n    expose:\n      - 8080\n    ports:\n      - \"8005:8080\"\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n```\n\nNous pouvons relancer le `docker-compose`.\n\n```bash\n> $ docker-compose build\n> $ docker-compose up\n> $ open http://localhost:8005/docker/\n```\n\nNous avons maintenant accès à l'interface de `cAdvisor`.\n\n![cadvisor]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/cadvisor.png)\n\nCe qui nous permet déjà de voir sommairement les metrics de nos containers.\n\n![metrics]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/metrics.png)\n\nMalgré tout, cette solution seule n'est pas assez configurable et ne peut pas répondre pleinement à notre besoin.\n\n## Prometheus\n\nCommençons par installer `Prometheus` :\n\n```yml\nservices:\n...\n    prometheus:\n      image: prom/prometheus:v2.0.0\n      container_name: prometheus\n      volumes:\n        - ./docker/prometheus/:/etc/prometheus/\n        - prometheus-data:/prometheus\n      command:\n        - '--config.file=/etc/prometheus/prometheus.yml'\n        - '--storage.tsdb.path=/prometheus'\n        - '--web.console.libraries=/etc/prometheus/console_libraries'\n        - '--web.console.templates=/etc/prometheus/consoles'\n        - '--storage.tsdb.retention=200h'\n      expose:\n        - 9090\n      ports:\n        - \"9090:9090\"\n      networks:\n        - monitoring\n\nvolumes:\n...\n  prometheus-data: {}\n```\n\nEt ajoutons dans le dossier `docker/prometheus` le fichier de configuration `prometheus.yml`.\n\n```yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    monitor: 'docker-host-alpha'\n\nrule_files:\n  - \"targets.rules\"\n  - \"host.rules\"\n  - \"containers.rules\"\n\nscrape_configs:\n  - job_name: 'cadvisor'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['cadvisor:8080']\n\n  - job_name: 'prometheus'\n    scrape_interval: 10s\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\nNous pouvons remarquer le job de scraping `cadvisor` sur l'endpoint `cadvisor:8080`. Prometheus va toujours scraper selon le schéma suivant :\n\n```\n<host>:<port>/metrics\n```\n\nPour la configuration, le `/metrics` est implicite.\n\nNous pouvons de nouveau relancer le `docker-compose`.\n\n```bash\n> $ docker-compose build\n> $ docker-compose up\n> $ open http://localhost:9090/targets\n```\n\nNous pouvons voir que les jobs que nous avons configurés sont bien `up`. C'est à dire que `Prometheus` a bien réussi à scraper les metrics de `cAdvisor` et de `Prometheus`.\n\n![prom]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/prom.png)\n\n## Grafana\n\nNous allons maintenant installer `Grafana` :\n\n```yml\nservices:\n...\n  grafana:\n    image: grafana/grafana:4.6.2\n    container_name: grafana\n    volumes:\n      - grafana-data:/var/lib/grafana\n    expose:\n      - 3000\n    ports:\n      - \"3000:3000\"\n    networks:\n      - monitoring\n\nvolumes:\n...\n  grafana-data: {}\n```\n\nNous pouvons lancer une dernière fois le `docker-compose`.\n\n```bash\n> $ docker-compose build\n> $ docker-compose up\n> $ open http://localhost:3000\n```\n\n> **Accès :**\n> les accès par défaut du Grafana sont\n>admin\n>admin\n\nCommençons par ajouter notre `Prometheus` comme `Data Sources`. Rendons-nous sur [http://localhost:3000/datasources/new](http://localhost:3000/datasources/new) et ajoutons le host de notre `Prometheus`.\n\n![grafana]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/grafana.png)\n\nMaintenant que `Grafana` peut accéder à notre `Prometheus`. Il nous reste plus qu'à créer un nouveau dashboard. Pour gagner du temps nous allons en importer directement.\n\n> [https://grafana.com/dashboards/193](https://grafana.com/dashboards/193)\n\nImportons ce nouveau dashboard [http://localhost:3000/dashboard/new?editview=import∨gId=1](http://localhost:3000/dashboard/new?editview=import∨gId=1) et mettons l'id de template `193`. Une fois fait, nous pouvons nous rendre sur notre dashboard.\n\n> [http://localhost:3000/dashboard/db/docker-monitoring?refresh=10s∨gId=1](http://localhost:3000/dashboard/db/docker-monitoring?refresh=10s∨gId=1)\n\n![dashboard]({{site.baseurl}}/assets/2017-12-12-monitorer-ses-containers-docker/dashboard.png)\n\nNous pouvons maintenant voir les metrics systèmes de nos containers, comme la consommation `cpu` ou `ram` de chacun.\n\nSelon vos besoins, vous pouvez créer des dashboards plus spécifiques avec les informations que vous avez besoin.\nPour `Prometheus`, il existe de nombreux `exporter` pour pouvoir récupérer encore plus de metrics comme par exemple pour `Redis` ou `RabbitMQ`.\nVous pouvez aussi créer vous-même un `exporter` du moment qu'il expose des metrics sur un endpoint `HTTP` `/metrics` ou encore exposer des metrics métier de votre application.\n\n> **Ressource :**\n> vous pouvez retrouver l'exposition de metrics métier dans une application Java, comme expliqué dans cet article\n> [http://blog.xebia.fr/2017/07/28/superviser-mon-application-play-avec-prometheus](http://blog.xebia.fr/2017/07/28/superviser-mon-application-play-avec-prometheus)\n\n## Ressources complémentaires\n\n- [https://prometheus.io/blog/2017/05/17/interview-with-iadvize/](https://prometheus.io/blog/2017/05/17/interview-with-iadvize/)\n- [https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04](https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04)\n- [https://www.ctl.io/developers/blog/post/monitoring-docker-services-with-prometheus/](https://www.ctl.io/developers/blog/post/monitoring-docker-services-with-prometheus/)\n\n## Dépôts Github pour le monitoring avec Docker\n- [https://github.com/vegasbrianc/prometheus](https://github.com/vegasbrianc/prometheus)\n- [https://github.com/stefanprodan/dockprom](https://github.com/stefanprodan/dockprom)\n"}