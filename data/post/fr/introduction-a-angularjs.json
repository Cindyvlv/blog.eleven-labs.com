{"date":"2013-12-11T00:00:00.000Z","title":"Introduction à AngularJS","excerpt":"AngularJS est un framework JavaScript open-source qui a vu le jour en 2009 et dont le père Miško Hevery est un expert Web autour des technologies Java et JavaScript, travaillant chez Google.","readingTime":"4mn","authors":["peter"],"categories":["javascript"],"content":"\n*AngularJS* est un *framework* *JavaScript* open-source qui a vu le jour en 2009 et dont le père Miško Hevery est un expert Web autour des technologies *Java* et *JavaScript*, travaillant chez Google.\n\nConstruire une application web avec une interface utilisateur complexe devient très difficile en utilisant uniquement des librairies telles que *jQuery*. *AngularJS* facilite la création et la maintenance des applications, et accélère le développement *JavaScript/AJAX*. Il permet la création d'applications web monopage (*single-page application*) et apporte aux applications Web côté client les services traditionnellement apportés côté serveur, rendant de ce fait les applications Web beaucoup plus légères.\n\n**Les concepts d'*AngularJS* :**\n\n***Template côté client***\n\nLes *templates* et les données sont assemblés côté client. Le rôle du serveur se résume alors seulement à servir les données requises par ces *templates*.\n\nVoici un exemple minimaliste contenant un *template* et un *controller* :\n\nVoici notre *template* \"hello.html\" :\n\n```html\n<html ng-app>\n<head>\n<title>Hello, World in AngularJS</title>\n  <script src=\"angular.js\"></script>\n  <script src=\"controllers.js\"></script>\n</head>\n<body>\n  <div ng-controller='HelloController'>\n    <input ng-model='hello.text'>\n    <p>{{hello.text}}, World</p>\n  </div>\n</body>\n</html>\n```\n\nVoici notre contrôleur \"controller.js\"\n\n```js\nfunction HelloController($scope) {\n  $scope.hello = { text: 'Hello' };\n}\n```\n\nLe chargement de \"hello.html\" dans un navigateur produira l'affichage suivant :\n\n![hello](/imgs/posts/2013-12-11-introduction-a-angularjs/hello.png)\n\nIl y a plusieurs choses intéressantes à noter ici en comparaison avec la plupart des méthodes utilisées aujourd'hui :\n\n-   Il n'y a pas de classes ou d'ID dans le code *HTML* pour identifier où attacher des *event listeners*.\n-   Lorsque le contrôleur initialise *hello.text*, nous n'avons pas eu à enregistrer des *event listeners* ou écrire des *callbacks*.\n-   Le contrôleur est un bon vieux code *JavaScript* qui n'a besoin de rien hériter de ce que *AngularJS* fournit, et qui obtient l'objet *$scope* sans que l'on n'ait besoin de le créer.\n-   Nous n'avons pas eu à appeler le constructeur du contrôleur.\n\n***MVC* (Modèle-Vue-Contrôleur)**\n\nDans les applications *AngularJS*, la vue est le *DOM* (*Document Object Model*), les contrôleurs sont des classes *JavaScript*, et le modèle est stocké dans les propriétés des objets.\n\n***Data Binding***\n\n*AngularJS* permet de faire du *data binding* très simplement sans devoir écrire le moindre code *AJAX*.\nRetournons dans l'exemple de code ci-dessus. Si nous remplaçons le texte *Hello* par le texte *Hi* dans le champ de saisie, voici l'affichage que nous aurons dans le navigateur :\n\n![Hi](/imgs/posts/2013-12-11-introduction-a-angularjs/hi.png)\n\nL'interface utilisateur se met à jour dynamiquement, sans que nous ayons eu besoin d'attacher un *change listener* sur le champ de saisie.\nIl faut également noter que le *data binding* est bidirectionnel. Dans notre contrôleur, le changement de valeur de notre variable *$scope.hello.text*, à la suite d'une requête au serveur par exemple, mettrait automatiquement à jour le champ de saisie et le texte dans les doubles accolades.\n\n**Injection de dépendances**\n\nSi nous reprenons le code de notre contrôleur, on note que l'objet *$scope* est passé à notre fonction automatiquement. En effet, *AngularJS* fournit un système d'injection de dépendances qui suit un modèle de conception appelé la \"loi de Déméter\" (Law of Demeter).\n\n**Directives**\n\nUne des meilleures parties de *AngularJS*, c'est que vous pouvez écrire vos propres *templates* *HTML*. En effet, le cœur du *framework* inclut un puissant moteur de manipulation du *DOM* qui vous permet d'étendre la syntaxe du *HTML*.\nNous avons déjà vu plusieurs nouveaux attributs dans notre *template* qui ne font pas partie de la spécification HTML.\nSi l'on reprend notre *template* \"hello.html\", on remarque la notation de double accolades et *ng-model* pour le *data binding* et *ng-controller* pour spécifier quel contrôleur supervise quelle partie de la vue. On appel ces extensions HTML des directives.\n*AngularJS* est livré avec de nombreuses directives qui vous aideront à définir les vues de votre application. Ces directives peuvent définir ce que nous appelons des *templates* et peuvent être utilisé pour créer des composants réutilisables.\n\nComparons notre code écrit avec *AngularJS*, à ce que l'on écrirait en *JavaScript* natif :\n\n```html\n<html>\n<head>\n<title>Hello, World in JavaScript</title>\n</head>\n<body>\n<p id=\"hello\"></p>\n<script type=\"text/javascript\">\n  var isIE = document.attachEvent;\n  var addListener = isIE\n      ? function(e, t, fn) {e.attachEvent('on' + t, fn);}\n      : function(e, t, fn) {e.addEventListener(t, fn, false);};\n\n  addListener(window, 'load', function() {\n    var hello = document.getElementById('hello');\n    if (isIE) {\n      hello.innerText = 'Hello, World';\n    } else {\n      hello.textContent = 'Hello, World';\n    }\n  });\n</script>\n</body>\n</html>\n```\n\nN'y a-t-il pas une très grande différence entre un code *JavaScrit* natif et un code *AngularJS* ?\n\nCette petite introduction à *AngularJS* ne vous donne-t-elle pas envie d'aller plus loin ?\nNous étudierons dans un autre article, l'anatomie d'une application *AngularJS*. À suivre...\n\nPour aller plus loin :\nhttp://misko.hevery.com/about\nhttp://angularjs.org\nhttp://egghead.io/lessons\n"}