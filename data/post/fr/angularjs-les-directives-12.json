{"date":"2014-07-11T00:00:00.000Z","title":"AngularJS : Les Directives 1/2","excerpt":"## Kézako ?","readingTime":"3mn","authors":["denis"],"categories":["javascript"],"content":"\n## Kézako ?\n\nPour faire simple une directive est un marqueur sur un élément du DOM (en tant qu'attribut, nom d’élément commentaire ou\nde classe CSS), ce marqueur informe le compiler HTML ($compile) d'attacher un comportement à cet élément voir de\ntransformer cet élément et ses enfants.\n\nA mon sens un des gros plus du framework AngularJS  réside dans le fait que tout son langage de Template (directive,\nfiltre, ...) est implémenté de la même manière que ce que nous allons voir ci-dessous.\nLes sources sont accessibles ici : [https://github.com/angular/angular.js/tree/master/src/ng]()\n\n## Créer des directives\n\nTout d'abord nous suivrons  une convention de nommage qui  veut qu'on préfixe le nom de ses propres directives, dans nos\nexemples ci-dessous nous utiliserons le préfixe \"my\".\n\nLors de cet article nous étudierons les options les plus communes des directives, deux autres articles compléteront le\ntour d'horizon des directives.\n\n### template et templateUrl\n\nUne première étape sera de créer une simple directive chargée d'afficher \"Hello Directive\"\n\n```js\nangular.module('exemple', [])\n  .directive('myDirective', function() {\n    return {\n      template: 'Hello Directive',\n      // une autre solution serait de cibler un template html\n      // templateUrl: 'my-template.html',\n    }\n  });\n```\n\n```html\n<div my-directive></div>\n```\n\nPar défaut le seul moyen d'afficher une directive est de l'utiliser via un `attribut`.\nSi cela ne convient pas à votre usage il faudra passer par l'option **restrict**.\n\n### restrict\n\nL'option `restrict` permet de définir le marqueur auquel réagira le compilateur, elle peut valoir :\n\n- `A` : un attribut\n- `E` : un élément\n- `C` : une classe\n- `M` : un commentaire\n\nCes restrictions sont combinables.\n\n- `AEC` : le marqueur peut être un attribut, un élément ou une classe.\n\n```html\n// attribut\n<div my-directive></div>\n\n// élément\n<my-directive></my-directive>\n\n// classe\n<div class=\"my-directive\">\n\n// commentaire\n<!-- directive:my-directive -->\n```\n\nL'usage veut que la déclaration via commentaire ne soit jamais utilisée.\n\nLa déclaration via élément est privilégiée dans le cas de création de directive complexe de type widget/composant.\n\nLa déclaration par classe ou attribut quand à elle convient parfaitement à un comportement simple, un gestionnaire de\nrebond par exemple.\n\n### scope\n\nUne directive peut avoir pour but d'être réutilisée plusieurs fois sur la même page, ce genre de problématique, entre\nautre, nous amène à nous intéresser à l'option `scope`.\n\nL'option `scope` peut avoir 3 types de valeurs :\n\n- `false` : ne rien faire vis à vis du scope, c'est la valeur par défaut.\n- `true`: créé un scope enfant.\n- `{...}`: mettre un objet  javascript créé un `scope isolé.`\n\nRassurez vous le principe de scope en Angular est très proche de celle de Javascript.\n\nLe `scope enfant` ainsi que le `scope isolé` dispose d'un accès au `scope parent` via sa propriété\n`$parent`.\n\nLa grosse différence entre ces deux types de `scope` est la gestion de `l'héritage`, ainsi seul un\n`scope enfant` hérite via son prototype des données de son `scope parent`, il est donc inutile d'aller\nchercher les informations via `$parent`, à l'inverse d'un `scope isolé`.\n\n##### Céation d'un scope isolé\n\nPour définir un `scope isolé` il est necessaire de `binder` ses propriétés :\n\n- `@` : pour un attribut texte.\n- `=` : pour une expression (valeur en two way binding).\n- `&` : pour une expression déclenchant une action.\n\nAfin de définir une propriété du `scope isolé` on fait précéder le nom de l'attribut par le signe adéquat.\nSi le nom de la propriété est identique au nom de l'attribut, on peut également se contenter de son signe.\n\n```js\nangular.module('exemple', [])\n  .directive('myAstraunote', function() {\n    return {\n      restrict: 'E',\n      scope: {\n        name: '@',\n        expression: '=',\n        fn: '&amp;action',\n      },\n    }\n  });\n```\n\n```html\n<my-directive name='wiston' expression='user.mission' action='launch(user)'></my-directive>\n```\n\nDans le prochain opus, controller, compile, link et transclude !\n"}