{"date":"2016-12-13T00:00:00.000Z","title":"Papa, c'est quoi un Polyfill ?","excerpt":"Avec l'avènement du js natif, et la multiplication des navigateurs et des environnements (mobile, desktop, tablette), on entend de plus en plus dans nos open-spaces «-Dis, tu connaîtrais pas un polyfill ?»","readingTime":"3mn","authors":["captainjojo"],"categories":["javascript"],"content":"\nAvec l'avènement du js natif, et la multiplication des navigateurs et des environnements (mobile, desktop, tablette), on entend de plus en plus dans nos open-spaces :\n\n> «-Dis, tu connaîtrais pas un polyfill ?»\n\nMais c'est qui ce polyfill ?\n\n### Définition :\n\nUn polyfill, c'est simple. C'est un ensemble de fonctions permettant de simuler, sur un [navigateur web](https://fr.wikipedia.org/wiki/Navigateur_web) ancien, des fonctionnalités qui ne sont pas nativement disponible. (cf : Wikipédia){:rel=\"nofollow noreferrer\"}\n\nEn clair, c'est comme à l'époque avec le double CSS, un spécialement pour IE et un pour le reste. Aujourd'hui les navigateurs n'implémentent pas à la même vitesse les nouvelles fonctionnalités disponibles par javascript natif. Nous devons alors utiliser un polyfill pour que celle-ci soient disponibles partout.\nEt là je vous entend me dire :\n\n> «-Mais c'est pas ce que Jquery fait déjà ?»\n\nAlors non, ce n'est pas exactement ce que fait Jquery. En effet, ce dernier est une surcouche qui permet d'utiliser les mêmes fonctions js sur l'ensemble des navigateurs, mais ce n'est pas un polyfill, car il renomme les fonctions et n'utilise pas directement la fonction native.\nEncore une fois, vous allez me dire :\n\n> «-Mais alors, c'est quoi le polyfill ?»\n\nC'est simple. Prenons la fonction native javascript \"[fetch](https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch)\", qui permet d'appeler des urls en XHR. Si vous allez sur le site [Can I Use ?](http://caniuse.com/#search=fetch), vous verrez que vous ne pouvez pas utiliser cette fonction sur IOS 10.  Alors vous pouvez utiliser la fonction \"ajax\" de Jquery mais en échange vous avez chargé l'ensemble de Jquery et n'utilisez pas la puissance de votre navigateur. C'est là qu'il vous faut le polyfill \"fetch\" disponible ici [https://github.com/github/fetch](https://github.com/github/fetch){:rel=\"nofollow noreferrer\"}. Il vous suffit de l'importer et alors la fonction \"fetch\" sera disponible pour l'ensemble des navigateurs, même IOS 10.\nEt maintenant, je vous entend encore:\n\n> «-Je trouve pas mon polyfill, alors comment je le développe ?»\n\n### Comment implémenter un polyfill ?\n\nNous allons faire simple, aujourd'hui nous voulons utiliser la fonction \"Object.assign()\" permettant de créer un nouvel object js.\n\nSi vous allez sur [Can I Use](http://caniuse.com/) vous trouvez la page [suivante](http://kangax.github.io/compat-table/es6/#test-Object_static_methods_Object.assign){:rel=\"nofollow noreferrer\"} :\n\n![](/imgs/posts/2016-12-13-tutoriel-polyfill/capture-decran-2016-12-11-a-17.38.08.png)\n\nDonc comme vous pouvez le voir, la fonction n'est pas implémentée sur IE11. Nous allons donc faire le polyfill nous même.\n\nIl suffit d'abord de vérifier l'existence de la fonction :\n\n```javascript\nif (typeof Object.assign != 'function') {\n  // La fonction n'existe pas\n}\n```\n\nSi elle n'existe pas alors on la surcharge avec notre polyfill, et en js il suffit de définir la fonction :\n\n```javascript\nif (typeof Object.assign != 'function') {\n  Object.assign = function (target, varArgs) {\n    'use strict';\n    // on developpe\n  };\n}\n```\n\nEt maintenant on fait le développement :\n\n```javascript\nif (typeof Object.assign != 'function') {\n  Object.assign = function (target, varArgs) {\n    'use strict';\n    if (target == null) { // TypeError if undefined or null\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var to = Object(target);\n\n    for (var index = 1; index &lt; arguments.length; index++) {\n      var nextSource = arguments[index];\n\n      if (nextSource != null) { // Skip over if undefined or null\n        for (var nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  };\n}\n```\n\nEt voilà ! Vous avez un polyfill !\nNormalement il y a un polyfill pour tout alors avant de l'implémenter, go to [Google](https://www.google.fr/){:rel=\"nofollow noreferrer\"}.\n"}