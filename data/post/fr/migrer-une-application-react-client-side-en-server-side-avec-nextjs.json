{"date":"2017-09-03T00:00:00.000Z","title":"Migrer une application React client-side en server-side avec Next.JS","excerpt":"La plupart des applications front utilisant React sur lesquelles j'ai pu travailler sont des applications destinées à être rendues par le navigateur (client-side).","readingTime":"8mn","authors":["vcomposieux"],"categories":["javascript"],"content":"\nLa plupart des applications front utilisant React sur lesquelles j'ai pu travailler sont des applications destinées à être rendues par le navigateur (client-side).\n\nCependant, en fonction des outils que vous utilisez, il se peut que celles-ci ne soient pas visibles par les moteurs de recherche et empêchent donc une bonne indexation de vos contenus (SEO).\n\nAfin de palier à ce problème, des frameworks ont vu le jour afin de permettre de rendre des applications React côté serveur (server-side). C'est le cas de [Next.JS](https://github.com/zeit/next.js){:rel=\"nofollow noreferrer\"}{:target=\"blank\"} que nous allons étudier dans cet article.\n\nJe disposais en effet d'une application React rendue côté client et l'ai migrée vers un rendu côté serveur en quelques heures seulement grâce au framework.\nL'objectif de cet article est de partager avec vous mon expérience technique sur cette migration.\n\nPremiers pas\n------------\n\nAvant tout, il nous faut regarder ce que propose Next.JS afin de voir si ce framework correspond à nos besoins :\n\n* Une [installation simple](https://github.com/zeit/next.js#setup){:rel=\"nofollow noreferrer\"},\n* Rendu de [fichiers statiques](https://github.com/zeit/next.js#static-file-serving-eg-images){:rel=\"nofollow noreferrer\"} tel que des images et fichiers CSS dans un répertoire `static`,\n* Des URLs (routing) pré-définies à partir des noms des fichiers JS présents dans le répertoire `pages`,\n* Possibilité de définir des [routes personnalisées/paramétrisées](https://github.com/zeit/next.js/#custom-server-and-routing){:rel=\"nofollow noreferrer\"} (mais j'ai utilisé [next-routes](https://github.com/fridays/next-routes){:rel=\"nofollow noreferrer\"} pour cela, plus simple d'utilisation){:rel=\"nofollow noreferrer\"},\n* Exécuter des [actions côté serveur seulement](https://github.com/zeit/next.js#fetching-data-and-component-lifecycle){:rel=\"nofollow noreferrer\"},\n* Une intégration simple avec Redux grâce à [next-redux-wrapper](https://github.com/kirill-konshin/next-redux-wrapper){:rel=\"nofollow noreferrer\"}.\n\nÀ priori, vous devriez donc avoir tout ce dont vous avez besoin pour migrer votre projet. Commençons !\n\nAjout des dépendances\n---------------------\n\nLa première chose à faire est d'ajouter nos dépendances dans le fichier `package.json` :\n\n```diff\n {\n   \"version\": \"0.0.1\",\n   \"private\": true,\n   \"dependencies\": {\n+    \"next\": \"^3.0.3\",\n+    \"next-redux-wrapper\": \"^1.3.2\",\n+    \"next-routes\": \"^1.0.40\",\n     \"prop-types\": \"^15.5.10\",\n     \"react\": \"^15.5.4\",\n     \"react-dom\": \"^15.5.4\",\n     \"react-scripts\": \"1.0.1\"\n   },\n   \"scripts\": {\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n-    \"test\": \"react-scripts test --env=jsdom\",\n+    \"dev\": \"next dev src\",\n+    \"start\": \"node server.js\",\n+    \"build\": \"next build src\",\n+    \"test\": \"react-scripts test --env=jsdom\"\n   }\n }\n```\n\nNous ajoutons donc ici nos trois dépendances : `next`, `next-redux-wrapper` et `next-routes`. Pas besoin de s'étendre plus sur le sujet, le nom des librairies me semble assez clair pour deviner leur utilité.\n\nIl nous faut également modifier les scripts. En effet, nous allons avoir désormais besoin d'un serveur HTTP `node` et allons utiliser la librairie `next` pour construire et développer notre application avec un compilateur à la volée.\n\nNotez que pour le moment, j'ai gardé `react-scripts` pour exécuter mes tests mais notez que celui-ci pourrait bien entendu être supprimé.\n\nNouvelle structure de fichiers\n------------------------------\n\nNous allons respecter les conventions proposées par Next.JS, ainsi nous allons placer nos différentes pages dans un répertoire nommé `page`, nos fichiers statiques dans un répertoire `static`.\n\nSeule différence, nous allons les placer dans `src`. C'est pourquoi nous avons précisé ce répertoire dans les commandes précédentes.\n\nVoici donc notre structure de projet :\n\n```\n.\n├── src\n│   ├── actions\n│   │   ├── ...\n│   ├── components\n│   │   ├── ...\n│   ├── constants\n│   │   └── ...\n│   ├── containers\n│   │   ├── ...\n│   ├── pages\n│   │   ├── _error.js\n│   │   ├── index.js\n│   │   └── category.js\n│   ├── reducers\n│   │   ├── ...\n│   ├── static\n│   │   ├── css\n│   │   │   ├── ...\n│   │   ├── fonts\n│   │   │   └── ...\n│   │   ├── img\n│   │   │   ├── ...\n│   │   ├── favicon.ico\n│   │   └── index.html\n│   ├── store\n│   │   └── configureStore.js\n│   ├── translations\n│   │   ├── ...\n│   ├── index.js\n│   └── routes.js\n├── tests\n│   └── ...\n├── Makefile\n├── README.md\n├── package-lock.json\n├── package.json\n├── server.js\n```\n\nNous avons gardé la même structure de fichier que nous avions avec notre projet client-side et avons simplement ajouté le répertoire `pages` ainsi que `static` (qui était précédemment nommé `assets` chez nous).\n\nVous pouvez d'ores et déjà faire tourner le serveur sur votre machine de développement en exécutant :\n\n```\n$ npm run dev (ou yarn dev)\n```\n\nCôté production, c'est le serveur node `server.js` qui sera exécuté. Voici son code :\n\n```js\nconst next = require('next')\nconst routes = require('./src/routes')\nconst app = next({dir: 'src', dev: false})\nconst handler = routes.getRequestHandler(app)\n\nconst {createServer} = require('http')\n\napp.prepare().then(() => {\n  createServer(handler).listen(8081)\n})\n```\n\nNous instancions ici Next.JS et récupérons les routes que nous allons créer par la suite.\nNous précisons également le répertoire `src`. Spécifiez bien que vous n'êtes pas en environnement de développement afin d'optimiser le build.\n\nÉcriture de la première page\n----------------------------\n\nIl est maintenant temps d'écrire notre première page rendue en server-side !\n\nNous allons commencer avec une homepage très simple. Placez donc un fichier à l'emplacement `src/pages/index.js` :\n\n```js\nimport React from 'react'\nimport withRedux from 'next-redux-wrapper'\n\nimport { store } from '../store/configureStore'\nimport { Footer, Homepage } from '../components';\nimport { AppContainer, HeaderContainer } from '../containers';\n\nconst Page = () => (\n    <AppContainer className='App Homepage'>\n        <div>\n            <HeaderContainer />\n            <Homepage />\n            <Footer />\n        </div>\n    </AppContainer>\n)\n\nexport default withRedux(store)(Page)\n```\n\nTrès simple, nous instancions un objet `Page` React comprenant les composants qui vont former notre page, et appelons une fonction retournée par `withRedux(store)` (fournie par la librairie `next-redux-wrapper`) permettant de synchroniser notre store Redux sur cette page.\n\nAinsi, toute notre page (et les composants compris à l'intérieur) auront accès et pourront manipuler le store Redux.\n\nSi vous vous rendez sur `http://localhost:3000/`, votre homepage doit maintenant être visible !\n\nRoutes personnalisées / comprenant des variables\n-------------------------------------------------\n\nMalheureusement, il est un peu complexe actuellement de déclarer des routes personnalisées et/ou contenant des variables directement via Next.JS, c'est pourquoi j'ai fait le choix d'utiliser la librairie `next-routes` qui va me permettre de faire cela très simplement.\n\nNous allons pour cet exemple partir sur une URL de type `/category/:slug`.\n\nIl nous faut alors déclarer un fichier à l'emplacement `src/routes.js` avec le contenu suivant :\n\n```js\nconst routes = module.exports = require('next-routes')()\n\nroutes\n  .add('category', '/category/:slug')\n```\n\nLorsque l'URL `/category/:slug` sera appelée (où slug est une valeur dynamique), le fichier `src/pages/category.js` sera appelé.\n\nCréons donc ce fichier :\n\n```js\nimport React from 'react'\nimport withRedux from 'next-redux-wrapper'\n\nimport { store } from '../store/configureStore'\nimport { Category, Footer } from '../components';\nimport { AppContainer, HeaderContainer, } from '../containers';\n\nconst Page = ({ slug }) => (\n    <AppContainer className='App Homepage'>\n        <div>\n            <HeaderContainer displaySearch={true} />\n            <Category slug={slug} />\n            <Footer />\n        </div>\n    </AppContainer>\n)\n\nPage.getInitialProps = async ({ query }) => {\n    return { slug: query.slug }\n}\n\nexport default withRedux(store)(Page)\n```\n\nComme vous pouvez le voir ici, nous avons ajouté le code suivant au composant, nous permettant de récupérer le paramètre `slug` depuis la requête, et de l'envoyer à notre composant de page (puis ensuite à notre composant `Category`) :\n\n```js\nPage.getInitialProps = async ({ query }) => {\n    return { slug: query.slug }\n}\n```\n\nVraiment simple, non ? Vous savez dorénavant faire du routing dynamique !\n\nRequêtes server-side\n--------------------\n\nLa méthode `getInitialProps()` présentée précédemment vous permettra également de faire des requêtes côté serveur, ce qui signifie que le client final n'en aura pas connaissance.\n\nAinsi, vous allez pouvoir récupérer les données d'une API et les insérer dans votre store.\n\nManipulation des templates\n--------------------------\n\nDans les templates de vos composants React, vous pouvez déclarer des liens vers vos routes de cette façon, en important le composant `Link` disponible via votre fichier `routes.js` puis :\n\n\n```js\nimport { Link } from '../routes';\n\n<Link route='category' params={{slug: 'hello-world'}}>\n    Go to hello-world category\n</Link>\n```\n\n\nNotez que vous pouvez également utiliser la notation suivante :\n\n```js\n<Link route='category/hello-world'>\n```\n\n> **Note :**\n> Vous pouvez également ajouter un attribut `prefetch` si vous souhaitez pré-charger vos pages.\n\nNext.JS fournit également un composant `Head` qui vous permettra, comme son nom l'indique, de manipuler le `<head>` HTML de votre page.\n\nPour définir le `<title>` de votre page, il vous faut écrire :\n\n```js\nimport Head from 'next/head';\n\nconst Page = () => (\n    <Head>\n        <title>My homepage title</title>\n    </Head>\n    ...\n)\n```\n\nEncore un élément qui vous permettra d'améliorer votre référencement et de personnaliser davantage vos pages.\n\nConclusion\n----------\n\nMigrer d'une application client-side React (initialisée avec `create-react-app`) ne m'a pris que quelques heures car le framework `Next.JS` est réellement simple d'utilisation et la communauté déjà assez conséquente.\n\nDe fait, Next.JS s'intègre très bien avec la plupart des outils de l'écosystème React.\n\nJ'espère que cet article aura pu vous aider à migrer votre application client-side du côté server-side.\n"}