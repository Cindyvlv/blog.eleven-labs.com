{"date":"2017-10-24T00:00:00.000Z","title":"OpenPGP - Exporter les clefs secrètes sur une Yubikey","excerpt":"Après avoir généré les clefs OpenPGP, nous allons voir comment les stocker sur une clef USB comme la Yubikey. Cela va nous permettre de sécuriser d'avantage nos clefs secrètes.","readingTime":"15mn","authors":["tthuon"],"categories":[],"content":"\nNous avons vu dans l'article précedent [la génération de clefs OpenPGP](/fr/openpgp-paire-clef-presque-parfaite-partie-1/).\nPour rappel, nous avons dans notre trousseau de clefs privées gpg :\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb   rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb   rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb   rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nNous avons également exporté les clefs dans des fichiers :\n* 1A8132B1.priv.asc : contient toutes les clefs privées\n* 1A8132B1.pub.asc : contient toutes les clefs publiques\n* 1A8132B1.sub_priv.asc : contient uniquement les clefs privées des sous-clefs\n\nAvec cette configuration, nous avons une stratégie efficace contre le vol ou la perte de la clef privée qui sert à la certification.\nSi un attaquant venait à s'emparer de l'ordinateur, il ne pourra pas certifier d'autre clef. Cependant, les clefs privées qui permettent\nde signer, chiffrer et s'authentifier sont encore présentes sur l'ordinateur. Donc, en cas de vol des clefs, il serait possible de signer des messages pendant un certains temps (le temps que la sous-clef dérobée soit révoquée).\n\nPour contrer cette attaque, il est possible de placer les clefs privées dans une carte à puce (smart card). Ces dispositifs sont\ntrès résistants à des techniques d'extraction de clef. En plus des attaques physiques, il y a un code pin avec 3 essais uniquement. Ensuite, elle se bloque.\n\nNous allons voir dans cet article l'export des clefs privées des sous-clefs dans une carte à puce. Pour cet exemple, je vais utiliser\nune Yubikey 4.\n\n### Yubikey, qu'est ce que c'est ?\n\nYubikey est un dispositif de la taille d'une clef usb classique. Cette clef permet d'effectuer la double authentification sur des sites\n web, tel que Google ou Github. Ainsi, si une personne est en possession de l'email et du mot de passe de la victime, l'attaquant ne pourra pas se connecter sans cette clef usb. C'est le principe de la double authentification, il faut être en possession de deux secrets.\n\nLa Yubikey implémente un protocole ouvert : *universal 2nd factor*.\n\nEn plus de ce principal protocole, elle en supporte d'autres : OpenPGP, TOTP, HOTP, défi-réponse.\n\nCelui qui va nous intéresser est OpenPGP.\n\n### Comment s'en procurer une\n\nJe vous recommande de passer par [la boutique officielle](https://www.yubico.com/product/yubikey-4-series/){:rel=\"nofollow noreferrer\"}\npour s'assurer de la provenance du produit. Nous sommes sur des produits liés à la sécurité, il est important de savoir d'où provient le produit acheté.\n\nPour ceux qui ont un compte Github, il y a une [offre promotionelle qui permet d'avoir -10%](https://www.yubico.com/github-special-offer/) sur le panier. Intéressant :){:rel=\"nofollow noreferrer\"}.\nPar contre, elle n'est valable qu'une seule fois. Je vous recommande d'en commander au moins 2. La deuxième sera utile pour faire une sauvegarde en cas de perte de la première.\n\nDernier point important, notre clef OpenPGP a été générée avec une taille de 4096 bits. Seule la version 4 de la Yubikey permet\nd'enregistrer des clefs de cette taille. La version 3 et la NEO, et ne supporte que des clefs de 3072 bits au maximum.\n\n### Installons les outils nécessaires\n\nPour rappel, nous avons commencé notre génération de clef OpenPGP avec une machine sous Ubuntu 16.04 et GnuPG 2.1.11. Pour pouvoir\nfaire l'export des clefs vers la Yubikey, nous devons installer des outils supplémentaires.\n\n```bash\nwilson@spaceship:~$ sudo apt-get install -y gnupg-agent pinentry-curses scdaemon pcscd yubikey-personalization libusb-1.0-0-dev\n```\n\n### Personnaliser la Yubikey avec gpg\n\nAvant d'utiliser la Yubikey, vérifer que la bande de garantie ne soit pas altérée. Si c'est le cas, ne pas l'utiliser.\n\nInsérer la Yubikey dans un port USB et taper la commande suivante pour vérifier que la carte est bien reconnue.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-status\nReader ...........: 1050:0407:X:0\nApplication ID ...: D2760001240102010006064764950000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 06476495\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n```\n\nLa carte est vierge, il n'y aucune information personnelle. Il est recommandé de compléter les informations au cas où une\npersonne retrouve cette clef.\n\nÉditons la carte et passons en mode admin. Vous pouvez entrer `help` pour avoir la liste des commandes disponibles.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-edit\ngpg/card> admin\nAdmin commands are allowed\n```\n\nNous allons tout d'abord changer le code PIN d'administration de la clef et le code PIN utilisateur. Par défaut, le code PIN de l'administrateur est 12345678 et 123456 pour le code PIN utilisateur.\n\nLe PIN administrateur est requis pour quelques opérations sur la carte (l'export de clef par exemple), et pour débloquer quand un code PIN a été entré 3 fois par erreur.\n\nEntrer `passwd` pour les changer. Commençons par le PIN administrateur et ensuite le PIN utilisateur.\n\n```\ngpg/card> passwd\ngpg: OpenPGP card no. D2760001240102010006064764950000 detected\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 3\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 1\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? q\ngpg/card>\n```\n\nEnsuite, entrer les informations pour personnaliser votre clef :\n\n```bash\ngpg/card> name\nCardholder's surname: Wilson\nCardholder's given name: Eleven\nEditer la clef\ngpg/card> lang\nLanguage preferences: fr\n\ngpg/card> login\nLogin data (account name): wilson.eleven@labs.com\n\ngpg/card> sex\nSex ((M)ale, (F)emale or space): m\n\ngpg/card> quit\n```\n\nLa clef est a présent configurée. Nous pouvons exporter les clefs privées des sous-clefs dans la carte à puce.\n\n### Exporter les clefs vers la Yubikey\n\nL'objectif est de déplacer les clefs secrètes des sous-clefs dans la Yubikey. Pour cela, nous allons\nséléctionner chaque sous-clef une par une avec la commande `key n` et la déplacer dans la carte avec `keytocard`.\nÀ la fin, il n'y aura plus aucun secret dans le trousseau de clef gpg.\n\nÉditons la clef.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --edit-key 1A8132B1\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nExportons la clef de chiffrement `B73A9C79`.\n\n```bash\ngpg> key 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb* rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n```\n\nLe petit astérisque devant l'empreinte de la clef indique qu'elle est sélectionnée.\n\nEntrer `keytocard` pour l'exporter vers la Yubikey. Ensuite, taper `2` qui est l'unique choix. La Yubikey peut stocker les 3 types\nde sous-clefs.\n\n```bash\ngpg> keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb* rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n```\n\ngpg va vous demander le mot de passe de la clef secrète de chiffrement et ensuite le code pin d'administration de la clef Yubikey.\nUne fois le code pin d'administration de la Yubikey entré, la clef secrète de chiffrement est bien dans la Yubikey. Nous pourrons le vérifier juste après avoir déplacé les deux autres clef.\n\nSéléctionnons la clef de signature. Il faut désélectionner la première clef et séléctionner la seconde.\n\n```bash\ngpg> key 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> key 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb* rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nLa seconde clef est bien séléctionnée car il y a la petite astérisque devant la clef `9CC8B2FB`.\n\nRépétons l'opération. Il faudra sélectionner `1` car c'est une clef de signature.\n\n```bash\ngpg> keytocard\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb* rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nC'est ok pour la seconde clef. Répéter avec la troisième.\n\n```bash\ngpg> key 2\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> key 3\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb* rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n\npub  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n     card-no: 0006 06476495\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb* rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nNous avons terminé. Taper `save` et `quit`.\n\nVérifions que nous n'avons plus aucune clef secrète dans notre trousseau de clefs gpg.\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n/home/wilson/.gnupg/pubring.gpg\n--------------------------------\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb>  rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb>  rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb>  rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nLe chevron `>` devant `ssb` indique que la clef secrète n'existe pas pour cette clef. C'est un bouchon.\n\nVérifions que ces clefs secrètes sont bien dans la Yubikey.\n\n```bash\nwilson@spaceship:~$ gpg2 --card-status\n\nReader ...........: 1050:0407:X:0\nApplication ID ...: D2760001240102010006064764950000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 06476495\nName of cardholder: Eleven Wilson\nLanguage prefs ...: fr\nSex ..............: male\nURL of public key : [not set]\nLogin data .......: wilson.eleven@labs.com\nSignature PIN ....: not forced\nKey attributes ...: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: 49B7 73DB 292F 8A66 C254  AC97 69FE 9865 9CC8 B2FB\n      created ....: 2017-10-05 11:39:18\nEncryption key....: 88CD 3F3C BA60 1AFD D0A6  22E9 FE2B A21E B73A 9C79\n      created ....: 2017-10-05 11:36:19\nAuthentication key: 0E2F 255E DE28 F044 474D  E571 F000 F81C 8047 B454\n      created ....: 2017-10-05 11:43:21\nGeneral key info..: sub  rsa4096/9CC8B2FB 2017-10-05 Wilson Eleven <wilson.eleven@labs.com>\nsec#  rsa4096/1A8132B1  created: 2017-10-05  expires: 2018-10-05\nssb>  rsa4096/B73A9C79  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\nssb>  rsa4096/9CC8B2FB  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\nssb>  rsa4096/8047B454  created: 2017-10-05  expires: 2018-10-05\n                        card-no: 0006 06476495\n```\n\nNous retrouvons bien les informations personnelles dans la première partie. Ensuite, il y a les informations\nsur les clefs présentes dans la Yubikey.\n\nNous voyons qu'il y a le chevron `>` devant `ssb`. Comme vu plus haut, cela indique l'absence de la clef secrète dans le\ntrousseau de clefs. Mais juste en dessous, il y a une ligne supplémentaire qui permet de dire à gpg où trouver la clef secrète.\nIci, nous avons le numéro de série de la Yubikey `card-no: 0006 06476495`. Ce numéro de série est également imprimé sur la clef physiquement. Si vous avez plusieurs Yubikey, il sera facile de retrouver celle que vous cherchez.\n\n### Conclusion\n\nÀ travers ces deux premiers articles, nous avons couvert la création d'une clef OpenPGP et l'exportation des secrets sur une carte à puce. L'utilisation d'une carte à puce permet une protection supplémentaire contre le vol des clefs secrètes. Il ne suffira pas de pirater l'ordinateur pour les voler, mais il sera nécessaire de voler physiquement la clef et le code PIN associé pour utiliser les clefs secrètes. De plus, comme vu en introduction, la clef secrète ne peut être extraite. Notre clef est bien protégée, sauf contre le facteur humain qui reste la seule menace.\n\nPar ailleurs, vous pouvez diffuser votre clef publique sur [un serveur de clefs](https://pgp.mit.edu/) et d'autre services (GitHub, Kraken, keybase.io). Cela vous permet de recevoir des messages chiffrés, et de [signer vos commits](https://help.github.com/articles/signing-commits-using-gpg/) sur GitHub (exemple sur ce commit [31dd621](https://github.com/eleven-labs/blog.eleven-labs.com/commit/31dd621db58a7ee1428bc9615c23e74d5ac98c3f)){:rel=\"nofollow noreferrer\"}.\n\nDans un prochain article, nous allons mettre en place une stratégie de sauvegarde en cas de perte des clefs secrètes. Une erreur peut vite arriver, comme formater son ordinateur suite à un ransonware (ce qui est d'actualité en ce moment).\n\n## Article en relation\n* [OpenPGP - Une paire de clés presque parfaite (partie 1)](/fr/openpgp-paire-clef-presque-parfaite-partie-1/)\n* [OpenPGP - Exporter les clefs secrètes sur une Yubikey (partie 2)](/fr/openpgp-clef-secrete-yubikey-partie-2/)\n* [OpenPGP - Stockage sur le long terme de clefs (partie 3)](/fr/openpgp-stockage-froid-clefs-partie-3/)\n* [OpenPGP - J'ai participé à une fête de la signature des clefs (partie 4)](/fr/openpgp-clef-participe-a-une-fete-de-la-signature-des-clefs/)\n\n### Resources\n- [wikipedia - Universal 2nd Factor](https://en.wikipedia.org/wiki/Universal_2nd_Factor){:rel=\"nofollow noreferrer\"}\n- [fidoalliance -Universal 2nd Factor (U2F) Overview](https://fidoalliance.org/specs/fido-u2f-overview-ps-20150514.pdf){:rel=\"nofollow noreferrer\"}\n- [YubiKey 4 series](https://www.yubico.com/products/yubikey-hardware/yubikey4/){:rel=\"nofollow noreferrer\"}\n- [Yubico Expands FIPS Security Certification ](https://www.yubico.com/2016/05/yubikey-gains-support-for-higher-levels-of-federal-crypto-standards/){:rel=\"nofollow noreferrer\"}\n- [wikipedia - FIPS 140-2](https://en.wikipedia.org/wiki/FIPS_140-2#Level_1){:rel=\"nofollow noreferrer\"}\n- [Cryptographic Module Validation Program](https://csrc.nist.gov/projects/cryptographic-module-validation-program/Certificate/2267){:rel=\"nofollow noreferrer\"}\n- [Guide to using YubiKey as a SmartCard for GPG and SSH](https://github.com/drduh/YubiKey-Guide){:rel=\"nofollow noreferrer\"}\n- [RFC4880](https://tools.ietf.org/html/rfc4880){:rel=\"nofollow noreferrer\"}\n- [Nitrokey Storage Got Great Results in a 3rd Party Security Audit](https://www.nitrokey.com/news/2015/nitrokey-storage-got-great-results-3rd-party-security-audit){:rel=\"nofollow noreferrer\"}\n- [Secure Hardware vs. Open Source ](https://www.yubico.com/2016/05/secure-hardware-vs-open-source/){:rel=\"nofollow noreferrer\"}\n- [Yubico has replaced all open-source components](https://www.reddit.com/r/linux/comments/4ls94a/yubico_has_replaced_all_opensource_components/){:rel=\"nofollow noreferrer\"}\n- [Cover image source](https://www.yubico.com/press/images/){:rel=\"nofollow noreferrer\"}\n\n### Remarques\nCe tutoriel utilise une Yubikey pour le stockage des secrets. La Yubikey est la clef la plus répandue dans le grand public, notamment\npour la fonctionnalité de second facteur d'authentification. Il existe d'autre clefs supportant OpenPGP comme la [NitroKey](https://www.nitrokey.com/){:rel=\"nofollow noreferrer\"}. Contrairement à la Yubikey, la NitroKey est open-source. Une sécurité avec du matériel fermé et propriétaire n'est pas une solution viable sur le long terme. C'est également contraire à l'esprit OpenPGP qui se veut être ouvert. Cepedant, j'ai fait le choix de la Yubikey pour sa facilité de mise en oeuvre et sa capacité à faire de la double authentification.\n"}