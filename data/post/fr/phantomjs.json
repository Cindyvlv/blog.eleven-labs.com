{"date":"2014-07-16T00:00:00.000Z","title":"PhantomJS","excerpt":"Petite présentation d'un navigateur webkit appelé PhantomJS","readingTime":"6mn","authors":["cmoncade"],"categories":["javascript"],"content":"PhantomJS est un navigateur webkit en ligne de commande. Il vous permet entre autres :\n\n*   de faire des captures écran au format PDF, PNG ou JPEG\n*   de récupérer des pages web via leurs urls et de les manipuler\n*   d’exécuter des tests JavaScript\n*   d'envoyer des requêtes sur un serveur distant\n*   de faire du monitoring de page web\n*   de manipuler le DOM\n*   etc\n\nJe vous laisse la curiosité de survoler la <a href=\"http://phantomjs.org/documentation/\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">documentation</a> qui est assez complète et plutôt bien faite. Au pire la communauté est plutôt active et répondra à la plupart de vos questions.\n\n# I Installation\n\nLes exemples que je vais détailler dans cet article seront faits sous ubuntu 14.04.\n\nPour installer PhantomJS, rien de compliqué, rendez-vous sur le <a href=\"http://phantomjs.org/download.html\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">site officiel</a>.\n\nDeux possibilités s'offrent à vous, la 1ère (et celle que j'ai choisie) est de télécharger un zip, vous le décompressez et c'est gagné.\n\nLa 2ème est de <a href=\"http://phantomjs.org/build.html\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">compiler Phantom</a> vous-même. Ce n'est pas plus compliqué que la 1ère méthode, c'est juste plus long.\n\n# II Capture\n\n#### Exemple 1\n\nPhantomjs supporte trois formats d'export: PNG, JPEG et PDF.\n\nCommencez par créer un fichier javascript que j’appellerai phantomjs.js et mettez-y le code suivant :\n```js\nvar page = require('webpage').create(),\nsystem = require('system'),\naddress, output, size;\n\naddress = system.args[1];\noutput = system.args[2];\n\nconsole.log(address, output)\n\npage.open(address, function(status) {\n    if (status !== 'success') {\n        console.log('Unable to load the address!');\n        phantom.exit();\n    } else {\n    page.render(output + '/phantomjs.png');\n    phantom.exit();\n    }\n});\n```\n\nCeci est un exemple très simpliste car PhantomJS possède tout un tas d'<a href=\"http://phantomjs.org/api/webpage/\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">options</a>.\n\nLa première ligne est essentielle comme vous pouvez l'imaginer car elle permet de récupérer le mode rendu de page web.\n\nLa deuxième vous permet de récupérer les arguments renseignés en ligne de commande via le module System. Ce dernier vous permet également d'afficher les variables d'environnement, les informations de l'OS, le PID de PhantomJS.\n\nOn récupère donc l'url de la page web ainsi que le dossier de destination lors de la création du pdf. Je les récupère à l'index 1 et 2 en suivant l'ordre dans lequel j'ai tapé ma commande (cf plus bas sur l'exemple de la commande).\n\nEnsuite, on ouvre la page web et si elle a bien répondu,on fait alors le rendu de la page et on sort du script.\n\nVous remarquez que j'ai précisé l'extension \".png\" du fichier afin d'avoir une image. Il vous suffit de mettre \".pdf\" ou \".jpeg\" pour changer le format en fonction de vos besoins.\n\nEnfin la commande à taper dans le shell :\n```\npath/to/phantomjs phantomjs.js 'url' 'yourfolder'\n```\n\nPour faire le rendu du site de PhantomJS par exemple, vous taperez:\n```\npath/to/phantomjs phantomjs.js 'http://phantomjs.org/' 'yourfolder'\n```\n\nSi des erreurs existent sur la page, il est possible que celles-ci s'affichent dans votre console.\n\n#### Exemple 2\n\nVoici un second exemple pour faire un rendu d'une partie de la page. Ici je crée une image de l'icône de PhantomJS présent sur leur site.\n```js\nvar page = require('webpage').create(),\nsystem = require('system'),\naddress, output, size;\n\naddress = system.args[1];\noutput = system.args[2];\n\npage.open(address, function(status) {\n    if (status !== 'success') {\n        console.log('Unable to load the address!');\n        phantom.exit();\n    } else {\n      page.includeJs(\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\", function() {\n            var icone = page.evaluate(function() {\n                return $('img[alt=\"PhantomJS\"]')[0].getBoundingClientRect();\n            });\n\n            page.clipRect = {\n                top:    icone.top,\n                left:   icone.left,\n                width:  icone.width,\n          height: icone.height\n            };\n            page.render(output + '/phantomjs.png');\n      phantom.exit();\n  });\n    }\n});\n```\n\nVous remarquerez l'utilisation de la méthode includeJs() . Cette dernière vous permet d'inclure des librairies javascript (tel que jQuery dans cet exemple) afin de pouvoir les utiliser sur la page que vous évaluez.\n\nCependant, si la librairie est déjà présente, il est inutile de l'inclure une deuxième fois.\n\nEnsuite, la propriété clipRect nous permet de préciser la zone à retourner et le tour est joué. Retapez la commande précédente et l'image devrait apparaître.\n\nVous voyez également via cet exemple qu'il vous est possible de manipuler le DOM (supprimer, modifier, rajouter des éléments) à votre guise avant de faire le rendu.\n\n# III Exécuter des tests\n\nPhantomJS peut également être utilisé pour exécuter des tests JavaScript. Parmi tous <a href=\"https://github.com/ariya/phantomjs/tree/master/examples\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">les exemples</a> fournis sur leur GitHub officiel, vous trouverez des scripts afin d’exécuter des tests QUnit et Jasmine.\n\nVoici un exemple avec QUnit:\n\ntest.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>QUnit Example</title>\n  <script src=\"jquery-2.1.1.js\"></script>\n  <link rel=\"stylesheet\" href=\"qunit-1.14.0.css\">\n</head>\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n  <script src=\"qunit-1.14.0.js\"></script>\n  <script src=\"test.js\"></script>\n</body>\n</html>\n```\n\ntest.js\n```js\nQUnit.test( \"hello test\", function( assert ) {\n  assert.ok( 1 == \"1\", \"Passed!\" );\n});\n```\n\nEt enfin, téléchargez le fichier <a href=\"https://github.com/ariya/phantomjs/blob/master/examples/run-qunit.js\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">run-qunit.js</a> et lancez la commande:\n```\npath/to/phantomjs run-qunit.js page.html\n```\n\nVous devriez voir les lignes suivantes:\n```\n'waitFor()' finished in 200ms.\nTests completed in 15 milliseconds.\n1 assertions of 1 passed, 0 failed.\n```\n\nVous trouverez d'autres scripts tels que run-qunit.js à <a href=\"https://github.com/jonkemp/qunit-phantomjs-runner\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">cette adresse</a>.\n\n# IV Conclusion\n\nPhantomJS est un outil très puissant et bien documenté. Donc, si vous avez besoin de générer des pdfs et/ou des images et que votre site contient beaucoup de javascript, PhantomJS peut devenir votre allié.\n\nMais ce n'est là qu'un aperçu de ses possibilités, je vous encourage à faire un tour sur leur <a href=\"http://phantomjs.org/examples/index.html\" rel=\"nofollow noreferrer\" style=\"color:#0000ff;\">site</a>, cela peut vous donner des idées.\n"}