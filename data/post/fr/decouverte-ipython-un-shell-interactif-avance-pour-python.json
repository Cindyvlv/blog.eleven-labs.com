{"date":"2022-06-13T00:00:00.000Z","title":"Découverte de IPython, un shell interactif avancé pour Python","excerpt":"IPython est un shell interactif pour Python, qui permet d'avoir des fonctionnalités plus avancées que le shell par défaut. Il est également au coeur des notebooks Jupyter qui sont des outils très utilisés dans l'analyse de données (BigData)","readingTime":"3mn","authors":["tthuon"],"categories":[],"content":"\n## IPython, qu'est-ce que c'est ?\n\nIPython est un environnement de développement riche pour Python avec des fonctionnalités telles\nqu'un interpréteur interactif avec de l'auto complétion, un noyau pour Jupyter et du calcul parallélisé.\n\nIPython permet de tester rapidement du code et de voir le résultat immédiatement.\n\nPour l'installer :\n\n```shell\npip install ipython\n```\n\nEnsuite, lancer la commande suivante pour lancer le shell interactif :\n\n```shell\nipython\n```\n\nLe shell IPython s'affiche, on peut entrer du code pour qu'il soit lu et évalué par l'interpréteur, puis pour que soit affiché le résultat.\nDans cet exemple, je vais saluer wilson :\n\n```shell\nPython 3.8.10 (default, Mar 15 2022, 12:22:08)\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: print(\"Salut wilson !\")\nSalut wilson !\n```\n\nLe résultat s'affiche dessous. Je peux entrer une fonction complète et l'exécuter. En tapant le début du nom de\nla fonction, je peux appuyer sur la touche `<tab>` du clavier pour lancer l'auto-complétion de la fonction.\n\n```shell\nIn [2]: def salut_wilson():\n   ...:     print(\"Salut Wilson !\")\n   ...:\n\nIn [3]: salut_wilson()\nSalut Wilson !\n\n```\n\nIPython a des commandes magiques embarquées, qui facilitent son usage\n[https://ipython.readthedocs.io/en/stable/interactive/magics.html](https://ipython.readthedocs.io/en/stable/interactive/magics.html).\n\n## Un shell applicatif\n\nLors du développement d'une application complexe, il y a de nombreux modules à charger avant de pouvoir faire ce que l'on souhaite.\nDans une application avec une base de données avec des modèles sqlalchemy, il faut charger les modèles avant de les utiliser.\n\nPour éviter de le faire à la main à chaque lancement de IPython, il est possible de charger tous les éléments nécessaires et ensuite de lancer le shell interactif.\n\nDans mon fichier `app.py`, je mets les imports et les fonctions dont j'ai besoin.\n\n```python\n# app.py\nimport requests # ce module doit être installé dans votre projet : pip install requests\n\n\ndef get_blog_eleven_labs() -> requests.Response:\n    return requests.get(\"https://blog.eleven-labs.com\")\n```\n\nEnsuite, je lance ipython avec le fichier `app.py`\n\n```shell\nipython -i app.py\n```\n\nAinsi, j'ai accès au module `requests` pour lancer des requêtes HTTP et à la fonction `get_blog_eleven_labs()`.\n\n```shell\n% ipython -i app.py\nPython 3.8.10 (default, Mar 15 2022, 12:22:08)\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: resp = get_blog_eleven_labs()\n\nIn [2]: print(resp.status_code)\n200\n\nIn [3]:\n```\n\n## Les notebooks Jupyter\n\nIl n'est pas facile de partager du code produit dans la console IPython. Pour cela, le code sera écrit dans\ndes notebooks Jupyter. C'est un format de fichiers texte qui stocke le contenu d'une cellule et son résultat.\nCela permet également de documenter avec du markdown. Ainsi, le code peut être partagé plus facilement avec d'autre personnes.\n\nL'interface Jupyter est quasiment identique à IPython. Il y a des cellules dans laquelle le code est lu, interprété et affiché.\nTout est enregistré dans un fichier `.ipynb`.\n\n<div style=\"text-align: center;\">\n    <img src=\"/imgs/posts/2022-06-13-decouverte-ipython/jupyter.png\" alt=\"Interface Jupyter\" style=\"display: block; margin: auto;\"/>\n</div>\n\nGithub met en forme les notebooks Jupyter pour en faciliter la lecture. Par exemple : [https://github.com/jdwittenauer/ipython-notebooks/blob/master/notebooks/ml/ML-Exercise1.ipynb](https://github.com/jdwittenauer/ipython-notebooks/blob/master/notebooks/ml/ML-Exercise1.ipynb)\n\n## Conclusion\n\nÀ travers cet article, nous avons fait la découverte d'un shell interactif alternatif : IPython. C'est un outil très utilisé\nen Python et ses fonctionnalités le rendent plus simple à utiliser par rapport au shell natif. Avec les notebooks Jupyter,\nle code est plus facilement partagé. Il permet également l'affichage de graphiques pour l'analyse de données. Cette dernière fonctionnalité est très utilisée par les métiers de la data (data analyst, data scientist).\n"}