{"date":"2019-05-09T00:00:00.000Z","title":"React i18next","excerpt":"Dans cet article nous allons aborder comment mettre en place i18next sur votre site React","readingTime":"6mn","authors":["marishka"],"categories":["javascript"],"content":"\n## React i18next\n\n**React i18next** est une librairie qui permet de mettre en place l'internationalisation sur votre site internet.\nCette librairie est basée sur [i18next](https://www.i18next.com/).\n\n## Initialisation\n\nLa première chose que nous allons faire est d'ajouter la librairie à notre projet :\n\n```bash\nnpm install react-i18next --save\n```\n\nEnsuite, nous avons besoin de configurer la façon dont nous allons l'utiliser.\nPour cela, je vais créer un fichier `helpers/i18n.js` :\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  .use(initReactI18next)\n  .init({\n    debug: true, // pratique pour voir les événements dans la console pendant le développement\n    lng: 'en',\n    fallbackLng: 'en',\n    resources: {\n      en: {\n        translations: { // namespace par défaut, on peut avoir autant de namespaces que l'on souhaite\n          'home.hello': 'Hello! Welcome to my app!'\n        },\n      },\n    },\n  });\n\nexport default i18n;\n```\n\nEt je vais l'importer dans `index.js` de mon application :\n\n```js\nimport React from  'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport i18n from './helpers/i18n'; // initialisation de i18next\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n```\n\n## Utilisation\n\n### Traduction simple\n\nVoici le fichier `App.js` avec un exemple simple :\n\n```js\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    {t('home.hello')}\n  );\n};\n\nexport default App;\n```\n\nIci, nous utilisons le *hook* `useTranslation` afin d'accéder au service de traduction, mais vous pouvez également utiliser HOC `withTranslation` :\n\n```js\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\n\nconst App = ({ t }) => {\n  return (\n    {t('home.hello')}\n  );\n};\n\nexport default withTranslation()(App);\n```\n\nSi vous souhaitez passer des variables, cela peut également être fait très facilement. Admettons que notre clé de traduction ressemble à ceci :\n\n```js\ntranslations: {\n  'home.hello': 'Hello, {{ name }}! Welcome to my app!'\n},\n```\n\nPour passer la variable `name` dans notre clé de traduction nous pouvons faire :\n```js\n{t('home.hello'), { name: 'Astronaute' }}\n```\n\n### HTML\n\nSi vous devez mettre du HTML dans la traduction, ou si votre clé de traduction en contient, vous pouvez utiliser le composant `Trans` :\n\n\n```js\nimport React from 'react';\nimport { Trans } from 'react-i18next';\n\nconst App = () => {\n  return (\n    <Trans values={{ name: 'Astronaute' }}><h1>home.hello</h1></Trans>\n  );\n};\n\nexport default App;\n\n```\n\n\n### Pluralisation\n\nBien sûr, nous avons également besoin de prévoir le cas où la traduction varie selon un nombre ou une quantité.\n\n```js\ntranslations: {\n  'message': 'You have one message',\n  'message_plural': 'You have several messages',\n},\n```\n\nDans ce cas, nous allons spécifier un argument supplémentaire, `count`,  comme ceci :\n\n```js\n{t('home.hello'), { count: 5 }}\n<Trans count={5}><h1>home.hello</h1></Trans>\n```\n\n### Détection de la langue de l'utilisateur\n\nÉtant donné que nous travaillons sur un site multi-langues, nous souhaitons que la langue préférée de l'utilisateur soit automatiquement détectée. De façon générale, il s'agît de la langue du navigateur. Pour ceci, nous allons ajouter une dépendance :\n\n```bash\nnpm install i18next-browser-languagedetector --save\n```\n\nEt nous allons modifier notre configuration comme ceci :\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector'; // <= new\n\ni18n\n  .use(LanguageDetector) // <= new\n  .use(initReactI18next)\n  // ...\n;\nexport default i18n;\n```\n### Changer de langue\n\nMaintenant que notre application est capable de détecter la langue du navigateur de l'utilisateur, ce dernier peut souhaiter la modifier. Pour ceci, ajoutons un bouton :\n\n```js\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nconst LanguageSwitcher = () => {\n  const { i18n } = useTranslation();\n\n  const changeLanguage = async (lng) => {\n    await i18n.changeLanguage(lng); // i18n.changeLanguage retourne une Promise\n  };\n\n  return (\n    <div>\n      <Button onClick={() => changeLanguage('en')}>English</Button>\n      <Button onClick={() => changeLanguage('fr')}>Français</Button>\n    </div>\n  );\n}\n\nexport default LanguageSwitcher;\n```\n\n### Fichiers de traduction\n\nÉvidemment, nous allons vouloir mettre les traductions dans des fichiers dédiés à cela, plutôt que de les garder dans la configuration directement. Les fichiers de traduction sont de simples fichiers JSON. Nous pouvons imaginer la structure suivante dans notre projet :\n\n```bash\npublic/\n  locales/\n    en/\n      common.json\n      translations.json\n      other.json\n    fr/\n      common.json\n      translations.json\n      other.json\n```\n\n#### Namespaces\n\ni18next fonctionne avec des *namespaces*, et on peut avoir plusieurs namespaces par langue. Pour rappel, le namespace par défaut est `translations`. Dans notre exemple, `common`, `translations` et `other` représentent des namespaces.\n\nDans ce cas, à chaque fois que nous voulons accéder aux clés qui se trouvent dans un namespace particulier, nous allons faire :\n\n```js\nconst { t } = useTranslation(['ns1',  'ns2',  'ns3']);\nt('key'); // chargé depuis le namespace 'ns1'\nt('ns2:key'); // chargé depuis le namespace 'ns2'\n```\n\nNous pouvons également définir un namespace par défaut spécifique dans la configuration :\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    defaultNS: 'common', // <= new\n    // ...\n  });\n;\n\nexport default i18n;\n```\n\n#### Chargement des fichiers locaux\n\nMaintenant que les traductions sont dans des fichiers JSON séparés, nous avons besoin d'indiquer dans la configuration i18next comment les récupérer. Pour cela, nous allons utiliser `i18next-xhr-backend` :\n\n```bash\nnpm install i18next-xhr-backend --save\n```\n\nNous modifions le fichier de configuration comme ceci :\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-xhr-backend'; // <= new\n\ni18n\n  .use(LanguageDetector)\n  .use(Backend) // <= new\n  .use(initReactI18next)\n  .init({\n    backend: { // <= new\n      loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n    // ...\n  });\n;\n\nexport default i18n;\n```\n\nNotez que le chemin indiqué dans `loadPath` est dans le dossier `public` à la racine de votre projet.\n\n#### Fichiers hébergés sur un serveur distant\n\nNous avons présenté [dans un article précédent](https://blog.eleven-labs.com/fr/gestion-des-traductions-avec-localise.biz/) que nous utilisons le service Localise.biz et enregistrons les fichiers de traduction sur un serveur dans le cloud. Ainsi, nous avons besoin de récupérer les fichiers hébergés sur un serveur distant :\n\n```js\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-xhr-backend';\n\ni18n\n  .use(LanguageDetector)\n  .use(Backend)\n  .use(initReactI18next)\n  .init({\n    debug: true,\n    lng: 'en',\n    fallbackLng: 'en',\n    defaultNS: 'common',\n    backend: {\n      loadPath: `${process.env.TRANSLATIONS_ENDPOINT_URI}/{{ns}}.{{lng}}.json`, // nous indiquons tout simplement une URL complète\n    }\n  });\n;\n\nexport default i18n;\n```\n\n### SSR\n\nReact i18next peut être configuré pour fonctionner avec les SSR.\nVoici la page qui explique comment mettre cela en place : [https://react.i18next.com/latest/ssr](https://react.i18next.com/latest/ssr)\n\nNéanmoins, nous avons eu un soucis en activant le SSR - le chargement des traductions depuis le serveur distant ne se faisait pas côté serveur. Ceci arrive parce que `i18next-xhr-backend` utilise `fetch` pour récupérer les fichiers, et `fetch` n'est pas disponible côté serveur.\n\nPar conséquence, nous avons eu besoin d'écrire un backend custom en nous basant sur la documentation ici : [https://www.i18next.com/misc/creating-own-plugins#backend](https://www.i18next.com/misc/creating-own-plugins#backend). Nous avons utilisé la librairie `cross-fetch` qui fonctionne aussi bien côté client que côté serveur.\n"}