{"date":"2018-05-16T00:00:00.000Z","title":"D√©boguer vos applications dockeris√©es avec PhpStorm","excerpt":"Aujourd'hui je vais vous expliquer comment lancer vos tests unitaires et les d√©boguer avec PhpStorm, le tout sans avoir besoin d'installer php, phpunit, ou Xdebug sur votre machine...","readingTime":"6mn","authors":["rmasclef"],"categories":["php"],"content":"\nAujourd'hui je vais vous expliquer comment lancer vos tests unitaires et les d√©boguer avec PhpStorm, le tout sans avoir besoin d'installer php, phpunit, ou Xdebug sur votre machine...\n\n## Pr√©-requis\n### Sur votre machine locale\n\n- [PhpStorm](https://www.jetbrains.com/phpstorm/)  >= 2016.3\n- [Docker CE](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n\n## PhpStorm plugins\nAdmettons qu'aucun plugin jetbrain ne soit actif sur votre Phpstorm. Voici la liste des plugins que vous allez devoir installer et que nous allons configurer :\n\n- [Docker](https://www.jetbrains.com/help/idea/docker.html)\n- PHPDocker\n- PHP remote interpreter\n\n**C'est tout**, vous n'avez pas besoin d'installer `php`, `phpunit`, `php-xdebug`... :D\n\n## Un exemple √† r√©utiliser\n\nAfin de rester simple, je me suis permis de cr√©er un petit projet qui regroupe les diff√©rentes configurations que je vais vous pr√©senter dans un instant.\n\nJe vous invite donc √† cloner le [projet](https://github.com/rmasclef/docker-remote-php-debuging) afin de pouvoir vous entra√Æner.\n\nUne fois le repo clon√©, vous pouvez lancer un `docker-compose up -d` suivi par un `docker-compose exec test_app composer install --prefer-dist`.\n\nVous aurez alors acc√®s √† un container nomm√© `test-app` faisant tourner un `php-fpm-7.2` avec l'extension `xdebug` ainsi que `phpunit`.\n\n## Configuration des plugins\n### Docker\n- Ouvrez la fen√™tre des param√®tres phpStorm (`ctrl`+`alt`+`s` ou **File/Settings/...**)\n- Allez dans l'onglet **Build, execution, deployment**\n- Cliquez sur **Docker**\n\n> Note : Vous pouvez √©galement effectuer un `ctrl`+`Shift`+`a` et taper **Docker** dans le champ de recherche comme ceci :\n>\n> ![Quick Docker settings access]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/quick-docker-settings-access.png)\n\nNous arrivons alors sur la page suivante, qui va nous permettre d'ajouter notre interpr√©teur `docker` :\n\n![Docker plugin settings page]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/docker-plugin-settings-page.png)\n\n- Cliquez sur ![Plus phpstorm button]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/plus-phpstorm-button.png) pour ajouter une nouvelle configuration Docker et indiquer √† phpStorm comment se connecter au d√©mon Docker.\n> Le message \"Connection successful\" doit appara√Ætre.\n\n![Docker configuration]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/docker-configuration.png)\n\n- Allons maintenant dans **Tools** pour fournir √† phpStorm les interpr√©teurs de `docker` et `docker-compose`\n\n![Docker interpreters configuration]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/docker-interpreters-configuration.png)\n\nVoil√† tout pour le plugin Docker. Si vous souhaitez en savoir plus sur son utilisation, je vous invite √† visiter [cette page](https://www.jetbrains.com/help/idea/docker.html).\n\n### Remote interpreter\nL'objectif ici est de configurer l'interpr√©teur `php` que nous allons utiliser pour lancer un script de notre projet.\n\nAvant d'attaquer la configuration, attardons-nous quelques instants sur les fichiers pr√©sents dans ce projet :\n\n**Dockerfile**\n```yml\nFROM php:7.2-fpm\n\nRUN apt-get update && apt-get install -y \\\n    zip\n\nRUN pecl install xdebug \\\n    && docker-php-ext-enable xdebug\n\n# Install composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN mkdir /var/composer\nENV COMPOSER_HOME /var/composer\nENV COMPOSER_ALLOW_SUPERUSER 1\n\n# Those lines are important for remote interpreter configuration\nRUN mkdir -p /var/www/TEST_APP\nWORKDIR /var/www/TEST_APP\n\n# Install PHP Xdebug configuration, (see https://blog.eleven-labs.com/fr/debugger-avec-xdebug/)\nADD xdebug.ini /etc/php/conf.d/\n\nCMD [\"php-fpm\"]\n```\n> Note : J'ai utilis√© l'image php de base, et non une alpine, pour des raisons de simplification du Dockerfile.\n\nComme vous pouvez le voir, j'ai simplement ajout√© `xdebug` , `zip` et `composer` (inutile d'installer `git` √©tant donn√© que nous utilisons l'option `--prefer-dist` de composer üôÇ).\n\n**docker-compose**\n```yml\nversion: '3'\nservices:\n  test_app:\n    build:\n      context: ./\n    dockerfile: Dockerfile\n    volumes:\n      - \"./:/var/www/TEST_APP:cached\"\n      - \"~/.composer:/var/composer:cached\"\n    environment:\n      # Keep attention to that env variable\n      PHP_IDE_CONFIG: serverName=test-app\n```\nIci, on notera la pr√©sence de la variable d'environnement `PHP_IDE_CONFIG`. Nous allons utiliser la valeur de `serverName` pour indiquer √† phpStorm le nom du serveur sur lequel il va √©couter les connexions.\n\nPour ce faire, rendez-vous dans **File/Settings.../Languages & Framework/PHP***\n![PHPStorm Settings PHP]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-settings-php.png)\n\n- Cliquez sur ![PHPStorm Browse button]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-browse-button.png) √† droite de **CLI Interpreter**\n- Dans **Remote** s√©lectionnez **Docker** (le serveur que nous avons cr√©√© pr√©c√©demment est automatiquement s√©lectionn√©)\n- Dans **Image name** s√©lectionnez **dockerremotephpdebugingexample_test_app:latest**\n\n![PHPStorm Settings CLI interpreter]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-settings-CLI-interpreter.png)\n\nPhpStorm va alors automatiquement r√©cup√©rer l'image si elle n'est pas d√©j√† pr√©sente, et va d√©tecter la version de `php` pr√©sente sur le container ainsi que ses extensions.\n\n![PHPStorm Settings PHP]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-settings-php.png)\n  - s√©lectionnez l'interpr√©teur que nous venons de cr√©er...\n\nPhpStorm va de nouveau d√©tecter (ou au moins essayer...) le mapping entre le chemin du projet en local, et celui sur le container. Je dis \"essayer\" car vous devrez peut-√™tre configurer manuellement ce mapping de la mani√®re suivante :\n- Dans la partie `Docker container` cliquez sur les ![PHPStorm browse buttons]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-browse-button.png)\n\nVous pouvez alors modifier le mapping entre le volume docker et le chemin en local (ici `/home/rmasclef/Documents/projects/ElevenLabs/DockerRemotePhpDebugingExample` doit √™tre bind√© avec `var/www/TEST_APP` √©tant donn√© que nous avons effectu√© ce binding dans le [Dockerfile](https://github.com/rmasclef/docker-remote-php-debuging/blob/master/docker-compose.yml#L8).\n\n![PHPStorm]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm.png)\n\n### PHPUnit\nIci, nous allons faire en sorte de pouvoir lancer nos tests unitaires sur le container en utilisant une simple combinaison de touches :)\n\n- Rendez-vous dans **Files\\Settings...\\Languages & framework\\PHP\\Test frameworks**.\n- Cliquez sur ![Plus phpstorm button]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/plus-phpstorm-button.png) puis **phpUnit by remote interpreter**.\n- S√©lectionnez l'interpr√©teur php que nous avons cr√©√© pr√©c√©demment.\n\n![PHPStorm PHPUnit by remote interpreter]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-PHPUnit-by-remote-interpreter.png)\n\n- Ajoutez `/var/www/TEST_APP/vendor/autoload.php` en tant que path vers le fichier d'autoload composer\n\n![PHPStorm PHPUnit interpreter]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-PHPUnit-interpreter.png)\n\nPhpStorm doit alors d√©tecter la version de phpunit install√©e sur le container.\n> Note : Vous pouvez √©galement ajouter un fichier de configuration phpunit (ici `/var/www/TEST_APP/phpunit.xml.dist`).\n\n**√Ä pr√©sent, vous pouvez lancer les tests unitaires sur votre container via phpStorm**\n\n### PHP Remote debugger\n![PHPStorm menu tests]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-menu-tests.png)\n\n- Cliquez sur ![Plus phpstorm button]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/plus-phpstorm-button.png) puis **PHP remote debug**\n- Donnez un nom √† cette configuration\n- Cliquez sur ![PHPStorm browse buttons]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-browse-button.png) afin d'ajouter un serveur de d√©bogage\n\n![PHPStorm Settings Server]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-settings-server.png)\n\n**/!\\ Ici, il faut mettre en nom de serveur le nom que nous avons mis dans la variable d'environnement `PHP_IDE_CONFIG`**\n\nNotez √©galement qu'il faut ajouter le mapping entre notre environnement local et le container.\n\nS√©lectionnez le serveur pr√©c√©demment cr√©√© et ajoutez l'IDE key qui est renseign√©e dans le fichier de configuration [xdebug.ini](https://github.com/rmasclef/docker-remote-php-debuging/blob/master/xdebug.ini#L5).\n\n![PHPStorm Remote debug configuration]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-remote-debug-configuration.png)\n\nF√©licitations ! Vous √™tes maintenant capable de d√©boguer votre application sans avoir php, phpunit, Xdebug ou tout autre librairie sur votre environnement local.\n\n## Lancement des tests unitaires\nNous pouvons √† pr√©sent lancer notre suite de tests unitaires sur notre container. Vous pouvez effectuer un clic droit sur le dossier `tests` puis cliquer sur `run tests` (ou `ctrl`+`Shift`+`F10`).\n\n> Vous pouvez √©galement lancer les tests d'une seule classe ou encore lancer un test d'une classe en particulier.\n![PHPStorm test class]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-test-class.png)\n> Tips: Dans une classe de tests unitaires, si vous placez votre curseur √† l'int√©rieur d'une fonction et que vous effectuez un `ctrl`+`Shift`+`F10`, alors seul ce test sera lanc√©.\n>\n> √Ä l'inverse, si vous placez votre curseur √† l'ext√©rieur des fonctions et que vous effectuez un `ctrl`+`Shift`+`F10`, alors tous les tests de la classe seront lanc√©s.\n\n## D√©boguer\n\nAjoutons un point d'arr√™t dans notre code :\n\n![PHPStorm IDE Break point]({{site.baseurl}}/assets/2018-04-26-deboguer-vos-applications-dockerisees-avec-phpstorm/PHPStorm-IDE-break-point.png)\n\nCette fonction est test√©e unitairement, nous allons donc pouvoir la d√©boguer...\n- Effectuez un clic droit sur le test unitaire que vous souhaitez d√©boguer puis cliquez sur **Debug 'testGetContent'**. Le d√©bogueur se lance alors et arrive au point d'arr√™t ajout√© dans notre classe concr√®te :D\n> De la m√™me mani√®re, vous pouvez √©galement d√©boguer des scripts tels que des commandes symfony.\n\n## Conclusion\nC'est termin√©, vous √™tes maintenant capable de configurer PHPStorm afin qu'il lance vos tests unitaires et/ou une session de d√©bogage √† travers un container Docker.\n\nN'h√©sitez pas √† commenter ce post pour toute question/remarque, demande d'ajout, ou √©ventuel point de bloquage rencontr√© lors de la configuration de votre environement, nous serons ravis de pouvoir √©changer avec vous !\n\n## Sources\n[configuring-remote-python-interpreters.html](https://www.jetbrains.com/help/phpstorm/configuring-remote-python-interpreters.html)\n[docker-remote-interpreters](https://blog.jetbrains.com/phpstorm/2016/11/docker-remote-interpreters/)\n"}