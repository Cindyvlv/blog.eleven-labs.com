{"date":"2016-12-22T00:00:00.000Z","title":"Comprendre le SSL/TLS: Partie 4 Handshake Protocol","excerpt":"Les protocoles SSL / TLS","readingTime":"7mn","authors":["ibenichou"],"categories":[],"content":"\nLes protocoles SSL / TLS peuvent être divisés en 2 couches.\n\nLa première couche est constituée par des protocoles de négociation (Handshake, Cipher, Alert) et la deuxième couche est le protocole Record.\n\nL’image ci-dessous illustre les différentes couches :\n\n<img src=\"/imgs/posts/2016-12-22-comprendre-le-ssltls-partie-4-handshake-protocol/untitled-diagram.png\" />\n\n# Handshake Protocol :\n\nTraduit “poignée de main” en Français, ce protocole permet au serveur et au client de :\n1. s'authentifier mutuellement ;\n2. négocier :\n    1. les algorithmes de chiffrement ;\n    2. les algorithmes de MAC (Message Authentification Code) ;\n    3. les clés symétriques qui vont servir au chiffrement  avant que l'application ne transmette son premier octet.\n\nVoici en détails comment se déroule le handshake, dans l'ordre chronologique :\n\n<img src=\"/imgs/posts/2016-12-22-comprendre-le-ssltls-partie-4-handshake-protocol/untitled-diagram-1.png\" />\n\n**1 - Client Hello**\n\nEnvoi de la version maximale supportée (SSL = 3.0), de la suite d'algorithmes supportés (par ordre de préférence décroissant) et une valeur aléatoire de 32 octets.\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv2 Record Layer: Client Hello\n       Length: 103\n       Handshake Message Type: Client Hello (1)\n       Version: SSL 3.0 (0x0300)\n       Cipher Spec Length: 78\n       Session ID Length: 0\n       Challenge Length: 16\n       Cipher Specs (26 specs)\n           Cipher Spec: SSL2_RC4_128_WITH_MD5 (0x010080)\n           [ more Cipher Specs deleted ]\n       Challenge\n```\n\n**2 - Server Hello**\n\nChoix de la version de la suite d'algorithmes (Cipher Suite) et d'une valeur aléatoire.\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Handshake Protocol: Server Hello\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 74\n       Handshake Protocol: Server Hello\n           Handshake Type: Server Hello (2)\n           Length: 70\n           Version: SSL 3.0 (0x0300)\n           Random\n               gmt_unix_time: Apr 24, 2006 11:04:15.000000000\n               random_bytes: FE81ED93650288A3F8EB63860E2CF68DD00F2C2AD64FCD2D…\n           Session ID Length: 32\n           Session ID (32 bytes)\n           Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)\n           Compression Method: null (0)\n```\n\n**3 - Certificate (optionnel)**\n\nEnvoi d'une chaîne de certificats par le serveur. Le premier certificat est celui du serveur, le dernier est celui de l'autorité de certification.\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Handshake Protocol: Certificate\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 836\n       Handshake Protocol: Certificate\n           Handshake Type: Certificate (11)\n           Length: 832\n           [ Certificate details deleted ]\n```\n\n**4- Certificate Request (optionnel)**\n\nDemande un certificat au client pour l'authentifier.\n\n**5 - Server Key Exchange (optionnel)**\n\nMessage complémentaire pour l'échange des clés. Ce message contient la clé publique du serveur utilisée par le client pour chiffrer les informations de clé de session.\n\n**6 - Server Hello Done**\n\n*Exemple* :\n\n```\nSecure Socket Layer\n       SSLv3 Record Layer: Handshake Protocol: Server Hello Done\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 4\n       Handshake Protocol: Server Hello Done\n           Handshake Type: Server Hello Done (14)\n           Length: 0\n```\n\n**7 - Certificate (optionnel)**\n\nCertificat éventuel du client si le serveur demande une authentification.\n\n**8 - Client Key Exchange**\n\nLe client produit un secret pré-maître (encrypted pre-master key) et le crypte avec la clé publique du certificat du serveur. Ces informations sont chiffrées une deuxième fois avec la clé publique du serveur (et non la clé publique du certificat du serveur) reçue dans le message **Server Key Exchange** (cf. étape 5).\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Handshake Protocol: Client Key Exchange\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 132\n       Handshake Protocol: Client Key Exchange\n           Handshake Type: Client Key Exchange (16)\n           Length: 128\n```\n\n**9 - Certificate Verify (optionnel)**\n\nMessage contenant une empreinte (hash) signée numériquement et créée à partir des informations de clé et de tous les messages précédents. Ce message permet de confirmer au serveur que le client possède bien la clé privée correspondante au certificat client\n*(cf. étape 7)*\n\n**10 - Change Cipher Spec**\n\nPassage du client en mode chiffré avec la clé master comme clé symétrique.\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n       Content Type: Change Cipher Spec (20)\n       Version: SSL 3.0 (0x0300)\n       Length: 1\n       Change Cipher Spec Message\n```\n\n**11 - Client Finished**\n\nFin des émissions du client, ce message est chiffré à l'aide des paramètres de la suite de chiffrement.\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Handshake Protocol: Finished\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 64\n       Handshake Protocol: Finished\n           Handshake Type: Finished (20)\n           Length: 36\n           MD5 Hash\n           SHA-1 Hash\n```\n\n**12 - Change Cipher Spec**\n\nPassage du serveur en mode chiffré avec la clé master.\n\n*Exemple* :\n\n```\nSecure Socket Layer\n   SSLv3 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n       Content Type: Change Cipher Spec (20)\n       Version: SSL 3.0 (0x0300)\n       Length: 1\n       Change Cipher Spec Message\n   SSLv3 Record Layer: Handshake Protocol: Finished\n       Content Type: Handshake (22)\n       Version: SSL 3.0 (0x0300)\n       Length: 64\n       Handshake Protocol: Finished\n           Handshake Type: Finished (20)\n           Length: 36\n           MD5 Hash\n           SHA-1 Hash\n```\n\n**13 - Server Finished**\n\nConfirmation au client du passage en mode chiffré. Ce message est chiffré à l'aide des paramètres de la suite de chiffrement.\n\n**14 - Encrypted Data**\n\nLe tunnel SSL / TLS est établi, c'est maintenant le **Record Protocol** qui prend le relais pour chiffrer les données.\n"}