{"date":"2017-08-18T00:00:00.000Z","title":"Comment vérifier l'orthographe de vos docs depuis Travis CI ?","excerpt":"Nous allons montrer dans cet article comment vérifier l'orthographe automatiquement dans vos documents markdown, modifiés dans vos pull requests, simplement avec Aspell et Travis CI","readingTime":"5mn","authors":["charles-eric"],"categories":[],"content":"\nNotre blog est basé sur Jekyll et hébergé sur Github Pages : [plus de détails ici](/fr/migration-du-blog/). Donc pour publier un article de blog, chaque auteur doit ouvrir une pull request sur Github pour soumettre ses fichiers markdown.\nEnsuite les autres astronautes peuvent relire ce qui a été rédigé avant de merger, i.e. publier l'article. Bien sûr le but de cette revue est de s'assurer que tout est bien expliqué et pas uniquement de corriger toutes les fautes d'orthographe, sinon cette relecture ne serait pas très drôle ! ;)\n\nC'est pourquoi nous avions besoin d'un moyen simple permettant de trouver automatiquement toutes les fautes dans les fichiers changés des pull requests, pour faciliter cette revue. Nous savons que les outils de vérification automatique d'orthographe ne sont jamais parfaits, et nous voulions donc seulement que cet outil nous envoie une notification avec les éventuelles erreurs, sans bloquer les autres astronautes qui voudraient merger la pull request.\n\nVoilà ce que nous avons donc fait :\n\nComment fonctionne Aspell ?\n===========================\n\nPremièrement il faut installer cet outil :\n\n```bash\napt-get install aspell aspell-en # et aspell-fr pour l'orthographe française par exemple\n```\n\nLa commande que nous allons utiliser est la suivante :\n\n```bash\ncat some_text.md | aspell --lang=en --encoding=utf-8 list\n```\n\n- `some_text.md` correspond à votre fichier markdown, dans lequel vous voulez vérifier l'orthographe\n- `--lang=en` ou `--lang=fr` par exemple, en fonction de votre langue\n- `--encoding=utf-8` si votre fichier contient des caractères spéciaux\n\nCette commande va retourner tous les mots qu'Aspell ne connaît pas, c'est à dire non listés dans ses dictionnaires : nos potentielles fautes d'orthographe.\n\n> À noter :\n> Il peut être intéressant d'exécuter cette commande plusieurs fois, en anglais et en français par exemple, surtout si vous rédigez des documents techniques en français qui contiendront forcément aussi beaucoup de termes anglais.\n\nVous allez aussi avoir besoin d'autoriser vos propres expressions, qui ne seraient pas reconnues par défaut. Pour cela, vous pouvez ajouter et utiliser vos dictionnaires personnels, nommé `.aspell.en.pws` pour un dictionnaire personnel anglais. Voici un exemple de ce que pourrait contenir ce fichier :\n\n```\npersonal_ws-1.1 fr 3\nphp\njavascript\nandroid\n```\n\nÀ noter que l'entête de ce fichier (première ligne) est importante : les deux derniers arguments correspondent à la langue et au nombre de mots.\n\nEnsuite pour utiliser ce dictionnaire personnel, vous devez ajouter cet argument à la commande : `--personal=./.aspell.en.pws`\n\nComment exécuter cet outil depuis Travis CI ?\n=============================================\n\nPour lancer `aspell` depuis Travis CI, vous devez installer ce package apt dans le container Travis. Pour ce faire, ajoutez les lignes suivantes dans le fichier `.travis.yml` :\n\n```yml\naddons:\n  apt:\n    packages:\n      - aspell\n      - aspell-en\n      - aspell-fr # qui correspond à votre langue\n```\n\nEnsuite, dans ce même fichier de configuration, vous pouvez exécuter votre script personnalisé grâce à cette ligne :\n\n```yml\nscript: your_script.sh\n```\n\nDans ce script, vous pouvez utiliser la variable d'environnement `$TRAVIS_COMMIT_RANGE`, disponible dans le container Travis, pour récupérer seulement les fichiers qui ont changé dans la pull request du build en cours :\n\n```bash\ngit diff --name-only $TRAVIS_COMMIT_RANGE\n```\n\nSi vous voulez récupérer seulement les fichiers de type markdown, vous pouvez ajouter `| grep .md` à la fin de la précédente ligne de commande.\n\nUne fois que vous avez les noms des fichiers que vous voulez vérifier sur votre pull request, vous pouvez lancer la commande `aspell list` que nous avons vue en première partie.\n\nVous pouvez aussi utiliser les commandes `grep` et `sed` pour supprimer les meta-données ou les blocs de code de vos fichiers, avant d'exécuter la commande `aspell`, si vous ne voulez pas vérifier l'orthographe dans ces blocs.\nPar exemple, si vous voulez supprimer vos blocs de code de vos fichiers markdown, vous pouvez utiliser cette commande :\n\n```bash\ncat your_file.md | sed  -n '/^```/,/^```/ !p'\n```\n\nComment envoyer les résultats vers votre pull request Github ?\n==============================================================\n\nNous ne voulons pas que ce script bloque ceux qui souhaitent merger la pull request. La première chose à faire est donc de retourner `exit 0` à la fin de notre script qui sera exécuté depuis Travis CI. Sinon si un code d'erreur est retourné, Travis va indiquer un statut d'erreur sur la pull request qui empêchera de la merger.\n\nLa façon la plus simple d'envoyer les résultats des précédentes commandes est donc de les poster dans un commentaire sur la pull request Github.\n\nPremièrement vous devrez choisir un utilisateur Github qui sera utilisé pour ajouter un commentaire, et configurer un token d'accès pour cet utilisateur :\n- Connectez vous sur [https://github.com](https://github.com){:rel=\"nofollow noreferrer\"} avec cet utilisateur\n- Allez sur [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new){:rel=\"nofollow noreferrer\"}\n- Ajoutez un nom/description au token que vous créez et cochez bien le scope `public_repo` seulement, si votre repository Github est public.\n\nEnsuite, depuis le script exécuté sur Travis, une fois que vous avez les résultats de la commande `aspell`, vous pouvez utiliser `curl` pour appeler l'API Github avec le token précédemment créé :\n\n```bash\ncurl -i -H \"Authorization: token $GITHUB_TOKEN\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST -d \"{\\\"body\\\":\\\"$ASPELL_RESULTS\\\"}\" \\\n    https://api.github.com/repos/eleven-labs/blog.eleven-labs.com/issues/$TRAVIS_PULL_REQUEST/comments\n```\n\n- Le token Github doit être caché et non pas en dur dans votre script, vous devez donc ajouter une variable d'environnement dans les paramètres Travis. Pour cela, allez sur cette page : [https://travis-ci.org/your-github-account/your-repository/settings](https://travis-ci.org/your-github-account/your-repository/settings){:rel=\"nofollow noreferrer\"}\n- La variable d'environnement `$TRAVIS_PULL_REQUEST` est automatiquement disponible sur le container Travis et correspond au numéro de la pull request liée au build en cours sur Travis.\n\nConclusion\n==========\n\nSi vous voulez voir le script entier qui nous utilisons pour notre blog, c'est par [ici](https://github.com/eleven-labs/blog.eleven-labs.com/blob/master/bin/check-spelling.sh){:rel=\"nofollow noreferrer\"}.\n\nJ'espère que ces astuces vous aideront ! Notez que vous pouvez aussi utiliser ce même process pour vérifier vos doc blocks dans votre code, ou vos fichiers de documentation.\n\nNous améliorerons très certainement ces scripts et vérifications automatiques lors des prochaines semaines, suivez donc [le repository de notre blog sur Github](https://github.com/eleven-labs/blog.eleven-labs.com){:rel=\"nofollow noreferrer\"}, pour voir les prochaines mises à jour.\n\nVos idées d'améliorations sont également les bienvenues : vous pouvez ajouter des commentaires ci-dessous ;)\n"}