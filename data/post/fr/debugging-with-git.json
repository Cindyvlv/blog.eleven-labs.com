{"date":"2017-10-26T00:00:00.000Z","title":"Débugger avec Git","excerpt":"Aujourd'hui je souhaite vous présenter un outil vous permettant d'isoler rapidement notre commit frauduleux qui a occasionné un bug dans notre application : git bisect","readingTime":"4mn","authors":["rpierlot"],"categories":["javascript","php"],"content":"\nDes risques de régressions existent lors de la mise en production de nouvelles fonctionnalités. Notamment sur les grosses applications ayant beaucoup de code non testé.\nEn effet, nous ne sommes jamais à l'abri d'un effet de bord, ou d'impacts qui demandent une investigation immédiate.\n\nDans un projet utilisant Git comme outil de management de code source, il apparaît capital de pouvoir trouver la source du problème rapidement.\nSi un nombre important de personnes sont impliquées dans le développement d'une application, chaque mise en production est accompagnée de multiples commits.\nOr, si la source du problème est dissimulée au milieu d'un ensemble de commits, il est compliqué d'aller vérifier sur chaque commit l'origine du problème.\n\nGit est un outil plus que populaire dans le développement d'applications, et vient avec tout un tas de commandes qui nous empêchent de regretter ce bon vieux SVN.\nAujourd'hui je souhaite vous partager un outil vous permettant d'isoler rapidement notre commit frauduleux qui a occasionné un bug dans notre application : `git bisect`\n\nPour simplifier l'explication de `git bisect`, je vais utiliser un historique de quelques commits que voici :\n\n```\n* bad5bfe - fixed security issue (1 hour ago) <Wilson Bouncer>\n* a73d98b - implemented feature to get recipe in space kitchen (8 hours ago) <Wilson Cook>\n* 9bd6395 - updated metrics computation on space launcher (13 hours ago) <Wilson Analyst>\n* 99f3fa1 - worked on real-time suggestion when encounting problems in space (1 day ago) <Wilson Scientist>\n* 4021b7f - deleted ab test feature and cleaned up code (1 day ago) <Wilson Cleaner>\n* 0d7c223 - computed the ideal playlist based upon astronauts tastes (2 days ago) <Wilson DJ>\n* 29d90f9 - updated README.md (2 days ago) <Wilson Documentation>\n```\nImaginons que ces commits aient été déployés en production. Au bout de quelques jours, quelqu'un s'aperçoit que quelque chose cloche. Une des fonctionnalités ne marche plus comme convenu.\nLe problème est donc immédiatement remonté aux développeurs et ces derniers doivent isoler la cause de ce non fonctionnement. Leur seul indice est le suivant : tout marchait bien lors de la dernière mise en production.\n\nGit nous épargne l'ennui de tester tous nos commits un par un avec `git bisect`. Cette commande effectue une recherche par [dichotomie (recherche binaire)](https://fr.wikipedia.org/wiki/Recherche_dichotomique){:rel=\"nofollow noreferrer\"}.\n\n![](/imgs/posts/2017-10-26-debugging-with-git/binary_search.jpg)\n*Binary search illustration*\n\nÀ chaque étape de la recherche binaire, nous devons dire à `git bisect` si le problème persiste toujours.\nEn fonction de notre réponse, `bisect` va chercher en amont ou en aval pour isoler le problème.\n\nIl existe deux commandes principales pour `git bisect` :\n* `git bisect good`: cela permet de spécifier que le commit sur lequel `bisect` s'est arrêté ne contient pas le bug\n* `git bisect bad`: cela permet de spécifier que le commit en question présente toujours le bug.\n\n## Débuggons !\n\nPour commencer à débugger, il nous faut démarrer le script, et lui indiquer l'intervalle sur lequel nous souhaitons utiliser `bisect`.\n\n```\ngit bisect start\ngit bisect good 29d90f9\ngit bisect bad bad5bfe\n```\nUne fois cette étape faite, nous pouvons apercevoir que `bisect` nous a positionné sur un commit au milieu de notre intervalle.\n```\nBisecting: 2 revisions left to test after this (roughly 2 steps)\n[99f3fa1b86489dd9d6f30368d5b5321e04a955df] worked on real-time suggestion when encounting problems in space\n```\nNous pouvons donc vérifier si le problème est toujours là. Malheureusement oui, nous sommes tombés sur un morceau !\nContinuons alors notre \"bisection\".\n```\ngit bisect bad\n```\nNous sommes maintenant positionnés au milieu de notre intervalle précédent (recherche dichotomique)\n```\nBisecting: 0 revisions left to test after this (roughly 1 step)\n[4021b7f911b84daa6ea5ccad51d3171fc0e46b67] deleted ab test feature and cleaned up code\n```\nOn nous indique également le nombre d'étapes quant à la recherche du commit problématique : `roughly 1 step`.\nNotre problème persiste :\n```\ngit bisect bad\n```\nNous approchons, nous approchons !\n```\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[0d7c223dcfee62e1750e21385e7fa35b030bc8a7] computed the ideal playlist based upon astronauts taste\n```\nPositionné sur ce commit, notre problème n'est plus là ! Hourra ! Indiquons le à `git bisect` :\n```\ngit bisect good\n```\n`git bisect` est arrivé à la fin de sa recherche, il a trouvé le coupable :\n```\n4021b7f911b84daa6ea5ccad51d3171fc0e46b67 is the first bad commit\ncommit 4021b7f911b84daa6ea5ccad51d3171fc0e46b67\nAuthor: Wilson Cleaner <wilson.cleaner@eleven-labs.com>\nDate:   Tue Oct 17 16:56:06 2017 +0200\n\n    deleted ab test feature and cleaned up code\n\n:100644 100644 66f0d114adeee6d2141aa6fe64a5cc431ebce65e a0fe62c949a75957245ec1c04728fea047488697 M\tREADME.md\n```\n\nPour réinitialiser, rien de plus simple :\n\n```\ngit bisect reset\n```\nNous sommes maintenant au point de départ, mais nous avons trouvé le méchant commit qui a tourmenté toute l'équipe, et cela dans un temps plutôt rapide.\n\n## Bonus\n\nLa commande `bisect` vous permet d'automatiser le process de recherche d'un mauvais commit.\nEn effet, si vous avez le luxe d'ajouter un test permettant de mettre en évidence le bug, vous pouvez lancer git bisect comme cela :\n```\ngit bisect run vendor/bin/phpunit --filter ThatWontHappenAgainISwearTest\n```\nLe test sera lancé à chaque étape vue précédemment, et vous aurez de manière automatique le hash du commit que vous cherchez.\n\n## Conclusion\n\nL'utilisation de `git bisect` permet de débugger rapidement, en isolant un commit erroné de manière dichotomique.\nIl suffit d'indiquer `git bisect good` ou `git bisect bad` pour que `bisect` navigue à travers l'historique.\n\n"}