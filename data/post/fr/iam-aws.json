{"date":"2019-03-13T00:00:00.000Z","title":"IAM aws","excerpt":"L'une des étapes incontournables d'Amazon Web Service est de bien comprendre le service IAM (Identity and Access Management). C'est l'un des services les plus importants car il permet de gérer les utilisateurs ou services qui peuvent avoir accès à votre compte AWS. Nous allons l'étudier ensemble.","readingTime":"6mn","authors":["captainjojo"],"categories":[],"content":"\nL'une des étapes incontournables d'Amazon Web Service est de bien comprendre le service IAM (Identity and Access Management). C'est l'un des services les plus importants car il permet de gérer les utilisateurs ou services qui peuvent avoir accès à votre compte AWS. Nous allons l'étudier ensemble.\n\n## Introduction\n\nIAM permet de donner des droits très fins à un utilisateur, un utilisateur pouvant d'ailleurs être une machine. L'idée est de donner par exemple accès aux services S3 seulement en lecture pour un utilisateur défini uniquement pendant 1h le 2 janvier.\n\nC'est le point central de votre sécurité, il permet de gérer l'ensemble des accès sécurisés de votre business.\n\nAWS nous donne aussi la définition de ce qu'IAM n'est pas :\n\n- Il ne permet pas de gérer les permissions de vos applications. IAM ne sert que pour les permissions de vos services AWS.\n- IAM n'est pas un OS de management d'identités type LDAP ou active directory.\n\n## Les principes\n\n### Utilisateur racine (Root User)\n\nLors de la création de votre compte AWS, vous avez créé un compte racine (Root User). C'est le compte avec le plus de permissions possible, il est le propriétaire du compte, il peut s'il le souhaite supprimer le compte.\n\nAttention, ce compte étant le compte principal, il faut absolument qu'il soit fortement sécurisé avec un Multi-Factor Application (double authentification).\n\nIl est déconseillé d'utiliser ce user tous les jours, car il a énormément d'accès. C'est un peu comme être en ROOT sur votre machine UNIX toute la journée. Le mieux est de créer un utilisateur IAM, comme vous allez pouvoir le voir dans le chapitre suivant.\n\n### Utilisateur IAM\n\nUn utilisateur IAM représente une personne physique ou une application. Vous devez créer un utilisateur différent pour tous les membres de votre équipe qui doivent utiliser des services AWS. Il est important de correctement séparer leurs droits, afin de permettre de sécuriser chaque service de votre compte AWS.\n\nUn utilisateur peut se créer via la console AWS ou directement en CLI. Mais ça, nous le verrons plus tard.\n\nComme évoqué précédemment, il est donc possible de définir des droits très précis pour un utilisateur identifié. Si vous souhaitez qu'un utilisateur ait les mêmes droits qu'un autre, la notion de groupe est importante.\n\n### Groupes\n\nUn groupe est un object qui permet de définir des droits pour un ensemble d'utilisateurs. L'idée est d'avoir un groupe d'utilisateurs ayant exactement les mêmes droits, cela permet de centraliser vos configurations.\nL'un des groupes est par exemple 'developpeur'. Vous pouvez alors donner des droits spécifiques à tous vos développeurs.\n\n### Rôles\n\nLes rôles permettent de donner acccès à des services spécifiques pendant un temps donné. Ils ont quatre usages différents :\n- Donner des accès à un autre compte AWS\n- Donner des accès à un compte externe\n- Donner des accès à vos services à une application EC2 ou autre\n- Donner des accès à un système de fédération\n\n#### Accès entre compte (Cross-account)\n\nLe Cross-account permet de donner des accès à un utilisateur venant d'un autre compte AWS. On le met souvent en place pour qu'une société externe puisse avoir accès à un bucket par exemple.\n\n#### Compte externe\n\nComme pour le cross-account, cela permet de donner des accès à une personne via son identité :\n- Google\n- Facebook\n- Amazon\n\n#### Accès à un service\n\nIl est souvent nécessaire de donner un accès a des services AWS pour une application installée sur un autre service AWS. Par exemple si une machine EC2 doit avoir accès à un bucket en lecture. Il serait possible de le faire via l'API, mais cela est plus compliqué pour les développeurs et demanderait d'envoyer la clé sur l'ensemble des machines. Avec ce système il suffit de donner le rôle lors de l'installation des machines pour que l'accès soit ouvert.\n\n#### Fédération\n\nLa fédération permet de donner l'accès aux utilisateurs de votre provider d'identité via l'utilisation d'une configuration SAML 2.0 que vous transmettez à AWS. Cela permet d'utiliser vos utilisateurs Active Directory ou LDAP par exemple.\n\n## Authentification\n\nIl existe 3 types d'authentification sur IAM.\n\nLa première, Username/Password, est la plus simple elle permet de se connecter via un login/password. IAM conseille de mettre en place une politique de mot de passe personnalisé. Elle est principalement utilisé pour la console AWS. Vous pouvez alors choisir plusieurs options :\n- Nombre de caractères\n- Nombre de caractères numériques\n- Changement de mot de passe tous les X jours\n- etc ...\n\nLa seconde est access key/secret key. Il s'agit d'une paire clé/secret qui permet de se connecter au SDK AWS. Cela vous permet d'utiliser AWS cli ainsi que l'api REST disponible par AWS.\n\nLa dernière est un mélange de access key et de session key. Elle est utilisée dans le cas des rôles et permet à l'utilisateur de se servir des services AWS via l'api REST.\n\n## Autorisation\n\nUne fois l'authentification effectuée sur IAM, il faut donner des accès à vos utilisateurs. C'est dans ce cadre que l'autorisation est appliquée. Il s'agit alors de donner des accès spécifiques à chaque utilisateur. Pour ce faire nous utilisons les \"policies\" qui permettent de donner des droits très précis sur les services.\n\n### Policies\n\nIl existe déjà beaucoup de \"policies\" crées par AWS. Vous pouvez choisir très rapidement des \"policies\" du type :\n- Lecture sur Bucket\n- Écriture Lambda\n\nMais il est possible de créer sa propre \"policies\". Pour cela il faut créer un objet JSON. Cet objet doit contenir les infos suivantes :\n\n- `Effect` qui contient la valeur `Allow` ou `Deny`\n- `Resource` qui contient l'ARN de la ressource utilisée sur la \"policy\"\n- `Action` qui est une liste d'actions possibles representée par `Service:Action`\n- `Condition` qui permet de mettre une condition à notre \"policy\", exemple \"l'IP est...\"\n\nCela pourrait donner un objet tel que :\n\n```json\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [{\n\t\t\"Sid\": \"Stmt2649856320145\",\n\t\t\"Effect\": \"Allow\",\n\t\t\"Action\": [\n\t\t\t\"s3:GetObject\",\n\t\t\t\"s3:ListBucket\"\n\t\t],\n\t\t\"Condition\": {\n\t\t\t\"IpAddress\": {\n\t\t\t\t\"aws:SourceIp\": \"192.168.0.1\"\n\t\t\t}\n\t\t},\n\t\t\"Resource\": [\n\t\t\t\"arn:aws:s3::my_public_bucket/*\"\n\t\t]\n\t}]\n}\n```\n\nUne fois votre \"policy\" créé, vous pouvez la mettre soit sur un utilisateur IAM, soit sur un groupe.\n\n## Autres features\n\nBien sûr, IAM propose d'autres fonctionnalités très importantes.\nLa première est la gestion du MFA (Multi-factor authentification), qui permet d'utiliser une autre source d'authentification pour un utilisateur IAM. Vous pouvez très facilement ajouter la double authentification via Authenticator Google.\n\nLa seconde fonctionnalité est la rotation des clés d'accès. Le vieillissement d'une clé d'accès augmente l'insécurité, elle peut ne plus être utilisée ou alors être utilisée sur des machines anciennes. Via AWS il est possible de générer une nouvelle clé pour un utilisateur IAM. Cela permet de désactiver l'ancienne et d'en créer une nouvelle avec les mêmes droits.\n\nLa troisième est l'intégration des SAML type authentification Facebook, Google... Vous trouverez la documentation [ici](https://aws.amazon.com/fr/blogs/security/how-to-set-up-federated-single-sign-on-to-aws-using-google-apps/)\nLa dernière est de résoudre les multi-permissions. C'est AWS qui s'occupe de calculer la bonne permission en utilisant l'ensemble des policies configurées pour l'utilisateur.\n\nVoilà, on a fait le tour.\nJ'espère que cet article vous aura été utile et vous aura permis de mieux cerner IAM !\n"}