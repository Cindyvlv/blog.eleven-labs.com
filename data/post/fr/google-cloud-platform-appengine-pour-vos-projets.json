{"date":"2016-12-09T00:00:00.000Z","title":"Google Cloud Platform (2/3) - AppEngine pour vos projets","excerpt":"Vous avez souvent été bloqué dans vos projets parce qu'il est difficile de mettre en production. En effet, il faut des serveurs, les installer, les configurer et installer votre projet. Comment rendre cela plus simple ?","readingTime":"4mn","authors":["captainjojo"],"categories":["javascript"],"content":"\nVous avez souvent été bloqué dans vos projets parce qu'il est difficile de mettre en production.\nEn effet, il faut des serveurs, les installer, les configurer et installer votre projet.\nComment rendre cela plus simple ?\n\nAvant de commencer ce tutoriel, il faut suivre les 2 premières étapes du tutoriel Google Cloud Platform (1/3).\n\nDans le tutoriel d'aujourd'hui, nous allons utiliser la solution [AppEngine](https://console.cloud.google.com/appengine){:rel=\"nofollow noreferrer\"}, qui vous permet de déployer facilement et directement depuis votre ordinateur votre application dans le Cloud.\nPar défaut AppEngine permet d'installer du Java, du Php, du Go et du Python, mais il permet aussi d'installer du Node, c'est d'ailleurs sur cette technologie que nous allons partir.\n\n### Etape 1, installer le sdk Google Cloud Platform\n\nJe vous invite à suivre les instructions disponibles [ici](https://cloud.google.com/sdk/docs/?hl=fr){:rel=\"nofollow noreferrer\"}. Une fois l'installation terminée vous devriez pouvoir lancer la commande suivante dans votre terminal :\n\n```sh\ngcloud -help\n```\nSi ce n'est pas le cas, vérifiez votre installation.\n\n### Etape 2, créer votre projet node.js\n\nPour continuer nous allons faire simple en mettant en place un petit \"Hello Word\",  avec [Express.js](http://expressjs.com/fr/){:rel=\"nofollow noreferrer\"}.\n\nCréez un nouveau dossier, ajoutez le fichier package.json :\n\n```json\n//package.json\n{\n  \"name\": \"hello-word\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.14.0\"\n  }\n}\n```\n\nPuis ajoutez le fichier index.js :\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(8080, function () {\n  console.log('Example app listening on port 8080!');\n});\n```\n\nSi vous lancez dans votre terminal :\n\n```sh\nnpm install && npm start\n```\n\nNormalement si vous suivez le lien [http://localhost:8080/](http://localhost:8080/){:rel=\"nofollow noreferrer\"} un joli \"Hello World!\" s'affiche.\n\n### Etape 3, mettons du Cloud\n\nNous allons ajouter le fichier app.yaml qui permet de configurer votre AppEngine. Vous trouverez la documentation complète [ici](https://cloud.google.com/appengine/docs){:rel=\"nofollow noreferrer\"}. Dans le fichier, nous allons mettre en place la configuration de base pour un environnement node.\n\n```yaml\nruntime: nodejs\nenv: flex\n```\n\nComme vous pouvez le comprendre facilement, la première ligne permet de définir la technologie utilisée, la seconde ligne permet de choisir un environnement dit 'flex', ce qui signifie qu'il \"s'auto scale\" selon le trafic.\n\n### Etape 4, on met en production\n\nLa mise en prod est maintenant super simple, il vous suffit de vous mettre dans le dossier d'application et de lancer la commande suivante :\n\n```sh\ngcloud app deploy --version version1\n```\n\nL'option --version vous permet de donner un nom à votre version et de pouvoir la distinguer dans l'interface.\n\n### Etape 5, allons dans l'interface\n\nAllez dans la console Cloud dans l'onglet [AppEngine](https://console.cloud.google.com/appengine){:rel=\"nofollow noreferrer\"}.\nPuis dans \"versions\" vous devriez voir la version de votre projet apparaître.\n\n\n![AppEngine - Google Cloud Platform](/imgs/posts/2016-12-09-google-cloud-platform-appengine-pour-vos-projets/capture-decran-2016-11-30-a-14.05.13.png)\n\nQuand le déploiement sera terminé, vous pourrez accéder à votre site en cliquant sur le nom de la version.\nVous pouvez suivre les logs de l'application en lançant la commande suivante dans votre terminal :\n\n```sh\ngcloud app logs read -s default\n```\n\n### Etape 6, créons une nouvelle version\n\nDans index.js changeons le message du \"Hello World!\" avec par exemple :\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World V2!');\n});\n\napp.listen(8080, function () {\n  console.log('Example app listening on port 8080!');\n});\n```\n\nPuis lancez la commande :\n\n```sh\ngcloud app deploy --version version2\n```\nDans l'interface AppEngine, vous devez voir la nouvelle version se lancer :\n\n![AppEngine V2 - Google Cloud Platform](/imgs/posts/2016-12-09-google-cloud-platform-appengine-pour-vos-projets/capture-decran-2016-11-30-a-14.13.55.png)\n\nGoogle enverra 100% du trafic sur la nouvelle version dès que celle-ci sera lancée entièrement.\nUne fois le processus terminé vous pouvez choisir vous même comment répartir le trafic.\n\n### Etape 7, répartir le trafic\n\nLa répartition du trafic permet de gérer un changement de version progressif de votre application. Pour procéder à cette répartition rien de plus simple, sélectionnez les versions avec lesquelles vous voulez travailler et cliquez sur \"Répartir le trafic\".\n\nVous arrivez sur l'interface suivante :\n\n![Répartir le traffic - Google Cloud Platform](/imgs/posts/2016-12-09-google-cloud-platform-appengine-pour-vos-projets/capture-decran-2016-11-30-a-14.18.42.png)\n\n### Etape 8, Stopper les versions\n\nAvant de partir, nous allons éteindre les versions, pour cela sélectionnez la version que vous souhaitez éteindre, puis cliquez sur \"Arrêter\".\n\n![Arreter - Google Cloud Platform](/imgs/posts/2016-12-09-google-cloud-platform-appengine-pour-vos-projets/capture-decran-2016-11-30-a-14.22.54.png)\n\nJe vous invite à jouer un peu avec AppEngine, il permet de très vite tester vos POC sur de vrais serveurs, et même de maintenir une charge importante pour vos projets.\n"}