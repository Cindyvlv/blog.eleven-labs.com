{"date":"2020-09-08T00:00:00.000Z","title":"Gérer son organisation Github avec Terraform\n","excerpt":"Apprenons ensemble à scaler la gestion d'une organisation Github avec Terraform\n","readingTime":"19mn","authors":["VEBERArnaud"],"categories":["architecture"],"content":"\n## Un peu de contexte\nAvec l'augmentation du nombre de projets et de contributeurs sur notre [organisation Github](https://github.com/eleven-labs)\nont émergé des sujets d'onboarding / outboarding et de gouvernance.\nJusque là, les dépôts et les contributeurs étaient créés manuellement par un administrateur de l'organisation,\nmais le manque de disponibilité de ces administrateurs ne permettait pas une gestion optimale.\nIl devenait évident qu'une autre solution devait être envisagée.\n\n## Comment scaler la gestion d'une organisation Github\nComme expliqué précédemment, notre obstacle sur le chemin d'une gestion optimale se trouve au niveau des actions\nmanuelles réalisables par un ensemble restreint de personnes.\n\nPour outrepasser cet obstacle, deux solutions s'offraient à nous\n- Augmenter le nombre d'administrateurs et donc la probabilité d'en trouver un de disponible à un instant *t*,\n- Automatiser ces actions à l'aide d'un projet collaboratif accessible par tout le monde.\n\nLa première solution, consistant à augmenter le nombre d'administrateurs, a très vite été abandonnée.\nElle soulevait plus de questions qu'elle apportait de réponses (sécurité, gouvernance, perte de l'information).\n\nLa deuxième solution, au contraire, s'est très vite révélée être la solution dont nous avions besoin.\n\n## Le projet\n#### Nos besoins:\n- Un projet déclaratif versionné pouvant interagir avec l'api Github (pour éviter la perte d'information),\n- Un projet accessible à tout le monde (pour faciliter l'onboarding / outboarding),\n- Un workflow de validation simplifié et collaboratif (pour la gouvernance & la sécurité),\n- Un projet permettant l'intégration et le déploiement continus (pour automatiser les changements),\n\n#### Notre solution\nAvec cet ensemble de besoins identifiés, j'ai tout de suite vu une nouvelle occasion d'utiliser un de mes outils\nfavoris [Terraform](https://www.terraform.io/).\n\nTerraform nous permet d'avoir un projet déclaratif et open source versionné sur Github (*Githubception*) pour favoriser\nla collaboration, simplifier le process de validation et déclencher automatiquement des actions au merge d'une pull\nrequest.\n\n## Passons à la pratique\n### Configuration du provider Github\nCommençons par la configuration du provider Github pour Terraform.\n\n> La documentation du provider Github pour Terraform est disponible sur le\n> [site officiel Terraform](https://www.terraform.io/docs/providers/github/index.html).\n\nPour cela vous allez avoir besoin :\n- du nom de l'organisation Github, par exemple `your_organisation_name`\n- d'un [token Github](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)\npermettant l'administration de l'organisation, par exemple `ff34885...`\n\nCréons à la racine de notre projet un fichier `terraform.tf` qui contiendra la configuration du provider\n```hcl\n# ./terraform.tf\n\nprovider \"github\" {\n  organization = \"your_organization_name\"\n  token        = \"ff34885...\"\n}\n```\n\nVous pouvez maintenant initialiser le projet avec la commande\n```sh\nterraform init\n```\n\nNotre projet Terraform étant initialisé et prêt à communiquer avec l'API de Github, voyons comment créer et récupérer les\ndifférentes resources et data sources dont nous avons besoin.\n\n### Repository\n#### Resource github_repository\nCommençons par un exemple simplifié de gestion de repository avec la resource `github_repository`\n\n> Nous verrons [plus tard](#module-repository) un exemple plus complet\n\nLa resource `github_repository` requiert comme argument\n- le nom du repository, par exemple `my_awesome_repo`\n\nCréons à la racine du projet un fichier `repository.tf` qui contiendra la déclaration de notre repository\n```hcl\n# ./repository.tf\n\nresource \"github_repository\" \"example\" {\n  name = \"my_awesome_repo\"\n}\n```\n\nVous pouvez maintenant vérifier les changements que Terraform apportera à votre organisation avec la commande\n```sh\nterraform plan\n```\n\nPuis appliquez ces changements avec la commande\n```sh\nterraform apply\n```\n\nVotre nouveau repository est maintenant disponible dans votre organisation Github\n\n### Utilisateur\nIntéressons-nous maintenant à la partie utilisateur.\n\nPour les utilisateurs, notre but n'est pas de créer de nouveaux utilisateurs Github mais de récupérer les utilisateurs\nqui nous intéressent pour ensuite les ajouter à notre organisation.\nPour cette raison nous utilisons la data source `github_user` pour récupérer les utilisateurs et la resource\n`github_membership` afin de les ajouter à l'organisation.\n\n#### Data source github_user\nLa data source `github_user` requiert en argument\n- le username de l'utilisateur que l'on souhaite récupérer, par exemple `VEBERAranud`\n\nCréons à la racine du projet un fichier `user.tf`\n```hcl\n# ./user.tf\n\ndata \"github_user\" \"example\" {\n  username = \"VEBERArnaud\"\n}\n```\n\n#### github_membership\nLa resource `github_membership` requiert en arguments\n- le username de l'utilisateur à ajouter à l'organisation. Nous utilisons ici une interpolation depuis notre data\nsource `github_user`.\n- le rôle de cet utilisateur dans l'organisation. Deux choix sont possibles `member` ou `admin` en fonction des\npermissions que vous souhaitez lui attribuer.\n\nAjoutons au fichier `user.tf`\n```hcl\n# ./user.tf\n\n# ... (github_user data source)\n\nresource \"github_membership\" \"example\" {\n  username = data.github_user.example.login\n  role     = \"admin\"\n}\n```\n\nVous pouvez maintenant faire un plan et un apply de vos changements, avec les commandes\n\n```sh\nterraform plan\nterraform apply\n```\n\nL'utilisateur reçoit alors un mail de Github l'invitant à rejoindre votre organisation.\n\n### Team\nLe dernier domaine que nous verrons dans cet article concerne les teams, incluant la création, l'ajout\nd'utilisateurs et l'attribution de repositories à ces teams.\n\nPour cela nous utiliserons les resources `github_team` pour la création de teams, `github_team_membership` pour l'ajout\nd'utilisateurs aux teams et `github_team_repository` pour l'attribution de repositories aux teams.\n\n#### github_team\nLa resource `github_team` requiert en argument\n- le nom de la team, par exemple `BackEnd`\n\nCréons à la racine du projet un fichier `team.tf`\n```hcl\n# ./team.tf\n\nresource \"github_team\" \"example\" {\n  name = \"BackEnd\"\n}\n```\n\n#### github_team_membership\nLa resource `github_team_membership` requiert en arguments\n- l'id de la team, récupérée par interpolation depuis la resource `github_team`\n- le username de l'utilisateur à ajouter à la team, récupérée par interpolation depuis la data source `github_user`\n- le rôle de cet utilisateur dans la team, au choix entre `member` et `maintainer`\n\nAjoutons au fichier `team.tf`\n```hcl\n# ./team.tf\n\n# ... (github_team resource)\n\nresource \"github_team_membership\" \"example\" {\n  team_id  = github_team.example.id\n  username = data.github_user.example.login\n  role     = \"maintainer\"\n}\n```\n\n#### github_team_repository\nLa resource `github_team_repository` requiert en arguments\n- l'id de la team, récupérée par interpolation depuis la resource `github_team`\n- le nom du repository à attribuer à la team, récupérée par interpolation depuis la resource `github_repository`\n- les permissions de la team sur ce repository, au choix parmi `pull`, `triage`, `push`, `maintain` or `admin`\n\nAjoutons au fichier `team.tf`\n```hcl\n# ./team.tf\n\n# ... (github_team resource)\n\n# ... (github_team_membership resource)\n\nresource \"github_team_repository\" \"example\" {\n  team_id    = github_team.example.id\n  repository = github_repository.example.name\n  permission = \"admin\"\n}\n```\n\nVous pouvez maintenant faire un plan et un apply de vos changements, avec les commandes\n```sh\nterraform plan\nterraform apply\n```\n\nVotre nouvelle team devrait maintenant exister, contenir votre utilisateur et avoir les droits admin sur votre nouveau\nrepository.\n\n### Modules\nMaintenant que nous savons gérer les repositories, les utilisateurs et les teams, voyons comment créer des modules\nréutilisables pour abstraire une partie de la complexité.\n\nNous en profiterons pour ajouter de nouvelles resources à ces modules afin d'ajouter les arguments optionnels sur les\nresources ainsi que la création des resources de protection de branches et des webhooks sur les repositories.\n\n![Github model]({{site.baseurl}}/assets/2020-09-08-gerer-son-organisation-github-avec-terraform/github_model.png)\n\n#### Module repository\nLe premier module que nous allons réaliser est le module de gestion de repository que nous nommerons `repository`.\n\nCe module est composé des fichiers\n- `./module/repository/variables.tf` pour regrouper les différentes variables du module\n- `./module/repository/main.tf` pour la déclaration du repository\n- `./module/repository/branch_protection.tf` pour la déclaration des branches protégées du repository\n- `./module/repository/webhook.tf` pour la déclaration des webhooks du repository\n- `./module/repository/outputs.tf` pour l'exposition d'attributs à l'extérieur du module\n\n```hcl\n# ./module/repository/variables.tf\n\nvariable \"repository-name\" {\n  type = string\n}\n\nvariable \"repository-description\" {\n  type = string\n\n  default = null\n}\n\nvariable \"repository-homepage_url\" {\n  type = string\n\n  default = null\n}\n\nvariable \"repository-topics\" {\n  type = list(string)\n\n  default = []\n}\n\nvariable \"repository-private\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-has_issues\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-has_projects\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-has_wiki\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-has_downloads\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-allow_merge_commit\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-allow_squash_merge\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-allow_rebase_merge\" {\n  type = bool\n\n  default = true\n}\n\nvariable \"repository-auto_init\" {\n  type = bool\n\n  default = false\n}\n\nvariable \"repository-gitignore_template\" {\n  type = string\n\n  default = null\n}\n\nvariable \"repository-license_template\" {\n  type = string\n\n  default = null\n}\n\nvariable \"repository-default_branch\" {\n  type = string\n\n  default = null\n}\n\nvariable \"repository-archived\" {\n  type = bool\n\n  default = false\n}\n\nvariable \"branches_protection\" {\n  type = list(\n    object({\n      branch                                     = string,\n      enforce_admins                             = bool,\n      require_signed_commits                     = bool,\n      status_check-strict                        = bool,\n      status_check-contexts                      = list(string),\n      pr_reviews-required_approving_review_count = number\n      pr_reviews-require_code_owner_reviews      = bool,\n      pr_reviews-dismiss_stale_reviews           = bool,\n      pr_reviews-dismissal_users                 = list(string),\n      pr_reviews-dismissal_teams                 = list(string),\n      restrictions-users                         = list(string),\n      restrictions-teams                         = list(string)\n    })\n  )\n\n  default = []\n}\n\nvariable \"webhooks\" {\n  type = list(\n    object({\n      url          = string,\n      secret       = string,\n      content_type = string,\n      insecure_ssl = bool,\n      active       = bool,\n      events       = list(string)\n    })\n  )\n\n  default = []\n}\n```\n\n```hcl\n# ./module/repository/main.tf\n\nresource \"github_repository\" \"main\" {\n  name         = var.repository-name\n  description  = var.repository-description\n  homepage_url = var.repository-homepage_url\n  topics       = var.repository-topics\n\n  private = var.repository-private\n\n  has_issues    = var.repository-has_issues\n  has_projects  = var.repository-has_projects\n  has_wiki      = var.repository-has_wiki\n  has_downloads = var.repository-has_downloads\n\n  allow_merge_commit = var.repository-allow_merge_commit\n  allow_squash_merge = var.repository-allow_squash_merge\n  allow_rebase_merge = var.repository-allow_rebase_merge\n\n  auto_init = var.repository-auto_init\n\n  gitignore_template = var.repository-gitignore_template\n  license_template   = var.repository-license_template\n\n  default_branch = (var.repository-default_branch != \"master\" ? var.repository-default_branch : null)\n\n  archived = var.repository-archived\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n```\n\n```hcl\n# ./module/repository/branch_protection.tf\n\nresource \"github_branch_protection\" \"main\" {\n  count = length(var.branches_protection)\n\n  repository = github_repository.main.name\n  branch     = var.branches_protection[count.index].branch\n\n  enforce_admins = var.branches_protection[count.index].enforce_admins\n\n  require_signed_commits = var.branches_protection[count.index].require_signed_commits\n\n  required_status_checks {\n    strict   = var.branches_protection[count.index].status_check-strict\n    contexts = var.branches_protection[count.index].status_check-contexts\n  }\n\n  required_pull_request_reviews {\n    required_approving_review_count = var.branches_protection[count.index].pr_reviews-required_approving_review_count\n    dismiss_stale_reviews           = var.branches_protection[count.index].pr_reviews-dismiss_stale_reviews\n    dismissal_users                 = var.branches_protection[count.index].pr_reviews-dismissal_users\n    dismissal_teams                 = var.branches_protection[count.index].pr_reviews-dismissal_teams\n    require_code_owner_reviews      = var.branches_protection[count.index].pr_reviews-require_code_owner_reviews\n  }\n\n  restrictions {\n    users = var.branches_protection[count.index].restrictions-users\n    teams = var.branches_protection[count.index].restrictions-teams\n  }\n}\n```\n\n```hcl\n# ./module/repository/webhook.tf\n\nresource \"github_repository_webhook\" \"main\" {\n  count = length(var.webhooks)\n\n  repository = github_repository.main.name\n\n  configuration {\n    url          = var.webhooks[count.index].url\n    content_type = var.webhooks[count.index].content_type\n    insecure_ssl = var.webhooks[count.index].insecure_ssl\n    secret       = var.webhooks[count.index].secret\n  }\n\n  active = var.webhooks[count.index].active\n\n  events = var.webhooks[count.index].events\n}\n```\n\n```hcl\n# ./module/repository/outputs.tf\n\noutput \"name\" {\n  value = github_repository.main.name\n}\n\noutput \"full_name\" {\n  value = github_repository.main.full_name\n}\n\noutput \"html_url\" {\n  value = github_repository.main.html_url\n}\n\noutput \"ssh_clone_url\" {\n  value = github_repository.main.ssh_clone_url\n}\n\noutput \"http_clone_url\" {\n  value = github_repository.main.http_clone_url\n}\n\noutput \"svn_url\" {\n  value = github_repository.main.svn_url\n}\n```\n\nPour utiliser ce module, éditons le fichier `./repository.tf` et remplaçons son contenu par\n```hcl\n# ./repository.tf\n\nmodule \"my_awesome_blog\" {\n  source = \"./module/repository/\"\n\n  # repository\n  repository-name         = \"my_awesome_blog\"\n  repository-description  = \"My Awesome Blog\"\n  repository-homepage_url = \"https://my-awesome-blog.com\"\n  repository-topics       = [\"blog\", \"tech\", \"awesome\"]\n\n  repository-private = false\n\n  repository-has_projects = false\n\n  repository-auto_init      = false\n  repository-default_branch = \"master\"\n\n  # branches protection\n  branches_protection = [\n    {\n      branch                                     = \"master\"\n      enforce_admins                             = false\n      require_signed_commits                     = false\n      status_check-strict                        = true\n      status_check-contexts                      = [\"continuous-integration/travis-ci\"]\n      pr_reviews-required_approving_review_count = 1\n      pr_reviews-require_code_owner_reviews      = false\n      pr_reviews-dismiss_stale_reviews           = false\n      pr_reviews-dismissal_users                 = []\n      pr_reviews-dismissal_teams                 = []\n      restrictions-users                         = []\n      restrictions-teams                         = []\n    }\n  ]\n\n  # webhooks\n  webhooks = [\n    {\n      url          = \"https://notify.travis-ci.com\"\n      secret       = null\n      content_type = \"form\"\n      insecure_ssl = false\n      active       = true\n      events       = [\"create\", \"delete\", \"issue_comment\", \"member\", \"public\", \"pull_request\", \"push\", \"repository\"]\n    }\n  ]\n}\n```\n\n#### Module utilisateur\nIntéressons-nous maintenant au module de gestion d'utilisateurs que nous nommerons `user`.\n\nCe module est composé des fichiers\n- `./module/user/variables.tf` pour regrouper les différentes variables du module\n- `./module/user/main.tf` pour la déclaration des utilisateurs\n- `./module/user/membership.tf` pour l'attribution des utilisateurs à l'organisation\n- `./module/user/outputs.tf` pour l'exposition d'attributs à l'extérieur du module\n\n```hcl\n# ./module/user/variables.tf\n\nvariable \"user-name\" {\n  type = string\n}\n\nvariable \"user-role\" {\n  type = string\n\n  default = \"member\"\n}\n```\n\n```hcl\n# ./module/user/main.tf\n\ndata \"github_user\" \"main\" {\n  username = var.user-name\n}\n```\n\n```hcl\n# ./module/user/membership.tf\n\nresource \"github_membership\" \"main\" {\n  username = data.github_user.main.login\n  role     = var.user-role\n}\n```\n\n```hcl\n# ./module/user/outputs.tf\n\noutput \"login\" {\n  value = data.github_user.main.login\n}\n\noutput \"avatar_url\" {\n  value = data.github_user.main.avatar_url\n}\n\noutput \"gravatar_id\" {\n  value = data.github_user.main.gravatar_id\n}\n\noutput \"site_admin\" {\n  value = data.github_user.main.site_admin\n}\n\noutput \"name\" {\n  value = data.github_user.main.name\n}\n\noutput \"company\" {\n  value = data.github_user.main.company\n}\n\noutput \"blog\" {\n  value = data.github_user.main.blog\n}\n\noutput \"location\" {\n  value = data.github_user.main.location\n}\n\noutput \"email\" {\n  value = data.github_user.main.email\n}\n\noutput \"gpg_keys\" {\n  value = data.github_user.main.gpg_keys\n}\n\noutput \"ssh_keys\" {\n  value = data.github_user.main.ssh_keys\n}\n\noutput \"bio\" {\n  value = data.github_user.main.bio\n}\n\noutput \"public_repos\" {\n  value = data.github_user.main.public_repos\n}\n\noutput \"public_gists\" {\n  value = data.github_user.main.public_gists\n}\n\noutput \"followers\" {\n  value = data.github_user.main.followers\n}\n\noutput \"following\" {\n  value = data.github_user.main.following\n}\n\noutput \"created_at\" {\n  value = data.github_user.main.created_at\n}\n\noutput \"updated_at\" {\n  value = data.github_user.main.updated_at\n}\n```\n\nPour utiliser ce module, éditons le fichier `./user.tf` et remplaçons son contenu par\n```hcl\n# ./user.tf\n\nmodule \"VEBERArnaud\" {\n  source = \"./module/user/\"\n\n  user-name = \"VEBERArnaud\"\n  user-role = \"admin\"\n}\n```\n\n#### Module team\nPour finir avec les modules, regardons la gestion des teams dans un module nommé `team`.\n\nCe module est composé des fichiers\n- `./module/team/variables.tf` pour regrouper les différentes variables du module\n- `./module/team/main.tf` pour la déclaration de la team\n- `./module/team/team_membership.tf` pour l'ajout des utilisateurs à la team\n- `./module/team/team_repository.tf` pour l'ajout des repositories à la team\n- `./module/team/outputs.tf` pour l'exposition d'attributs à l'extérieur du module\n\n```hcl\n# ./module/team/variables.tf\n\nvariable \"team-name\" {\n  type = string\n}\n\nvariable \"team-description\" {\n  type = string\n\n  default = null\n}\n\nvariable \"team-privacy\" {\n  type = string\n\n  default = \"secret\"\n}\n\nvariable \"team-parent_team_id\" {\n  type = string\n\n  default = null\n}\n\nvariable \"team-ldap_dn\" {\n  type = string\n\n  default = null\n}\n\nvariable \"team-members\" {\n  type = list(string)\n\n  default = []\n}\n\nvariable \"team-members_role\" {\n  type = map\n\n  default = {}\n}\n\nvariable \"team-repositories\" {\n  type = list(string)\n\n  default = []\n}\n\nvariable \"team-repositories_permission\" {\n  type = map\n\n  default = {}\n}\n```\n\n```hcl\n# ./module/team/main.tf\n\nresource \"github_team\" \"main\" {\n  name           = var.team-name\n  description    = var.team-description\n  privacy        = var.team-privacy\n  parent_team_id = var.team-parent_team_id\n  ldap_dn        = var.team-ldap_dn\n}\n```\n\n``` hcl\n# ./module/team/team_membership.tf\n\nresource \"github_team_membership\" \"members\" {\n  for_each = toset(var.team-members)\n\n  team_id  = github_team.main.id\n  username = each.value\n  role     = var.team-members_role[each.value]\n}\n```\n\n```hcl\n# ./module/team/team_repository.tf\n\nresource \"github_team_repository\" \"repositories\" {\n  for_each = toset(var.team-repositories)\n\n  team_id    = github_team.main.id\n  repository = each.value\n  permission = var.team-repositories_permission[each.value]\n}\n```\n\n```hcl\n# ./module/team/outputs.tf\n\noutput \"id\" {\n  value = github_team.main.id\n}\n\noutput \"slug\" {\n  value = github_team.main.slug\n}\n```\n\nPour utiliser ce module, éditons le fichier `./team.tf` et remplaçons son contenu par\n```hcl\n# ./team.tf\nmodule \"core\" {\n  source = \"./module/team/\"\n\n  team-name        = \"FrontEnd\"\n  team-description = \"FrontEnd Developers\"\n  team-privacy     = \"secret\"\n\n  team-members = [\n    module.VEBERArnaud.login,\n  ]\n\n  team-members_role = {\n    (module.VEBERArnaud.login) = \"maintainer\",\n  }\n\n  team-repositories = [\n    module.my_awesome_blog.name,\n  ]\n\n  team-repositories_permission = {\n    (module.my_awesome_blog.name) = \"admin\",\n  }\n}\n```\n\nUtilisons maintenant nos commandes Terraform pour vérifier les changements qui vont être apportés à notre organisation\nGithub et les appliquer.\n```sh\nterraform plan\nterraforn apply\n```\n\n## Pour aller plus loin\n### Terraform remote state & lock\nAfin de favoriser la collaboration, il est important de partager le state Terraform entre les différentes exécutions et\ngarantir qu'une seule exécution se fait à un instant *t*\n\nPour cela, il est possible de configurer le stockage distant des fichiers de state Terraform, plusieurs types de backend\nsont disponible en fonction de vos préférences.\n\nLa documentation pour ces fonctionnalités est disponible sur la\n[documentation Terraform](https://www.terraform.io/docs/backends/types/index.html).\n\n### Intégration / déploiement continue\nLa dernière étape pour que notre projet corresponde aux besoins de départ est la mise en place d'une pipeline de CI/CD.\n\n> Pour l'exemple nous utiliserons [travis-ci](https://travis-ci.com/) mais vous pouvez utiliser la techno de votre choix.\n\nNotre pipeline se chargera à chaque run\n- d'initialiser notre projet Terraform sur le runner\n- de valider la syntaxe de nos déclarations\n- de vérifier le formatage de nos fichiers Terraform\n- d'exécuter un plan des changements à apporter\n- d'appliquer les changements\n\n> L'application des changements ne devant être exécutée que dans le cas d'un merge sur la branche master.\n\nPour cela nous utilisons la configuration travis suivante\n\n> Pensez à mettre à jour la version de Terraform dans la variable d'env globale `TERRAFORM_VERSION` en fonction de votre\n> installation\n\n```yml\nlanguage: generic\nos: linux\nversion: ~> 1.0\n\nenv:\n  global:\n    - TERRAFORM_VERSION=0.12.24\n    - TERRAFORM_PATH=$HOME/bin\n\nbefore_install:\n  - wget \"https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\" -O /tmp/terraform.zip\n\ninstall:\n  - unzip -d \"${TERRAFORM_PATH}\" /tmp/terraform.zip\n\nbefore_script:\n  - terraform init -input=false\n\nscript:\n  - terraform validate\n  - terraform fmt -check=true -diff\n  - terraform plan -input=false -out=.terraform/tfplan\n\ndeploy:\n  provider: script\n  edge: true\n  script: terraform apply -input=false .terraform/tfplan\n  on:\n    branch: master\n```\n\n## Conclusion\nVous avez maintenant toutes les clés pour gérer votre organisation Github en collaboratif et scalable, s'adaptant à la\ntaille de votre organisation. Un exemple de première Pull Request pour vos nouveaux collaborateurs pourrait être de\nleurs faire gérer leur propre onboarding dans l'organisation.\n\nVous pouvez jeter un oeil à notre [repository](https://github.com/eleven-labs/github) pour voir un \"real world example\".\n"}