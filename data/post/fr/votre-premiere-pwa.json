{"date":"2016-07-20T00:00:00.000Z","title":"Votre première PWA","excerpt":"Le monde du web évolue. Le site web mobile est devenu le plus grand concurrent aux applications natives, et Google l'a bien compris. Si vous avez suivi la conférence de Google à Amsterdam , vous savez que l'avenir des sites web mobiles sont les Progressive Web Apps","readingTime":"9mn","authors":["captainjojo"],"categories":["javascript"],"content":"\nLe monde du web évolue. Le site web mobile est devenu le plus grand concurrent aux applications natives, et Google l'a bien compris. Si vous avez suivi la conférence de Google à Amsterdam , vous savez que l'avenir des sites web mobiles sont les Progressive Web Apps (le cas contraire, je vous invite à lire mon précédent article sur cet événement, disponible [ici](https://blog.eleven-labs.com/fr/progressive-web-apps-au-googledevsummit/)){:rel=\"nofollow noreferrer\"}. Ça tombe bien, cet article va vous permettre de mettre en place votre première \"PWA\".\n\n### Pré-requis :\n\nAvant de commencer ce tutoriel:\n\n- Je vous invite à mettre à jour ou installer nodejs, toutes les explications pour ce faire sont disponibles [ici](https://nodejs.org/en/){:rel=\"nofollow noreferrer\"}.\n- Il vous faudra aussi une version de chrome avancée, telle que Canary, disponible [ici](https://download-chromium.appspot.com/){:rel=\"nofollow noreferrer\"}\n- Une fois l'installation de votre chrome Canary, je vous invite à installer l'extension suivante, disponible [ici](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk){:rel=\"nofollow noreferrer\"}\n- Durant l'ensemble du tutoriel, nous allons suivre le projet git suivant, disponible [ici](https://github.com/CaptainJojo/pwa){:rel=\"nofollow noreferrer\"}\n\n\n### Étape 1, l'installation :\n\nL'installation du projet est très simple (suivez le README) ou les étapes suivantes :\n\n```sh\ngit clone git@github.com:CaptainJojo/pwa.git\n```\n\nPuis allez dans le répertoire pwa et lancez l'installation.\n\n```sh\ncd pwa &amp;&amp; npm install\n```\n\nUne fois l'installation terminée, vous n'avez plus qu'à lancer le serveur.\n\n```sh\nnpm start\n```\n\nSi tout se passe bien, l'application est disponible sur [cette adresse localhost](http://localhost:8080/){:rel=\"nofollow noreferrer\"}.\n\nVous pouvez alors naviguer dans l'application, son seul but étant d'avoir quelques urls et d'afficher des images (ce qui n'a que peu d'intérêt). Je vous invite à lancer l'extension installée plus tôt. Vous devez arriver sur cette page :\n\n![Lighthouse Step1](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-18.16.05.png)\n\nCette extension génère une note sur 100 pour votre application. Plus la note est proche de 100, plus votre application est une progressive web app. Comme vous pouvez le lire, il y a deux choses principales qui permettent de gagner des points : la mise en oeuvre d'un service worker qui permet d'avoir une application offline et la mise en place d'un manifest notifiant le navigateur que \"vous êtes une progressive web app\" et donc installable sur votre téléphone.  Nous allons commencer par mettre en place le service worker.\n\n### Étape 2, le service worker :\n\nLe service worker est un simple fichier js à enregistrer dans le navigateur (s'il est compatible), une fois enregistré, il peut lancer du code sans que vous soyez connecté à internet. La première chose à faire est donc d'enregistrer un fichier js dans le navigateur.\nNous allons tout d'abord créer un fichier vide sw.js dans le dossier public.\n\n```sh\ntouch public/sw.js\n```\n\nPuis, pour enregistrer le service worker, il vous suffit d'ajouter le code suivant dans le fichier public/index.html\n\n```javascript\n<script>;\nif('serviceWorker' in navigator) {\n  navigator.serviceWorker\n           .register('/sw.js')\n           .then(function() { console.log(\"Service Worker Registered\"); });\n}\n</script>;\n```\n\nVous pouvez retrouver cette étape [ici](https://github.com/CaptainJojo/pwa/compare/step1-register-sw){:rel=\"nofollow noreferrer\"}.\n\nIl vous suffit alors de relancer le serveur. Si vous allez sur http://localhost:8080 et que vous ouvrez l'outil de développement, vous trouverez l'onglet application qui vous permet de gérer l'état de votre PWA. Je vous invite à cliquer sur \"Service Workers\" pour vérifier que vous avez bien un service enregistré pour votre site.\n\n![Enregistrer votre service worker](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-19.34.26.png)\n\nFermez l'outil de développement et relancez l'extension Lighthouse.\n\n![LightHouse - Enregistrez votre service worker](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-19.36.15.png)\n\nBravo, vous avez gagné des points ! Passons à la suite.\n\n### Étape 3, le offline :\n\nMaintenant que vous avez enregistré votre service nous allons mettre en cache le site pour vous permettre d'avoir un site visible en offline.\nPour cela, il suffit d'agrémenter le fichier sw.js. Si vous lisez la norme du W3C sur le service worker, disponible [ici](https://www.w3.org/TR/service-workers/){:rel=\"nofollow noreferrer\"}, vous verrez qu'il fonctionne comme suit : il lit des événements javascript et, en fonction de ce qui a été lu, il effectue une action. Nous allons commencer par l’événement 'install' qui va vous permettre de mettre en cache l'ensemble des pages statiques de votre site. Voici le code à ajouter dans le fichier public/sw.js :\n\n```javascript\nself.addEventListener('install', e =>; {\n  e.waitUntil(\n    caches.open('pwa').then(cache =>; {\n      return cache.addAll([\n        '/',\n        '/sw.js',\n        '/index.html',\n        '/planets',\n        '/bundle.js',\n        '/index.css',\n        '/cat.png',\n        '/duck.png',\n        '/donut.png',\n        '/racoon.png',\n      ])\n      .then(() =>; self.skipWaiting());\n    })\n  )\n});\n```\n\nComme vous pouvez le lire, quand l’événement est lancé, on ouvre un cache au nom 'pwa' et on lui ajoute les fichiers statiques.\nSi vous relancez l'application, vous pouvez alors mettre en \"offline\" dans l'outil de développement puis dans l'onglet applications, bien que cela ne devrait pas encore fonctionner car nous n'avons pas pris en compte les appels serveur. Pour cela, vous allez récupérer l’événement 'fetch' qui permet de récupérer ces appels serveurs en question.\n\nVous ajoutez dans le fichier public/sw.js, le code suivant :\n\n```javascript\nself.addEventListener('fetch', event =>; {\n  event.respondWith(\n    caches.match(event.request).then(response =>; {\n      return response || fetch(event.request);\n    })\n  );\n});\n```\n\nCe que l'on fait est simple, vous récupérez chaque requête et la mettez dans le cache.\nVous retrouverez cette étape [ici](https://github.com/CaptainJojo/pwa/compare/step1-register-sw...step2-service-worker-offline){:rel=\"nofollow noreferrer\"}.\n\nSi vous relancez l'application, vous pouvez voir dans l'outil de développement, onglet application, un lien pour voir ce que contient votre cache (Cache Storage), vous y retrouvez l'ensemble des fichiers statiques.\n\n![Service worker - Cache Storage](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-19.54.56.png)\n\nPuis, encore une fois, fermez l'outil de développement, et relancez LightHouse.\n\n![LightHouse - Offline](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-19.57.34.png)\n\nVous êtes sur la bonne voie, mais il y a une méthode encore meilleure pour initialiser votre cache.\n\n### Étape 4, PreCache du service worker :\n\nComme vous avez pu le voir, il est très fastidieux de mettre chaque fichier statique dans le service worker, Google y a pensé et a mis en place plusieurs outils pour faciliter le développement.\n\nVous allez utiliser le projet sw-précache disponible sur [github](https://github.com/GoogleChrome/sw-precache), ce dernier permet de générer le service worker via un fichier [Gulp](http://gulpjs.com/){:rel=\"nofollow noreferrer\"}.\n\nVous n'avez plus qu'à ajouter dans le package.json.\n\n```json\n\"sw-precache\": \"^3.2.0\",\n\"gulp\": \"^3.9.1\",\n```\n\nEt faire un\n\n```sh\nnpm install\n```\n\nVous pouvez alors ajouter un fichier Gulpfile.js qui contiendra la configuration pour votre service worker.\n\n```javascript\n'use strict';\n\n// Include Gulp &amp; Tools We'll Use\nvar gulp = require('gulp');\n\ngulp.task('generate-service-worker', function(callback) {\n  var path = require('path');\n  var swPrecache = require('sw-precache');\n  var rootDir = 'public';\n\n  swPrecache.write(path.join(rootDir, 'sw.js'), {\n    staticFileGlobs: [rootDir + '/**/*.{js,html,css,png,jpg,gif}'],\n    stripPrefix: rootDir,\n    navigateFallback: '/',\n    runtimeCaching: [{\n      urlPattern: /\\/planet/,\n      handler: 'cacheFirst'\n    }],\n    verbose: true\n\n  }, callback);\n});\n```\n\nEn lisant le fichier, vous pouvez voir que lors de l'initialisation du sw-precache vous avez plusieurs clés de configuration. La première est la 'staticFileGlobs' qui permet d'aller chercher l'ensemble des fichiers statiques. Vous avez ensuite le 'runtimeCaching' qui permet de cacher les requêtes qui vont vers le serveur. Il vous suffit de choisir un pattern d'url et une façon de cacher, sachant qu'il existe plusieurs 'handler' :\n\n\n- cacheFirst : Prend ce qui se trouve dans le cache, s'il est vide, envoie la requête au serveur.\n- networkFirst : Envoie le requête au serveur, s'il ne répond pas prend ce qu'il y a dans le cache.\n- fastest : Envoie la requête au serveur et va chercher dans le cache, prend celui qui répond en premier.\n\nPour générer le fichier, il ne vous reste plus qu'à lancer la commande suivante :\n\n```sh\ngulp generate-service-worker\n```\n\nJe vous invite à lire le fichier généré que vous pouvez trouver à la place de l'ancien /public/sw.js\nSi vous relancez l'application normalement vous n'avez aucune modification.\nVous pouvez retrouver l'étape [ici](https://github.com/CaptainJojo/pwa/compare/step2-service-worker-offline...step3-sw-precache){:rel=\"nofollow noreferrer\"}.\n\n### Étape 5, le manifest :\n\nLa mise en place du manifest est une étape simple mais qui permet de signifier aux navigateurs que vous avez créé votre première PWA.  Vous pouvez retrouver la spécification sur le site [W3C](https://w3c.github.io/manifest/){:rel=\"nofollow noreferrer\"}.\n\nJe vous donne l'exemple typique que l'on trouve dans tous les bons tutoriels.\n\n```json\n{\n  \"name\": \"My PWA\",\n  \"short_name\": \"PWA\",\n  \"icons\": [{\n        \"src\": \"images/touch/icon-128x128.png\",\n        \"sizes\": \"128x128\",\n        \"type\": \"image/png\"\n      }, {\n        \"src\": \"images/touch/apple-touch-icon.png\",\n        \"sizes\": \"152x152\",\n        \"type\": \"image/png\"\n      }, {\n        \"src\": \"images/touch/ms-touch-icon-144x144-precomposed.png\",\n        \"sizes\": \"144x144\",\n        \"type\": \"image/png\"\n      }, {\n        \"src\": \"images/touch/chrome-touch-icon-192x192.png\",\n        \"sizes\": \"192x192\",\n        \"type\": \"image/png\"\n      }],\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#3E4EB8\",\n  \"theme_color\": \"#2F3BA2\"\n}\n```\n\nIl est très lisible puisque vous y trouvez le nom de votre application, les icônes utilisés lors de l'installation sur le téléphone et les couleurs pour le splashScreen.  La clé 'display' vous permet de choisir l'orientation du téléphone lors de l'installation, soit horizontale, verticale ou 'standalone' qui permet de laisser l'utilisateur choisir.\n\nUne fois le fichier rempli, vous devez signifier son emplacement pour le navigateur. Dans le header de la page, il faut ajouter dans le fichier /public/index.html :\n\n```html\n <link rel=\"manifest\" href=\"/public/manifest.json\">;\n```\n\nVous pouvez retrouver cette étape [ici](https://github.com/CaptainJojo/pwa/compare/step3-sw-precache...step4-manifest){:rel=\"nofollow noreferrer\"}.\n\nSi vous relancez l'application et que vous allez dans l'outil de développement, onglet application, vous trouverez les propriétés de votre manifest. Il est même possible d'installer votre application en cliquant sur 'Add to homescreen'.\n\n![Propriétés du manifest](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-21.10.55.png)\n\nEt encore une fois, fermez l'outil de développement et lancez l'extension LightHouse.\n\n![LightHouse - Manifest](/imgs/posts/2016-07-20-votre-premiere-pwa/capture-decran-2016-07-18-a-21.12.32.png)\n\nVous y êtes, votre application est une Progressive Web App !\nEn conclusion, ce n'est pas compliqué de mettre en place une PWA, maintenant il faut jouer avec, tester le cache, etc... Il existe d'autres fonctionnalités sympa comme la mise en place des push notifications, le fait de contrôler le bluetooth...\nPour en apprendre encore plus, vous pouvez trouver des tutoriels super intéressants dont je me suis inspiré, chez [Google](https://codelabs.developers.google.com/){:rel=\"nofollow noreferrer\"}.\n"}