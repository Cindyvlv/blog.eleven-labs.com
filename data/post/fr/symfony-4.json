{"date":"2018-06-11T00:00:00.000Z","title":"Symfony 4","excerpt":"Nous allons voir les changements et nouveautés que Symfony 4 nous apporte.","readingTime":"4mn","authors":["amoutte"],"categories":["php"],"content":"\nCela fait maintenant plus de 6 mois que Symfony 4 est sorti (30 novembre 2017). Le principal changement de Symfony 4 est sans aucun doute la manière d'initialiser un projet mais aussi d'ajouter des fonctionnalités.\n\n⚠️ N'oubliez pas que Symfony 4 requiert maintenant **PHP 7.1.3** minimum !\n\n## Flex\n\nCette nouvelle manière d'initialiser un projet Symfony utilise un nouvel outil nommé [Flex](https://github.com/symfony/flex).\nFlex est un plugin composer destiné à aider le développeur à créer des applications Symfony.\n\n> ℹ️ C'est pourquoi il remplace naturellement la [Symfony standard edition](https://github.com/symfony/symfony-standard) mais aussi l'[installeur Symfony](https://github.com/symfony/symfony-installer).\n\nPour ce faire Flex utilise des `recipes` (ɹɛ.sɪ.piz).\nUne `recipe` est un fichier `manifest.json` qui contient différentes actions à effectuer durant l'installation d'un composant logiciel.\nIl permet entre autres de créer des dossiers, copier des fichiers de configuration, ajouter des variables d'environnement (.env) etc...\nPour la liste complète des actions, je vous laisse consulter la [documentation](https://github.com/symfony/recipes/blob/master/README.rst).\n\nLes `recipes` sont stockées dans deux repository :\n * [main recipes repository](https://github.com/symfony/recipes) qui regroupe les `recipes` de haute qualité. Repository par défaut de Flex.\n * [contrib recipes repository](https://github.com/symfony/recipes-contrib) qui regroupe les `recipes` créé par la communauté, Flex demandera votre permission avant l'installation de ces `recipes`.\n\n> ℹ️ On voit également l'apparition du site [symfony.sh](https://symfony.sh/) qui permet de trouver des `recipes`.\n\n### Utilisation\n\nOk, nous allons maintenant voir comment initialiser un projet Symfony 4 avec Flex.\n\n```\n$ composer create-project symfony/website-skeleton my-project\n\n```\n\n> ℹ️ La `recipe` `symfony/skeleton` est également disponible si vous souhaitez initialiser un projet plus léger.\n> En effet elle ne requiert que :\n> * symfony/console\n> * symfony/flex\n> * symfony/framework-bundle\n> * symfony/lts\n> * symfony/yaml\n\nNormalement Flex vous aura créé la structure de dossier suivante.\n\n```\nassets        les fichiers ressources statics (image, js, css, ...)\nbin           les executables (console, phpunit, ...)\nconfig        les fichiers de configuration de l'application\npublic        les fichiers disponibles en web (front controller index.php)\nsrc           les fichiers sources de l'application\ntemplates     les fichiers de templating (twig, html, ...)\ntests         les fichiers de tests\ntranslations  les fichiers de traduction\nvar           les fichiers temporaires (cache, logs, upload, ...)\nvendor        les fichiers des librairies tièrces\n```\n\nPour avoir votre première page fonctionnelle :\n\n* crée le template dans le fichier `my-project/templates/index.html.twig`\n\n\n```twig\n{% extends 'base.html.twig' %}\n{% block body %}Bienvenue{% endblock %}\n```\n\n\n* crée le controller dans le fichier `my-project/src/Controller/DefaultController.php`\n\n\n```php\n<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController extends Controller\n{\n    /**\n     * @Route(\"/\", name=\"index\")\n     */\n    public function index()\n    {\n        return $this->render('index.html.twig');\n    }\n}\n```\n\n\n> Attention, le nom des contrôleurs n'est plus suffixé de `Action`\n\n## Mais où sont les bundles ?\n\nLa bonne nouvelle c'est que vous n'êtes plus obligés d'avoir de bundle dans le dossier src (AppBundle).\nLa mauvaise nouvelle c'est... heu... Ha non il n'y en a pas !\nLe seul changement concernant les bundles c'est qu'il faut maintenant les enregistrer dans le fichier `config/bundles.php`.\n\n\n```php\n<?php\n\nreturn [\n    // ...\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class => ['all' => true],\n    Symfony\\Bundle\\WebServerBundle\\WebServerBundle::class => ['dev' => true],\n    // ...\n];\n```\n\n\n## Conclusion\n\nAvant Symfony 4 nous avions plusieurs choix :\n\n* Utiliser une distribution Symfony (standard, cmf-standard, rest ...) et/ou un [microkernel](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php).\n> Solution prête à l'emploi (ORM, swiftmailer, twig, ...).\n> Mais pouvant embarquer des fonctionnalités non voulues (obligation de changer/désactiver).\n\n* Utiliser les composants de symfony comme des librairies tierces et/ou utilisation de [Silex](https://github.com/silexphp/Silex)\n> Solution plus légère.\n> Requiert une bonne connaissance des composants et librairies pour pouvoir initialiser le tout avec du cache, de la configuration.\n\nSymfony 4 a donc été retravaillé afin que l'installation n'embarque plus de superflu.\nIl facilite l'ajout des fonctionnalités dont vous avez besoin selon le cycle de vie de votre projet.\n\nPour finir, voici mon top 3 parmi les [changements de Symfony 4.0](https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md) :\n* Nouvelle structure de dossier.\n* Le `LockHandler`a disparu en faveur de `Symfony\\Component\\Lock\\Store\\FlockStore`/`Symfony\\Component\\Lock\\Store\\FlockStore\\SemaphoreStore`\n* Le composant ClassLoader a disparu en faveur de l'autoload de composer.\n\nPS : Je ne peux que vous conseiller de revisiter la liste des [composants de Symfony](https://github.com/symfony/symfony/tree/master/src/Symfony/Component),\ncar dorénavant vous devrez soit utiliser une `recipe` existante soit composer votre besoin avec les composants et librairies tierces.\n\n"}