{"date":"2021-10-20T00:00:00.000Z","title":"Le d√©veloppement sous Linux depuis Windows 10 avec WSL 2","excerpt":"D√©velopper sans contraintes vos applications sous Linux depuis Windows 10 grace √† WSL 2","readingTime":"8mn","authors":["gcanal"],"categories":[],"content":"\n<!--\n<div class=\"admonition example\" markdown=\"1\"><p class=\"admonition-title\">Example</p>\n\n</div>\n-->\n\nWSL pour Windows SubSystem Linux, est une solution d√©velopp√©e par Microsoft vous permettant de faire tourner diff√©rentes distributions Linux sur Windows 10.\n\n## Un peu de contexte\n\n<div class=\"admonition note\" markdown=\"1\"><p class=\"admonition-title\">Note</p>\n\nPour plus d'informations sur l'impl√©mentation de WSL 2, une [vid√©o de pr√©sentation](https://www.youtube.com/watch?v=lwhMThePdIo) et [des slides](https://medius.studios.ms/video/asset/PPT/B19-BRK3068) sont disponibles.\n\n</div>\n\nWSL premier du nom, est un driver pour Windows impl√©mentant l'API du noyau Linux, qui transforme les appels au noyau en instructions compatibles Windows NT. Ce qui pose de nombreux probl√®mes de compatibilit√© notamment avec l'API permettant d'acc√©der au syst√®me de fichiers.\n\n![wsl1-architecture]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/wsl1-architecture.png  \"Architecture WSL 1\")\n\nPour r√©soudre les diff√©rents probl√®mes de compatibilit√©, de performances et pour r√©duire les co√ªts de maintenance de WSL, la version 2 fait tourner [un v√©ritable noyau Linux](https://github.com/microsoft/WSL2-Linux-Kernel) compil√© et maintenu par Microsoft dans [Hyper-V](https://fr.wikipedia.org/wiki/Hyper-V) (qui est un [hyperviseur de type 1](https://fr.wikipedia.org/wiki/Hyperviseur#Type_1_:_natif)).\n\n![wsl2-architecture]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/wsl2-architecture.png  \"Architecture WSL 2\")\n\n## Activation de WSL 2\n\n√Ä la r√©daction de ce guide, pour profiter de WSL2, il vous faudra rejoindre le [programme Windows Insider](https://insider.windows.com/fr-fr/getting-started/)\n\n- Ouvrez les param√®tres [Windows Insider](ms-settings:windowsinsider \"Ouvre les param√®tres Windows Insider\")\n- Choisir le type de version d'√©valuation **\"Rapide\"**\n- Ouvir [Windows Update](ms-settings:windowsupdate \"Ouvre Windows Update\")\n- Cliquer sur \"Rechercher les mises √† jour\" pour t√©l√©charger le dernier build\n\n![insider]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/insider.png)\n\nLancer PowerShell en tant qu'administrateur\n\n- <kbd>‚äû Win</kbd> + <kbd>R</kbd>\n- Saisir `powershell`\n- <kbd>Ctrl</kbd> + <kbd>‚áß Shift</kbd> + <kbd>‚Üµ Entr√©e</kbd>\n\nActiver les fonctionnalit√©s optionnelles n√©cessaires\n\n```powershell\nEnable-WindowsOptionalFeature -Online -NoRestart -FeatureName VirtualMachinePlatform\nEnable-WindowsOptionalFeature -Online -NoRestart -FeatureName Microsoft-Windows-Subsystem-Linux\nRestart-Computer\n```\n\n\n<div class=\"admonition important\" markdown=\"1\"><p class=\"admonition-title\">Important</p>\n\nVotre ordinateur va red√©marrer pour activer les fonctionnalit√©s optionnelles de Windows.\n\n</div>\n\n## Installer une distribution Linux\n\nVous pouvez obtenir la liste des distribution disponibles [ici](https://aka.ms/wslstore \"Lien Microsoft Store\")\n\nDans ce guide nous allons installer Ubuntu, libre √† vous d'exp√©rimenter avec d'autres distributions.\n\n- Installer Ubuntu puis cliquer sur le bouton **Lancer** _(un terminal s'ouvre alors)_\n- Choisir un nom d'utilisateur et un mot de passe.\n- Quitter le terminal\n- Dans Powershell, lister les distributions Linux install√©es\n\n```powershell\nwsl --list --verbose\nNAME      STATE           VERSION\n* Ubuntu    Stopped         1\n```\n\nPasser Ubuntu en WSL2\n\n```powershell\nwsl --set-version Ubuntu 2\n```\n\nLancer Ubuntu et se positionner dans le r√©pertoire de l'utilisateur courant.\n\n```powershell\nwsl ~ -d Ubuntu\n```\n\n## Installer Docker\n\nArriv√© √† cette √©tape, vous vous trouvez maintenant dans le shell Ubuntu.\n\nPour installer Docker, nous allons passer par le [script d'installation de Docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script)\n\n```bash\n# Installation de Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n```\n\n```bash\n# On ajoute l'utilisateur courant au groupe Docker\nsudo usermod -aG docker $USER\n```\n\n```bash\n# On se reconnecte avec l'utilisateur courant pour appliquer les droits\nsu - $USER\n```\n\n```bash\n# On lance le d√©mon Docker\nsudo service docker start\n```\n\n```bash\n# Tester Docker (Ctrl+C pour stopper le conteneur)\ndocker run --rm -it -p 80:80 containous/whoami\n```\n\nOuvrir votre navigateur et visiter <http://localhost>\n\n<div class=\"admonition note\" markdown=\"1\"><p class=\"admonition-title\">Note</p>\n\nLes distributions Linux con√ßues pour tourner dans WSL2 ne sont pas livr√©es avec des scripts de d√©marrage tels que System V, Systemd ou encore Upstart. Ce qui veut dire qu'il faudra lancer vous-m√™me le d√©mon docker au d√©marrage d'Ubuntu via `sudo service docker start`.\n\n</div>\n\n<div class=\"admonition info\" markdown=\"1\"><p class=\"admonition-title\">√Ä savoir</p>\n\nPar d√©faut Windows arr√™te les conteneurs Linux au bout de quelques secondes en l'absence de t√¢ches de fond. Si telle est votre intention, pensez √† arr√™ter le d√©mon docker via `sudo service docker stop` avant d'√©x√©cuter la commande `exit` ou de fermer votre terminal.\n\n</div>\n\n## Utiliser Systemd\n\nSi vous souhaitez d√©marrer automatiquement des services au lancement d'Ubuntu, [Shayne Sweeney](https://github.com/shayne) a √©crit [un guide plut√¥t complet](https://github.com/shayne/wsl2-hacks) permettant de lancer Systemd au d√©marrage d'Ubuntu.\n\n<div class=\"admonition attention\" markdown=\"1\"><p class=\"admonition-title\">Attention</p>\n\nLa section de l'article **Access localhost ports from Windows** n'est plus n√©cessaire car la derni√®re version de WSL 2 le fait d√©j√†.\n\n</div>\n\n<div class=\"admonition info\" markdown=\"1\"><p class=\"admonition-title\">Info</p>\n\nDans les grande lignes, l'astuce consiste √† remplacer le shell de l'utilisateur `root` par un script qui lance systemd et qui vous authentifie sur votre session utilisateur via `nsenter`\n\n</div>\n\n## Windows Terminal\n\n![Windows Terminal]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/windows-terminal.png  \"Windows Terminal\")\n\n[Windows Terminal](https://www.microsoft.com/fr-fr/p/windows-terminal-preview/9n0dx20hk701) ([source](https://github.com/microsoft/terminal)) est un terminal moderne, configurable et personnalisable qui centralise PowerShell, Cmd, Azure Cloud Shell et vos shells Linux en une seule application.\n\n### Personnalisation\n\nL'application est personnalisable via un fichier `.json`. Utilisez <kbd>Ctrl</kbd> + <kbd>,</kbd> pour y acc√©der ou utilisez l'interface de l'application.\n\n![windows-terminal-settings]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/windows-terminal-settings.gif  \"Param√©trage de Windows Terminal\")\n\nLe sch√©ma du fichier est d√©crit via JSON Schema, le lien est consultable via la propri√©t√© `$schema`. Si vous utilisez VSCode, vous aurez acc√®s √† de l'autocompl√©tion üéâ.\n\n- `profiles` contient toutes les configurations par d√©faut de chacun de vos shells\n- `schemes` vous permet de d√©clarer des th√®mes, utilisables par la suite dans le profil de votre shell via la propri√©t√© `colorScheme`.\n- `keybindings` vous permet de configurer vos raccourcis clavier\n\nPour plus d'informations sur la personnalisation de Windows Terminal, je vous invite √† consulter les articles de [Kayla Cinnamon](https://devblogs.microsoft.com/commandline/author/cinnamonmicrosoft-com/), Program Manager chez Microsoft mais aussi [cet article](https://www.hanselman.com/blog/NowIsTheTimeToMakeAFreshNewWindowsTerminalProfilesjson.aspx) de [Scott Hanselman](https://twitter.com/shanselman)\n\n\n<div class=\"admonition info\" markdown=\"1\"><p class=\"admonition-title\">Info</p>\n\nDes th√®mes pour Windows Terminal sont disponibles dans le d√©p√¥t Github [mbadolato/iTerm2-Color-Schemes](https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal). Personnellement, j'utilise le th√®me `Argonaut` pour mon shell Ubuntu.\n\n</div>\n\n### Copier/Coller\n\nWindows identifie les fins de lignes avec la s√©quence CRLF `\\r\\n`.\nSous Linux, les fins de lignes n'utilisent que le caract√®re LF `\\n`.\n\nPour √©viter de vous retrouver avec des doublements de lignes dans Windows Terminal quand vous collez du texte, je vous sugg√®re d'utiliser [AutoHotKey](https://www.autohotkey.com/), _(qui est un utilitaire permettant d'automatiser des t√¢ches sous Windows)_.\n\n![ahk-logo]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/ahk-logo.png  \"Logo de AutoHotKey\")\n\nOn va commencer par ouvrir le r√©pertoire des scripts lanc√©s au d√©marrage de Windows :\n\n- <kbd>‚äû Win</kbd> + <kbd>R</kbd>\n- Saisissez `shell:startup` puis <kbd>‚Üµ Entr√©e</kbd>\n- Cr√©ez un fichier `copy-paste-on-windows-terminal.ahk`\n- √âditez-le, et ajoutez le script suivant :\n\n```ahk\n#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.\nSendMode Input  ; Recommended for new scripts due to its superior speed and reliability.\nSetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.\n\n; Replace Windows line termination from CRLF to LF while copy/pasting into Windows Terminal\n#if WinActive(\"ahk_exe WindowsTerminal.exe\")\n    RemoveCrlfFromClipBoard() {\n        Var := Clipboard\n        Clipboard := RegExReplace(Var, \"\\r\\n?|\\n\\r?\", \"`n\")\n        return\n    }\n\n    RButton::\n    ^+v::\n        RemoveCrlfFromClipBoard()\n        MouseClick, Right\n        return\n#if\n```\n\n<div class=\"admonition info\" markdown=\"1\"><p class=\"admonition-title\">Info</p>\n\nPar d√©faut, dans Windows Terminal, l'op√©ration **coller** se fait via <kbd>üñ±Ô∏è Droit</kbd> ou la combinaison <kbd>Ctrl</kbd> + <kbd>‚áß Shift</kbd> + <kbd>V</kbd>. Le script les intercepte pour replacer les s√©quences `\\r\\n` par `\\n`\n\n</div>\n\n### Bug d'affichage\n\nWindows Terminal √©tant en \"Development Preview\", il existe encore des bugs qui peuvent ruiner votre exp√©rience utilisateur, mais dans l'ensemble, le terminal est plut√¥t stable et utilisable.\n\nSi vous rencontrez un bug d'affichage rendant l'interface compl√®tement noire en d√©pla√ßant la fen√™tre sur votre bureau...\n\n![windows-terminal-rendering-bug]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/windows-terminal-rendering-bug.png  \"Bug de rendu du Windows Terminal\")\n\n... Il suffit de renseigner une largeur initiale pour la fen√™tre de `110` via l'option `initialCols`. Cela fonctionne aussi avec des valeurs au-del√† de `130` ü§∑ (le myst√®re reste entier).\n\n## Lancer des applications graphiques Linux\n\nCommencez par installer un serveur X pour Windows tel que :\n\n- [X410](https://www.microsoft.com/fr-fr/p/x410/9nlp712zmn9q) (payant avec version d'essai),\n- ou encore [VcXsrv Windows X Server](https://sourceforge.net/projects/vcxsrv/) (open-source).\n\n<div class=\"admonition tip\" markdown=\"1\"><p class=\"admonition-title\">Astuce</p>\n\nSi vous utilisez X410, activez l'option **Allow Public Access**.\n\n![x410-public-access]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/x410-public-access.gif  \"X410 Allow Public Access\")\n\n</div>\n\n<div class=\"admonition tip\" markdown=\"1\"><p class=\"admonition-title\">Astuce</p>\n\nPour VcXsrv, utilisez l'utilitaire Xlaunch, conservez les options par d√©faut et choisissez **Disable Access Control**.\n\n![vcxsrv-configuration]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/vcxsrv-configuration.gif  \"Configuration de VcXsrv\")\n\n</div>\n\nPour finir, ajoutez dans le fichier de configuration de votre shell Linux  (ex: `.bashrc`, `.zshrc`)\n\n```shell\n# R√©cup√®re l'adresse IP permettant d'acc√®der au server X tournant sur Windows\nexport DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0\n```\n\nPuis lancez une application graphique\n\n```shell\napt update && apt install -y mesa-utils && glxgears\n```\n\nVous pouvez m√™me lancer les applications graphiques depuis Docker üê≥.\n[Jess Frazelle](https://github.com/jessfraz \"Profil Github de Jess Frazelle\"), dans son article [Docker Containers on the Desktop](https://blog.jessfraz.com/post/docker-containers-on-the-desktop/ \"Article en anglais: Docker Containers on the Desktop\") aborde en d√©tail la marche √† suivre. Son d√©p√¥t est disponible [ici](https://github.com/jessfraz/dockerfiles \"D√©p√¥t Github jessfraz/dockerfiles\")\n\n```shell\n# Exemple avec InkScape\ndocker run --rm -it -e DISPLAY jess/inkscape\n```\n\n## Les alias utiles\n\n√Ä ajouter dans votre fichier `.bashrc` ou `.zshrc`\n\n```bash\n# Rediriger la sortie d'une commande dans le presse-papier Windows\n# ex: cat ~/.ssh/id_rsa.pub | copy\nalias copy='clip.exe'\n\n# Permet d'ouvrir un fichier, un dossier ou une url dans Windows\nalias open=\"rundll32.exe url.dll,FileProtocolHandler\"\n\n# Alias d'`open` pour des raisons de compatibilit√©\nalias xdg-open=\"open\"\n```\n\n## Logiciels Windows compatibles avec WSL\n\n<div class=\"admonition attention\" markdown=\"1\"><p class=\"admonition-title\">Pr√©cision</p>\n\nCeci n'est pas une liste exhaustive, mais de plus en plus de logiciels pr√©voient le support de WSL 2.\n\n</div>\n\n\n### Visual Studio Code\n\n[VSCode](https://code.visualstudio.com/) pour Windows supporte WSL avec le module [Remote - WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)\n\n![vscode-remote-wsl]({{site.baseurl}}/assets/2019-10-25-le-developpement-sous-linux-depuis-windows-10-avec-wsl-2/wsl-readme.gif)\n\n### PHPStorm\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The 2019.3 Early Access Program gets close to the finish line. But we have something new for you in the fresh build ‚Äì WSL Support! <a href=\"https://t.co/PgVZbyYoAU\">https://t.co/PgVZbyYoAU</a> <a href=\"https://t.co/wvzdEOrYAo\">pic.twitter.com/wvzdEOrYAo</a></p>&mdash; JetBrains PhpStorm (@phpstorm) <a href=\"https://twitter.com/phpstorm/status/1187633307896430592?ref_src=twsrc%5Etfw\">October 25, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nL'[Early Access 2019.3 de PHPStorm](https://blog.jetbrains.com/phpstorm/tag/2019-3/) pour Windows ajoute le support de WSL et la fonctionnalit√© ne tardera pas √† rejoindre la version stable de L'IDE.\n"}