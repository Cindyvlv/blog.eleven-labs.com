{"date":"2011-11-01T00:00:00.000Z","title":"Authentification sur Symfony2","excerpt":"Nouveau tuto sur Symfony2, comme pour tous les sites nous avons souvent besoin de rendre une partie de ce dernier non visible pour le public. Pour cela, nous allons mettre en place le système d'authentification de Symfony.","readingTime":"7mn","authors":["captainjojo"],"categories":["php"],"content":"\nAttention ce code date du début de Symfony2 un nouveau tuto est en cours\n\nNouveau tuto sur Symfony2, comme pour tous les sites nous avons souvent besoin de rendre une partie de ce dernier non visible pour le public. Pour cela, nous allons mettre en place le système d'authentification de Symfony.\n\nPour commencer, il faut comprendre comment fonctionne le système d'authentification avec Symfony2.\nIl fonctionne en deux étapes, la première est l'authentification de l'utilisateur qui peut se faire de différentes manières :\n\n- un formulaire de login\n- http authentification\n- une authentification custom\n\nPuis l'étape de l'autorisation de l'utilisateur qui elle aussi peut s'effectuer de différentes manières :\n\n- le control par url\n- ACL\n- objets sécurisés\n\nDans notre exemple, nous allons créer une partie admin dans le projet, cette partie ne sera disponible que pour les utilisateurs ayant le rôle d'administrateur.\nTout ce passe dans le fichier app/config/security.yml, qui va nous permettre de mettre en place les pages que nous voulons protéger ainsi que la page de login.\nTout d'abord, nous allons ajouter un firewall en donnant le type d'authentificaiton que nous souhaitons, ici, c'est un formulaire de login qui aura pour accès l'url /login, pour la vérification du formulaire il aura comme url /login_check et enfin l'url de logout.\n\n\n```yaml\nsecurity:\n    firewalls:\n        assets:\n            pattern:  ^/(_(profiler|wdt)|css|images|js|favicon.ico)/\n            security: false\n        secured_area:\n            form_login:\n              login_path: /login\n              check_path:  /login_check\n            logout:\n                path: /logout\n                target: /\n```\n\n\nIl faut alors ajouter les zone d'access des utilisateurs, pour cela il faut ajouter access_control et mettre les rôles pour une serie d'url. Comme nous l'avons dit, nous voulons que la partie admin de notre site soit visible seulement pour les administrateurs.\n\n```yaml\nsecurity:\n    firewalls:\n        assets:\n            pattern:  ^/(_(profiler|wdt)|css|images|js|favicon.ico)/\n            security: false\n        secured_area:\n            pattern: ^/\n            anonymous: ~\n            form_login:\n              login_path: /login\n              check_path:  /login_check\n            logout:\n                path: /logout\n                target: /\n\n    access_control:\n        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY}\n        - { path: ^/admin, roles: ROLE_ADMIN }\n```\n\nCe qui fait que si l'url commence par /admin alors l'utilisateur doit avoir le rôle admin.\nMaintenant que nous savons comment l'utilisateur va s'authentifier et quelles url sont protégées, nous devons definir nos utilisateurs.\nDans ce système d'authentification c'est ce que l'on appelle le provider qui est le service de récupération des utilisateurs. Comme nous protégeons la partie admin de notre site, il n'y a pas besoin de stocker les utilisateurs nous avons seulement 2 utilisateurs.\n\n```yaml\nsecurity:\n    firewalls:\n        assets:\n            pattern:  ^/(_(profiler|wdt)|css|images|js|favicon.ico)/\n            security: false\n        secured_area:\n            pattern: ^/\n            anonymous: ~\n            form_login:\n              login_path: /login\n              check_path:  /login_check\n            logout:\n                path: /logout\n                target: /\n\n    access_control:\n        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n        - { path: ^/i, roles: IS_AUTHENTICATED_ANONYMOUSLY}\n        - { path: ^/admin, roles: ROLE_ADMIN }\n    providers:\n        in_memory:\n            users:\n                user:  { password: userpass, roles: [ 'ROLE_USER' ] }\n                admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }\n```\n\nComme on peut le voir dans le fichier, il y a deux utilisateurs dont un qui à le rôle admin, c'est avec celui-ci que nous pourront nous logguer.\nApres avoir configuré le fichier security.yml, nous devons definir les url de login et logout, pour cela il faut ouvrir le fichier routing.yml. Dans notre projet, nous utilisons app/config/routing.yml.\n\n```yaml\nlogin:\n    pattern:   /login\n    defaults:  { _controller: ClycksBundle:Default:login }\nlogin_check:\n    pattern:   /login_check\n\nlogout:\n    pattern: /logout\n    defaults:  { _controller: ClycksBundle:Default:logout }\n```\n\nPour login_check, il n'y a pas besoin de controller, Symfony le fait pour vous :).\nIl ne reste plus qu'à remplir le controller pour afficher le formulaire d'authentification.\n\n```php\n<?php\n// src/Clycks/ClycksBundle/Controller/;\nnamespace ClycksClycksBundleController;\n\nuse SymfonyBundleFrameworkBundleControllerController;\nuse SymfonyComponentSecurityCoreSecurityContext;\n\nclass ClycksController extends Controller\n{\n    public function loginAction()\n    {\n        $request = $this->getRequest();\n        $session = $request->getSession();\n\n        // Permet la récupération des erreurs\n        if ($request->attributes->has(SecurityContext::AUTHENTICATION_ERROR)) {\n            $error = $request->attributes->get(SecurityContext::AUTHENTICATION_ERROR);\n        } else {\n            $error = $session->get(SecurityContext::AUTHENTICATION_ERROR);\n        }\n\n        return $this->render('ClycksClycksBundle:Security:login.html.twig', array(\n            //Récupération du dernier username\n            'last_username' => $session->get(SecurityContext::LAST_USERNAME),\n            'error'         => $error,\n        ));\n    }\n\n    public function logoutAction()\n    {\n    }\n}\n```\n\nComme vous pouvez le voir, nous n'avons pas de code dans l'action logout à vous de mettre ce que vous souhaitez :)\nMaintenant nous allons afficher le formulaire dans le fichier login.html.twig.\n\n\n```twig\n{% if error %}\n    <div>{{ error.message }}</div>\n{% endif %}\n\n<form action=\"{{ path('login_check') }}\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"_username\" value=\"{{ last_username }}\" />\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"_password\" />\n\n    <input type=\"submit\" name=\"login\" />\n</form>\n```\n\n\nVoila maintenant votre partie admin est protégée, dans un prochain tuto j'expliquerai comment créer son propre provider.\n"}