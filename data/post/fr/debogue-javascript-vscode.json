{"date":"2019-06-05T00:00:00.000Z","title":"Déboguer efficacement React / Node.js sous VSCode ?","excerpt":"Nous avons tous utilisé des console.log() pour déboguer notre code JS. Javacript permet pourtant de faire du débogue pas à pas très simplement. Voyons ensemble à quel point cela sera rapide à mettre en place sur vos projet FRONT / BACK.","readingTime":"6mn","authors":["jgreaux"],"categories":["javascript"],"content":"\n## Introduction\n\nIl parait souvent ardu de mettre en place des débogues pas à pas sur des projets, ce qui nous pousse à nous contenter de faire des `console.log()` dans notre code.\nNous allons voir qu'avec **VSCode**, nous pouvons facilement déboguer du code **React** tout comme du code **Node.js**.\nEnsuite nous verrons comment déboguer une app Node.JS dans un container Docker.\nPour finir je vous donnerai une astuce pour ceux utilisant Docker + **NestJS**.\n\n## Déboguer une application REACT-APP\n\nCommençons par une application front.\nPour déboguer une application front React, vous avez 2 possibilités :\n- Le faire directement depuis la console de votre navigateur (Google/Firefox).\n- Le faire depuis votre éditeur de code comme VSCode ou Webstorm par exemple.\nIci, nous partirons sur le débogue directement dans l'IDE.\n\n### 1/ Créer une nouvelle app React create-react-app\n\nPour commencer il nous faut une application React, pour cela vous devez créer une application :\n\n```bash\nnpx create-react-app my-app\ncd my-app\nyarn start\n```\n\n### 2/ Extension Chrome Debugger\n\nDans la section des extensions de VSCode, installez l'extension nommée 'VSCode Debugger for Chrome'.\nUne fois l'installation effectuée, relancez VSCode.\n\n### 3/ Configurer VSCode\n\nComme vu ci-dessus, VSCode possède une section pour interpréter le débogue de JS.\nSauf que dans l'état, aucune configuration n'est encore faite sur le projet React.\n\nAllez dans la section de débogage de VSCode, et cliquez sur la molette puis sélectionnez google chrome.\nVSCode va vous ouvrir un fichier launch.js, avec une configuration par défaut pour fonctionner avec google Chrome.\nYeah, exactement ce qu'il nous faut !\n\nLe fichier se nomme `launch.js`, et s'ajoute à la racine de votre projet dans un dossier `.vscode`.\n\n`.vscode/launch.js` :\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Chrome\", // ajouter un nom a la conf\n            \"type\": \"chrome\", // On le lance avec chrome, donc le type est chrome\n            \"request\": \"launch\",\n            \"url\": \"http://localhost:3000\", // URL d'acces\n            \"webRoot\": \"${workspaceRoot}/src\" // Où se situe le point d'entrée\n        }\n    ]\n}\n```\n### 4/ Lancer l'application\n\nIl ne vous reste plus qu'à mettre un point d'arrêt dans le code et à cliquer sur le bouton play dans la section \"déboguer\" de VSCode, qui va ouvrir un navigateur chrome et lancer votre application front.\n\n## Déboguer une application Node.js\n\nMaintenant que nous avons vu la partie FRONT sous React, passons à la partie BACK avec du Node.js sous express.\n\n### 1/ Installation d'un projet Node.js\n\nNous allons partir ici sur une application Node.js & express.\n\n```bash\nyarn init\nyarn add express\n```\nEnsuite il faut créer un `index.js` :\n\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.get('/', function (req, res) {\n  const number = Math.floor(Math.random() * Math.floor(100));\n  res.send('Hello World! ' + number);\n})\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!')\n})\n```\n\nNous sommes prêts, nous pouvons maintenant passer à la configuration de notre fichier launch.js.\n\n### 2/ Configurer launch.js\n\nAvant toute chose, Node.js nous permet de lancer notre code avec un mode debogue.\nPour cela, il faut ajouter --inspect a notre commande :\n\n`node --inspect index.js`\n\nPar défaut, Node.js va créer un webSocket sur le port 9229 sur l'adresse 127.0.0.1.\n\nComme pour la partie front, nous avons besoin de créer un fichier `.vscode/launch.js`\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\", // nous voulons déboguer du node\n            \"request\": \"launch\", // nous voulons exécuter la commande de lancement de node\n            \"name\": \"Launch node test\", // ajouter un nom a la conf\n            \"program\": \"${workspaceFolder}/index.js\" // indiquer ici\n        }\n    ]\n}\n```\n\nExecutez la configuration, VSCode vous ouvrira une console en lancant cette commande :\n\n```bash\nnode --inspect-brk=XXXX index.js\n```\n\nVous pouvez maintenant mettre un point d'arrêt.\n\n## Deboguer une app Node.js sous Docker\n\nReprenez le projet précédent et ajoutez-y les fichiers suivants :\n\n**docker-compose.yml**:\n```yml\nversion: '3.3'\n\nservices:\n  api:\n    build: ./\n    working_dir: /app\n    volumes:\n      - \".:/app:cached\"\n    ports:\n      - 9229:9229 #On ouvre le port 9229 qui est le port de debogue par défaut\n      - 3000:3000\n```\n\n**Dockerfile**:\n\n```Dockerfile\nFROM node:8-alpine\n\n# Create app directory\nWORKDIR /app\n\n# Bundle app source\nCOPY . /app/\n\n# yarn install\nRUN yarn\n\nEXPOSE 9229 3000\nCMD [ \"yarn\", \"start:debug-docker\"]\n```\n\nDans le fichier Dockerfile, nous lançons la commande **start:debug-docker**, nous devons donc la rajouter dans notre fichier package.json :\n\n```javascript\n{\n  ...\n  \"scripts\": {\n    \"start:debug-docker\": \"node --inspect=0.0.0.0:9229 index.js\"\n  },\n  ...\n}\n```\n\nEnfin, nous devons rajouter une configuration dans le fichier launch.js :\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        ...,\n        {\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"name\": \"Launch docker node debug\",\n            \"port\": 9229,\n            \"address\": \"localhost\",\n            \"localRoot\": \"${workspaceFolder}\",\n            \"remoteRoot\": \"/app\"\n        }\n    ]\n}\n```\n\nVous pouvez maintenant lancer `docker-compose up` et lancer le débogueur 'launch docker node debug'.\n\n## Déboguer une app NestJS sous Docker\n\nSi vous utilisez NestJS, il faut effectuer une petite modification pour le faire fonctionner sous Docker.\nComme nodemon est utilisé pour le développement en local sur NestJS, il faut lui ajouter une configuration spécifique.\n\nAjoutez un fichier `nodemon-docker-debug.json`\n\n```json\n{\n  \"watch\": [\"src\"],\n  \"ext\": \"ts\",\n  \"ignore\": [\"src/**/*.spec.ts\"],\n  \"exec\": \"tsc && node --inspect=0.0.0.0:2992 ./dist/src/main.js\"\n}\n```\nDans le package.json il vous suffit de créer une nouvelle commande que votre Dockerfile exécutera.\n\n`package.json`\n\n```javascript\n{\n  ...\n  \"scripts\": {\n    ...\n    \"start:debug-docker\": \"nodemon --config nodemon-docker-debug.json\",\n    ...\n  },\n  ...\n}\n```\n\n## Conclusion\n\nVous n'avez maintenant plus d'excuses pour utiliser des `console.log()` sur vos projets.\nVous trouverez tous les exemples sur mon github à cette adresse : [https://github.com/JeremyGreaux/debug-javascript](https://github.com/JeremyGreaux/debug-javascript)\n\n\nN'hésitez pas à partager cet article s'il vous a plu ! :)\n"}