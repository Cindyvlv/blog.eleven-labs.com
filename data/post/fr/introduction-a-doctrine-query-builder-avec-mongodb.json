{"date":"2015-10-06T00:00:00.000Z","title":"Introduction à Doctrine Query Builder avec MongoDB","excerpt":"Je vais parler du query builder (constructeur de requête) Doctrine pour faire des requêtes vers une base de données MongoDB.","readingTime":"8mn","authors":["tthuon"],"categories":["php"],"content":"\nBonjour à tous,\n\nJe vais parler du query builder (constructeur de requête) Doctrine pour faire des requêtes vers une base de données MongoDB.\n\nSi vous voulez suivre les exemples et les tester, il est nécessaire d'installer le bundle [DoctrineMongoDBBundle.](http://symfony.com/doc/current/bundles/DoctrineMongoDBBundle/index.html){:rel=\"nofollow noreferrer\"}\n\n## Qu'est-ce que c'est ?\n\nLe query builder est une classe qui va permettre de créer des requêtes à la base de données en passant par des objets et méthodes. Il facilite l'écriture de requête complexe.\n\nPrenons un exemple avec une liste d'articles dans la collection \"articles\" :\n\n```js\n[\n    {\n        \"title\": \"Mon article\",\n        \"tags\": [\n            {\n                \"label\": \"article\"\n            },\n            {\n                \"label\": \"test\"\n            }\n        ],\n        \"publication\": {\n            \"status\": true,\n            \"startDate\": \"2015-10-04T11:00:00+0200\",\n            \"endDate\": \"2016-10-04T11:00:00+0200\"\n        }\n    },\n    {\n        \"title\": \"Mon second article\",\n        \"tags\": [\n            {\n                \"label\": \"article\"\n            },\n            {\n                \"label\": \"second\"\n            }\n        ],\n        \"publication\": {\n            \"status\": true,\n            \"startDate\": \"2015-01-04T11:00:00+0200\",\n            \"endDate\": \"2015-02-04T11:00:00+0200\"\n        }\n    }\n]\n```\n\nJe veux avoir l'article avec le titre \"Mon second article\" en simple query mongo:\n\n```\ndb.articles.find({\"title\":\"Mon second article\"});\n```\n\nAvec le query builder:\n\n```php\n<?php\n\n$article = $this->createQueryBuilder()\n    ->find()\n    ->field('title')->equals('Mon second article')\n    ->getQuery()\n    ->execute();\n```\n\nAvec le query builder, on va rester dans le monde de l'objet et manipuler exclusivement des objets.\n\n## Le query builder et Symfony\n\nDans Symfony, toutes les méthodes qui vont effectuer des requêtes à la base de données se situent dans les repository.\n\nJe veux créer une méthode pour retrouver les articles avec un tag spécifique. Je vais donc créer une méthode \"getArticleByTag\" dans le repository tag.\n\n```php\n<?php\nnamespace App\\Appbundle\\Repository;\n\nuse Doctrine\\ODM\\MongoDB\\DocumentRepository;\n\nclass ArticleRepository extends DocumentRepository\n{\n    public function getArticleByTag($tag)\n    {\n        return $this->createQueryBuilder()\n              ->find()\n              ->field('tag')->equals($tag)\n              ->getQuery()\n              ->execute();\n    }\n}\n```\n\n$this-&gt;createQueryBuilder() va me donner une instance de Doctrine\\\\ODM\\\\MongoDB\\\\Query\\\\Builder . Avec cette instance, je vais avoir accès à un ensemble d'expressions pour construire ma requête. Les expressions, ce sont les différents opérateurs Mongo. Dans cet exemple, -&gt;find() -&gt;field() -&gt;equal() sont des expressions. Chacune d'elles sont des instances de Doctrine\\\\ODM\\\\MongoDB\\\\Query\\\\Expr .\n\nPour mettre à jour un document, j'utilise le même principe.\n\n```php\n<?php\nnamespace App\\Appbundle\\Repository;\n\nuse Doctrine\\ODM\\MongoDB\\DocumentRepository;\n\nclass ArticleRepository extends DocumentRepository\n{\n    public function updateTagArticle($title, array $tags)\n    {\n        return $this->createQueryBuilder()\n              ->update()\n              ->field('title')->equals($title)\n              ->field('tag')->set($tags)\n              ->getQuery()\n              ->execute();\n    }\n}\n```\n\nPour mettre à jour un article qui a pour titre \"Mon article\", je dois indiquer que je veux le document avec un titre égal à \"Mon article\" : -&gt;field('title')-&gt;equals(\"Mon article\") . Ensuite, je mets -&gt;field('tags')-&gt;set($tags) pour mettre à jour mon champs \"tags\".\n\n## Ajouter des expressions\n\nLe builder de base donne un bon nombre d'expressions. Mais parfois, ce n'est pas suffisant. Pour reprendre l'exemple avec les articles, je veux avoir tous les articles publiés à la date d'aujourd'hui. Je vais donc ajouter une expression isPublished(\\\\DateTime $datetime) .\n\nJe vais étendre la classe Doctrine\\\\ODM\\\\MongoDB\\\\Query\\\\Expr et ajouter ma méthode.\n\n```php\n<?php\n\nnamespace App\\AppBundle\\Query\\Expr;\n\nuse Doctrine\\ODM\\MongoDB\\Query\\Expr as BaseExpr;\n\nclass Expr extends BaseExpr\n{\n    public function isPublished(\\DateTime $datetime)\n    {\n        $this->query['$and'] = [\n             ['publication.status' => ['$equals' => true]],\n             ['publication.startDate' => ['$lte' => $datetime->format(\\DateTime::ISO8601)]],\n             ['publication.endDate' => ['$gte' => $datetime->format(\\DateTime::ISO8601)]]\n        ]\n    }\n}\n```\n\nJe n'oublie pas de surcharger la création du query builder pour pouvoir utiliser cette nouvelle classe expression.\n\n```php\n<?php\n\nnamespace App\\AppBundle\\Query;\n\nuse Doctrine\\ODM\\MongoDB\\Query\\Builder as BaseBuilder;\nuse App\\AppBundle\\Query\\Expr;\n\nclass Builder extends BaseBuilder\n{\npublic function __construct(DocumentManager $dm, $documentName = null)\n    {\n        $this->expr = new Expr($dm);\n\n        parent::__construct($dm, $documentName);\n    }\n}\n```\n\n```php\n<?php\n\nnamespace App\\AppBundle\\Repository;\n\nuse App\\AppBundle\\Query\\Builder;\nuse Doctrine\\ODM\\MongoDB\\DocumentRepository as BaseDocumentRepository;\n\nclasse DocumentRepository extends BaseDocumentRepository\n{\n   public function createQueryBuilder($documentName = null)\n   {\n       return new Builder($this->dm, $this->documentName);\n   }\n}\n```\n\nEt je peux utiliser ma nouvelle expression dans mon query builder.\n\n```php\n<?php\nnamespace App\\Appbundle\\Repository;\n\nuse App\\AppBundle\\Repository\\DocumentRepository;\n\nclass ArticleRepository extends DocumentRepository\n{\n    public function getPublishedArticle()\n    {\n        return $this->createQueryBuilder()\n              ->find()\n              ->isPublished(new \\DateTime(\"2015-10-02T11:00:00+0200\"))\n              ->getQuery()\n              ->execute();\n    }\n}\n```\n\nCette requête doit me retourner les articles qui sont publiés en date du 02 octobre 2015 à 11h00.\n\nLa requête Mongo générée est la suivante :\n\n```js\n{\n    \"$and\": [\n        {\n            \"publication.status\": {\n                \"$equals\": true\n            }\n        },\n        {\n            \"publication.startDate\": {\n                \"$lte\": new ISODate(\"2015-10-02T11:00:00+0200\")\n            }\n        },\n        {\n            \"publication.endDate\": {\n                \"$gte\": new ISODate(\"2015-10-02T11:00:00+0200\")\n            }\n        }\n    ]\n}\n```\n\n## Quick tip\n\nLe query builder va hydrater les objets Doctrine avec les données. Sur des objets complexes, ce processus est gourmand en ressource.  Pour gagner en performance, il est possible de désactiver cette hydratation.\n\n```\n<?php\n\n$this->createQueryBuilder()\n    ->hydrate(false)\n    ->find()\n    ->getQuery()\n    ->execute();\n```\n\n## Conclusion\n\nCet article vous a montré comment utiliser le query builder de Doctrine sur une base de données MongoDB. Il facilite l'écriture de requêtes plus ou moins complexes tout en restant dans un style objet. Étendre et ajouter des expressions permet de simplifier des requêtes métier complexes.\n\nRéférence : <http://docs.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/query-builder-api.html>\n"}