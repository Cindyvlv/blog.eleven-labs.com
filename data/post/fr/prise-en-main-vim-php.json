{"date":"2019-05-16T00:00:00.000Z","title":"Prise en main de VIM configuré pour PHP","excerpt":"Prenez en main cet éditeur de texte universel et léger pour votre projet web !","readingTime":"5mn","authors":["pvermeil"],"categories":["php"],"content":"\n ![]({{site.baseurl}}/assets/2019-05-06-prise-en-main-vim-php/vim-logo-en.png)\n\n## Vim, c'est quoi ?\n\nVim, derrière ce nom obscur se cache un éditeur de texte puissant en mode terminal. Pas besoin d'environnement graphique pour s'en servir.\n\nVim est un ancêtre parmi les éditeurs de texte. Il dérive de Vi, un éditeur écrit à l'époque où les systèmes d'exploitations graphiques n'existaient pas. Il s'est progressivement étoffé avec la coloration syntaxique et un langage qui lui est propre, VimScript, qui permet de le personnaliser pour en faire un vrai IDE.\n\n## Quel intérêt en 2019 ?\n\nIl y en a plusieurs :\n* **Vim est très léger :** il n'a pas besoin d'environnement graphique et n'indexe pas tout votre projet au lancement. Il peut tourner sur une vieille machine.\n* **Vim est partout :** sur tous les systèmes UNIX-like (distros Linux, MacOS, BSD), Vim est disponible. Il y a aussi une version Windows. Cela signifie qu'il est présent sur la plupart des serveurs distants pour vos manipulations.\n* **Vim est productif** , dans un premier temps cependant, l'apprentissage demande un peu de persévérance. Il permet de lancer des commandes sur votre shell sans même changer de fenêtre, et sans la lourdeur des IDE. Une idée clé de Vim est de développer sans toucher la souris.\n\n## Guide rapide des modes de Vim\n\n ![]({{site.baseurl}}/assets/2019-05-06-prise-en-main-vim-php/vim-modes.png)\n\nVous avez ouvert Vim sans terminer ce tuto et vous aimeriez savoir comment commencer à naviguer ? Voici quelques commandes.\n\nTouches | Action\n--- | ---\n:q | Quitter\n:w | Write (sauver)\n:[command]! | Forcer la commande [command]\n[I] | mode Insert\n[Esc] | revenir au mode Normal\n[V] | mode Visuel (sélection de texte)\n/[expression] | rechercher [Expression] dans le fichier. Suivant [N], précédent [Maj]+[N].\n:![cmd] | passer la commande [cmd] au shell\nH / J / K / L | gauche / bas / haut / droite\n\nLes commandes sont à lancer depuis le mode Normal. Il est possible de combiner des commandes, comme :\n```\n:wq!\n```\nPour écrire le fichier puis forcer Vim à se fermer. Pour approfondir les commandes de bases et savoir comment éditer, remplacer, etc vous pouvez installer et lancer vimtutor :\n```\nsudo apt install vimtutor\n```\n\n## Configuration de base\n\n### .vimrc minimal pour gens pressés\n\nCe .vimrc activera la coloration syntaxique, les numéros de ligne, activera la souris, le retour automatique à la ligne et une indentation correcte. .vimrc est situé dans ~ (votre dossier personnel). C'est un fichier caché. Ouvrez-le avec vim :\n\n```\nsudo vi ~/.vimrc\n```\n\nAjoutez-y ces lignes :\n\n```\nset nocompatible\nsyntax on\nfiletype plugin indent on\nset mouse=a\nset number\nset laststatus=2 ignorecase smartcase hlsearch incsearch\n\n\" show existing tab with 4 spaces width\nset tabstop=4\n\" soft tab width\nset softtabstop=4\nset shiftwidth=4\n\" 4 spaces tab\nset expandtab\n\nautocmd BufNewFile,BufRead *.ezt set filetype=html\n\n\" Vanilla key remapping PREVIOUS - NEXT\n:nnoremap <C-n> :bnext<CR>\n:nnoremap <C-p> :bprevious<CR>\n\n\" indentation made from visual mode\nset smartindent\n```\n\n### Le gestionnaire de plugins Pathogen\n\nInstallez Pathogen à l'aide de la commande suivante :\n```\nmkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n```\n\n### NERDtree, voir l'arborescence du dossier\n\n ![]({{site.baseurl}}/assets/2019-05-06-prise-en-main-vim-php/nerdtree.png)\n\nSi vous ne deviez installer qu'un plugin, ce serait celui-là ! A tout moment vous saurez où vous vous situez. Installation :\n\n```\ncd ~/.vim/bundles\ngit clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree\n```\n\nRendez-vous ensuite dans votre .vimrc, situé sous ~/.vimrc (Debian / Ubuntu), et ajoutez :\n\n```\n\"NERDtree auto refresh on file save\nautocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p\nlet NERDTreeShowHidden=1\n\n\" Close NERDtree if last buffer\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTree\")) | q | endif\n```\n\nRelancez Vim et admirez ! Pour passer de l'éditeur à NERDtree et vice-versa, il suffit de presser deux fois [W] en mode Normal. Lorsque votre curseur est sur un dossier ou fichier, appuyez sur [M] pour voir les actions disponibles.\n\n### YouCompleteMe, l'autocomplétion\n\n ![]({{site.baseurl}}/assets/2019-05-06-prise-en-main-vim-php/ycm.jpg)\n\nCe plugin fournit une autocomplétion basique s'appuyant sur ce que vous avez déjà saisi. Avant d'éditer .vimrc, lancez :\n\n```\nsudo apt-get install vim-gui-common\nsudo apt-get install vim-runtime\n\n# Install YCM\nsudo apt install build-essential cmake python3-dev python2.7-dev\ncd ~/.vim/bundle && git clone https://github.com/Valloric/YouCompleteMe\n\ncd ~/.vim/bundle/YouCompleteMe\ngit submodule update --init --recursive\npython3 install.py\n```\n\nEnsuite éditez le .vimrc avec ces lignes :\n\nPour plus d'informations sur YCM, regardez <a href=\"https://github.com/Valloric/YouCompleteMe\">la doc de son créateur !</a>\n\n### Améliorer la status bar avec Lightline\n\n ![]({{site.baseurl}}/assets/2019-05-06-prise-en-main-vim-php/powerline.png)\n\nDans votre shell :\n```\ngit clone https://github.com/itchyny/lightline.vim ~/.vim/bundle/lightline.vim\n```\nPuis dans votre .vimrc, pour afficher la branche en cours :\n```\n\" Display Git branch in status bar\nlet g:lightline = {\n      \\ 'active': {\n      \\   'left': [ [ 'mode', 'paste' ],\n      \\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]\n      \\ },\n      \\ 'component_function': {\n      \\   'gitbranch': 'gitbranch#name'\n      \\ },\n      \\ }\n\n```\n\n## Aller plus loin : une conf pour PHP\n\n### PHPComplete et CTags\n\nDans votre shell, occupez-vous d'abord de ctags :\n\n```\ncurl -Ss http://vim-php.com/phpctags/install/phpctags.phar > phpctags\ncd your-project-folder\nphp ./phpctags\nctags -R --fields=+aimlS --languages=php\n```\n\nToujours dans votre shell, vous pouvez aussi installer Gutentags pour gérer l'indexation/complétion \"intelligente\" du projet :\n\n```\ncd ~/.vim/bundle\ngit clone https://github.com/ludovicchabant/vim-gutentags.git\n```\n\nInstallez le plugin PhpComplete :\n\n```\ncd ~/.vim/bundle\ngit clone git://github.com/shawncplus/phpcomplete.vim.git\n```\n\nPuis éditer .vimrc :\n```\nset omnifunc=syntaxcomplete#Complete\nautocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP\n\" setup vim tag file\nset tags=tags;/\n\naugroup MyGutentagsStatusLineRefresher\n    autocmd!\n    autocmd User GutentagsUpdating call lightline#update()\n    autocmd User GutentagsUpdated call lightline#update()\naugroup END\n\n```\n\n### Support de twig\n\nDans votre shell, saisissez :\n```\ncd ~/.vim/bundle/\ngit clone https://github.com/evidens/vim-twig.git\n```\nEt c'est fait !\n\n## Le mot de la fin\n\nN'hésitez pas à parcourir le site <a href=\"https://vimawesome.com/\">Vimawesome</a> qui est une référence pour trouver des plugins adaptés à votre contexte de travail. Ce tutoriel utilise Pathogen comme gestionnaire de plugins.\n"}