{"date":"2017-10-09T00:00:00.000Z","title":"OpenPGP - Une paire de clés presque parfaite","excerpt":"Guide sur la création de clés OpenPGP presque parfaites","readingTime":"13mn","authors":["tthuon"],"categories":[],"content":"\nDans cet article, je voudrais créer un petit guide sur la création d'une clé PGP parfaite. Pour ceux qui ne connaissent pas,\nOpenPGP est un standard qui permet de chiffrer et déchiffrer des messages. À la différence d'une simple paire de clés RSA, le protocole\nOpenPGP permet de créer une identité numérique qui est vérifiée par d'autres personnes et qui est décentralisée. Il n'y a aucune\nautorité qui va contrôler l'identité. Ce sont les utilisateurs qui vont vérifier les autres personnes.\n\nÀ travers un ensemble de 4 articles, nous allons aborder :\n* La création de la paire de clés PGP\n* Comment déporter le secret sur une carte à puce Yubikey\n* Le stockage et la sauvegarde de la clé maître\n* La participation à une fête de la signature des clés\n\n### Installer les bon outils\n\nQue vous soyez sur Linux, Mac ou Windows, tout pourra être fait en lignes de commande.\n\nTout d'abord, installons les outils :\n* Windows:  [GPG4Win](https://www.gpg4win.org/){:rel=\"nofollow noreferrer\"}\n* Mac:  [GPGtools](https://gpgtools.org/){:rel=\"nofollow noreferrer\"}\n* Linux:  [gnupg.org](https://gnupg.org/download/) (déjà intégré dans Ubuntu par exemple){:rel=\"nofollow noreferrer\"}\n\nPour cet article, je vais me baser sur Ubuntu 16.04 et GnuPG v2.1.11. Il s'agit de la nouvelle version moderne de gnupg qui va\nremplacer la v1.4 et la v2.0.\n\nAvant de lancer la création de la clé, il faut configurer gpg pour renforcer la sécurité.\nLes premières lignes permettent de ne pas diffuser des informations sur la façon dont la clé a été créée.\nEnsuite il y a la configuration d'OpenPGP pour afficher plus d'information lors du listage des clés. En fin de configuration, il y a des restrictions sur les algorithmes de chiffrement afin d'utiliser les meilleurs et les plus résistantes à ce jour.\n\nCopier cette configuration dans ~/.gnupg/gpg.conf (Linux et Mac) ou C:\\Users\\[nom de l'utilisateur]\\AppData\\Roaming\\gnupg\\gpg.conf (Windows).\n\n```\n# Limite les informations diffusées\nno-emit-version\nno-comments\nexport-options export-minimal\n\n# Permet d'afficher le format long de l'ID des clés et leurs empreintes\nkeyid-format 0xlong\nwith-fingerprint\n\n# Affiche la validité des clés\nlist-options show-uid-validity\nverify-options show-uid-validity\n\n# Limite les algorithmes utilisés\npersonal-cipher-preferences AES256\npersonal-digest-preferences SHA512\ndefault-preference-list SHA512 SHA384 SHA256 RIPEMD160 AES256 TWOFISH BLOWFISH ZLIB BZIP2 ZIP Uncompressed\n\ncipher-algo AES256\ndigest-algo SHA512\ncert-digest-algo SHA512\ncompress-algo ZLIB\n\ndisable-cipher-algo 3DES\nweak-digest SHA1\n\n# Paramètres S2K (String-to-Key) de la phrase de passe des clés\n# Le paramètre s2k-count peut être réduit sur les machines peu puissantes\ns2k-cipher-algo AES256\ns2k-digest-algo SHA512\ns2k-mode 3\ns2k-count 65011712\n```\n### Prendre l'avantage des sous-clés\n\nLors de la création d'une clé OpenPGP dans son mode de base, gpg va créer une paire de clés qui permet de signer et de certifier.\nPour augmenter la sécurité de notre clé, nous allons utiliser une particularité d'OpenPGP : les sous-clés.\n\nOpenPGP permet de créer des sous-clés avec un usage spécifique : signer, chiffrer et authentifier. Un autre avantage à l'utilisation\ndes sous-clés est qu'en cas de perte ou vol des clés secrètes des sous-clés, il suffira de révoquer la sous-clé\nsans avoir à révoquer la clé principale (celle qui permet de certifier d'autres clés).\n\nCommençons par créer la clé principale, celle qui va détenir notre identité. Puis ensuite, créons des sous-clés pour signer, chiffrer et authentifier.\n\n### Création de la clé principale\n\nNous allons choisir de générer notre clé de façon personnalisée et de créer la clé de certification pour Wilson.\nElle va permettre de certifier d'autre clés. Elle est très importante, il faudra la conserver précieusement. En cas de perte ou de vol, celui qui détiendra cette clé pourra se faire passer pour cette personne.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --full-gen-key\n\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\nYour selection? 8\n```\n\nEnsuite il faudra sélectionner les attributs de cette clé. Il ne faut garder que la capacité **Certifier** (*Certify* en anglais).\n\n```bash\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Sign Certify Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? s\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Certify Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? e\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Certify\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? q\n```\n\nNous avons configuré les capacités de cette premiere clé pour n'autoriser que la certification.\nPassons ensuite à la taille de la clé : il est recommandé d'avoir une clé\nd'une taille minimale de 2048. À ce jour, cette longueur est encore résistante, mais il est\npréférable de prendre la taille maximale : 4096.\n\nPour la durée de vie de la clé, il est toujours recommandé d'en mettre une. En cas de perte de cette clé, et si elle\na été envoyée sur un serveur de clé, elle y restera à jamais valide. Mettez une durée d'au maximum 2 ans. Ici je vais mettre 1 an.\nCela permet de réviser les commandes chaque année :) .\n\n```bash\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey does not expire at all\nIs this correct? (y/N) y\n```\n\nAjoutons des détails sur l'identité de Wilson :\n\n```bash\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Wilson Eleven\nEmail address: wilson.eleven@labs.com\nComment:\nYou selected this USER-ID:\n    \"Wilson Eleven <wilson.eleven@labs.com>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n```\n\nUne fenêtre va s'afficher. Elle va vous demander de renseigner un pass-phrase pour protéger les clés secrètes.\nChoisissez-en un assez long que vous pouvez mémoriser facilement.\n\n```bash\ngpg: key 1A8132B1 marked as ultimately trusted\ngpg: directory '/home/wilson/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/home/wilson/.gnupg/openpgp-revocs.d/5EA44FF53CEB240FD3F1A6E4DCEE216E1A8132B1.rev'\npublic and secret key created and signed.\n\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: PGP\ngpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u\npub   rsa4096/1A8132B1 2017-10-05 [] [expires: 2018-10-10]\n      Key fingerprint = 5EA4 4FF5 3CEB 240F D3F1  A6E4 DCEE 216E 1A81 32B1\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\n```\n\nLa paire de clés principale est créée. Maintenant créons les sous-clés.\n\n### Création des sous-clés\n\nComme nous l'avons vu en introduction sur les sous-clés, il est important d'en avoir une dédiée à chaque tâche :\n* Authentification (A)\n* Signature (S)\n* Chiffrement (E)\n\nCréons les maintenant.\n\nNous allons d'abord faire la liste des clés disponibles :\n\n```\nwilson@spaceship:~$ gpg2 --list-keys\n\n/home/wilson/.gnupg/pubring.gpg\n--------------------------------\npub   rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-10]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\n```\n\nÉditons-la pour lui ajouter des sous-clés. Pour cela, il va falloir passer en mode expert.\n\n```bash\nwilson@spaceship:~$ gpg2 --expert --edit-key 1A8132B1\ngpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n```\n\nVous êtes maintenant en mode édition de la clé.\n\nAjoutons la clé de chiffrement avec la commande `addkey`.\n\n```bash\ngpg> addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 8\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? s\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey expires at ven. 05 oct. 2018 13:37:19 CEST\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg>\n\n```\n\nLa clé avec l'empreinte B73A9C79 a bien été créée. Répétez l'opération pour la clé de signature et d'authentification.\n\nÀ la fin, vous devez avoir ces clés :\n\n```bash\nsec  rsa4096/1A8132B1\n     created: 2017-10-05  expires: 2018-10-05  usage: C\n     trust: ultimate      validity: ultimate\nssb  rsa4096/B73A9C79\n     created: 2017-10-05  expires: 2018-10-05  usage: E\nssb  rsa4096/9CC8B2FB\n     created: 2017-10-05  expires: 2018-10-05  usage: S\nssb  rsa4096/8047B454\n     created: 2017-10-05  expires: 2018-10-05  usage: A\n[ultimate] (1). Wilson Eleven <wilson.eleven@labs.com>\n\ngpg> save\ngpg> quit\n```\n\nEntrez `save` puis `quit`, et vous avez fini. Wilson a maintenant une paire de clés OpenPGP avec son identité et des sous-clés avec chacune une capacité.\nAvant de pouvoir pleinement utiliser cette clé, sauvegardons-la.\n\n### Exporter la clé principale\n\nLa clé PGP ne doit pas être utilisée telle quelle. En cas de vol de la clé principale et du mot de passe,\nle détenteur de cette clé peut usurper l'identitié numérique et signer des messages à la place de la vraie personne.\nIl est donc primordial de séparer la clé principale des sous-clés. La cleé principale, celle qui permet de certifier,\nsera conservée dans un espace de stockage à froid et totalement déconnectée du réseau.\n\nTout d'abord, créons un certificat de révocation en cas de vol de la clé principale.\n\n```bash\nwilson@spaceship:~$ gpg2 --output 1A8132B1.rev --gen-revoke 1A8132B1\n```\n\nLe certificat de révocation est créé dans `1A8132B1.rev`. Il faudra le conserver précieusement (nous le verrons en partie 3).\n\nSauvegardons également toutes les clés.\n\n```bash\nwilson@spaceship:~$ gpg2 --export --armor 1A8132B1 > 1A8132B1.pub.asc\nwilson@spaceship:~$ gpg2 --export-secret-keys --armor 1A8132B1 > 1A8132B1.priv.asc\nwilson@spaceship:~$ gpg2 --export-secret-subkeys --armor 1A8132B1 > 1A8132B1.sub_priv.asc\n```\n\n`1A8132B1.pub.asc` va contenir toutes les clés publiques et `1A8132B1.priv.asc` la clé privée de la clé principale.\n`1A8132B1.sub_priv.asc` ne contient que les clés privée des sous-clés.\n\nComme dit plus haut, nous n'allons utiliser que les sous-clés pour une utilisation quotidienne.\n\nSupprimons toutes les clés privées.\n\n```bash\nwilson@spaceship:~$ gpg2 --delete-secret-key 1A8132B1\n```\n\nEnsuite, nous importons uniquement les clés privée des sous-clés.\n\n```bash\nwilson@spaceship:~$ gpg2 --import 1A8132B1.sub_priv.asc\n```\n\nVérifions que nous avons uniquement les clés privées des sous-clés :\n\n```bash\nwilson@spaceship:~$ gpg2 --list-secret-keys\n/home/wilson/.gnupg/secring.gpg\nsec#  rsa4096/1A8132B1 2017-10-05 [C] [expires: 2018-10-05]\nuid         [ultimate] Wilson Eleven <wilson.eleven@labs.com>\nssb   rsa4096/B73A9C79 2017-10-05 [E] [expires: 2018-10-05]\nssb   rsa4096/9CC8B2FB 2017-10-05 [S] [expires: 2018-10-05]\nssb   rsa4096/8047B454 2017-10-05 [A] [expires: 2018-10-05]\n```\n\nLe petit `#` devant `sec` indique que la clé secrète de la clé principale n'existe plus, c'est un bouchon à la place.\n\nTous les fichiers que nous avons créés seront à conserver sur un média déconnecté du réseau (CD, clé USB, bande magnétique, feuille papier, ...).\n\n### Conclusion\n\nÀ travers cet article, nous avons créé une clé PGP avec un ensemble de sous-clés dédié à une tâche particulière. L'avantage d'utiliser OpenPGP par rapport à une simple clé asymétrique ce sont les sous-clés. Si une des clés est compromise, il suffira de la révoquer et d'en regénérer une nouvelle. Il ne sera pas nécessaire de révoquer la clé principale, celle qui détient notre identité numérique. Cette stratégie offre un niveau de sécurité beaucoup plus élevé.\n\nVous pouvez dès à présent signer vos emails et en recevoir des chiffrés, signer vos commit git, utiliser keybase.io et\nmême vous authentifier sur un serveur en SSH.\n\nPar ailleurs, le 2 novembre, il y aura [une fête de la signature des clés](https://blog.mozfr.org/post/2017/09/Se-rencontrer-pour-echanger-ses-clefs-2-novembre-Paris) (key signing party){:rel=\"nofollow noreferrer\"} dans les locaux de Mozilla France.\nCet évévenement est l'occasion de rencontrer d'autres adeptes d'OpenPGP et surtout, il permettra de faire certifier votre clé nouvellement créée.\n\n### Article en relation\n* [OpenPGP - Une paire de clés presque parfaite (partie 1)](/fr/openpgp-paire-clef-presque-parfaite-partie-1/)\n* [OpenPGP - Exporter les clefs secrètes sur une Yubikey (partie 2)](/fr/openpgp-clef-secrete-yubikey-partie-2/)\n* [OpenPGP - Stockage sur le long terme de clefs (partie 3)](/fr/openpgp-stockage-froid-clefs-partie-3/)\n* [OpenPGP - J'ai participé à une fête de la signature des clefs (partie 4)](/fr/openpgp-clef-participe-a-une-fete-de-la-signature-des-clefs/)\n\n### Resources\n* [GPG : création de votre première paire de clefs et chiffrement d'un fichier](https://www.nextinpact.com/news/98374-gnupg-creation-votre-premiere-paire-clefs-et-chiffrement-dun-fichier.htm){:rel=\"nofollow noreferrer\"}\n* [GPG : comment créer une paire de clefs presque parfaite](https://www.nextinpact.com/news/102685-gpg-comment-creer-paire-clefs-presque-parfaite.htm){:rel=\"nofollow noreferrer\"}\n* [Creating the perfect GPG keypair](https://alexcabal.com/creating-the-perfect-gpg-keypair/){:rel=\"nofollow noreferrer\"}\n* [Ma nouvelle clé PGP](http://www.bortzmeyer.org/nouvelle-cle-pgp.html){:rel=\"nofollow noreferrer\"}\n* [OpenPGP Best Practices](https://riseup.net/en/security/message-security/openpgp/best-practices){:rel=\"nofollow noreferrer\"}\n* [Using OpenPGP subkeys in Debian development](https://wiki.debian.org/Subkeys){:rel=\"nofollow noreferrer\"}\n* [PGP Key signing party](https://www.eventbrite.com/e/pgp-key-signing-party-tickets-37092612001){:rel=\"nofollow noreferrer\"}\n* [Se rencontrer pour échanger ses clefs le 2 novembre à Paris](https://blog.mozfr.org/post/2017/09/Se-rencontrer-pour-echanger-ses-clefs-2-novembre-Paris){:rel=\"nofollow noreferrer\"}\n"}