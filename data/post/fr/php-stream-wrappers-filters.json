{"date":"2018-05-11T00:00:00.000Z","title":"PHP Stream : wrappers, filters... un alli√© m√©connu","excerpt":"Bien que tr√®s puissant et pr√©sent dans PHP depuis la version 4.3, ce composant est souvent m√©connu, sous-exploit√©, voire mal utilis√©.","readingTime":"11mn","authors":["amoutte"],"categories":["php"],"content":"\n## D√©finition\n\nLa d√©finition du [manuel](http://php.net/intro.stream) √©tant d√©j√† tr√®s claire, je me contente simplement de vous la partager.\n> La gestion des flux a √©t√© introduite en PHP 4.3.0. comme m√©thode de g√©n√©ralisation des fichiers, sockets, connexions r√©seau, donn√©es compress√©es et autres op√©rations du m√™me type, qui partagent des op√©rations communes. Dans sa d√©finition la plus simple, un flux est une ressource qui pr√©sente des capacit√©s de flux. C'est-√†-dire que ces objets peuvent √™tre lus ou recevoir des √©critures de mani√®re lin√©aire, et disposent aussi de moyens d'acc√©der √† des positions arbitraires dans le flux.\n\n## Protocoles\n\nUn protocole est une sp√©cification de plusieurs r√®gles pour un type de communication. Il peut √©galement √™tre utile pour v√©rifier que les informations soient correctement re√ßues.\n\n> Dans une conversation t√©l√©phonique quand l'interlocuteur d√©croche, il commence par dire \"All√¥\" afin de sp√©cifier qu'il est pr√™t √† recevoir des informations.\n\nLa r√©f√©rence d'un flux (style URL) s'√©crit de la forme `scheme://target`.\n\n> Donc oui `https://blog.eleven-labs.com/` peut √™tre ouvert comme un flux qui pointe vers une ressource distante.\n\n### Wrappers\n\nDans le contexte pr√©sent un `wrapper` est un gestionnaire de protocole (de style URL).\n\nVoici la liste des `scheme` ([wrappers](http://php.net/wrappers)) support√©s par PHP :\n\n- [file://](http://php.net/manual/fr/wrappers.file.php)  ‚Äî Acc√®s au syst√®me de fichiers local\n- [http://](http://php.net/manual/fr/wrappers.http.php)  ‚Äî Acc√®s aux URLs HTTP(s)\n- [ftp://](http://php.net/manual/fr/wrappers.ftp.php)  ‚Äî Acc√®s aux URLs FTP(s)\n- [php://](http://php.net/manual/fr/wrappers.php.php)  ‚Äî Acc√®s aux divers flux I/O\n- [data://](http://php.net/manual/fr/wrappers.data.php)  ‚Äî Donn√©es (RFC 2397)\n- [glob://](http://php.net/manual/fr/wrappers.glob.php)  ‚Äî Trouve des noms de fichiers correspondant √† un masque donn√©\n- [phar://](http://php.net/manual/fr/wrappers.phar.php)  ‚Äî Archive PHP (PHP >= 5.3.0)\n- [zlib://](http://php.net/manual/fr/wrappers.compression.php)  ‚Äî Flux de compression **(requiert un extension pour zip://)**\n- [ssh2://](http://php.net/manual/fr/wrappers.ssh2.php)  ‚Äî Shell s√©curis√© 2 **(requiert l'extension SSH2)**\n- [rar://](http://php.net/manual/fr/wrappers.rar.php)  ‚Äî RAR **(requiert l'extension RAR)**\n- [ogg://](http://php.net/manual/fr/wrappers.audio.php)  ‚Äî Flux Audio **(requiert l'extension OGG/Vorbis)**\n- [expect://](http://php.net/manual/fr/wrappers.expect.php)  ‚Äî Flux d'interactions de processus **(requiert l'extension Expect)**\n\nUtiliser `stream_get_wrappers()` pour avoir la liste des protocoles support√©s par votre serveur.\n```php\nvar_dump(stream_get_wrappers());\n```\n\n### Transports\n\nUn [transport](http://php.net/transports) en PHP ce n'est ni plus ni moins qu'un moyen de transf√©rer des donn√©es. Pour cela PHP utilise les `sockets`.\n\n‚ÑπÔ∏è Il ne faut pas oublier que les `sockets` sont aussi des flux üòú.\n\n**Sockets type WEB**\n- tcp:// ([Transmission Control Protocol](https://fr.wikipedia.org/wiki/Transmission_Control_Protocol))\n- udp:// ([User Datagram Protocol](https://fr.wikipedia.org/wiki/User_Datagram_Protocol))\n- ssl:// (n√©gociation automatique entre ssl v2/v3) (sslv2://, sslv3:// depuis PHP 5.0.2) **(requiert OpenSSL)**\n- tls:// **(requiert OpenSSL)**\n\nUtiliser `stream_get_transports()` pour avoir la liste des protocoles de transport support√©s par votre serveur.\n```php\nvar_dump(stream_get_transports());\n```\n> √Ä noter que les paths des `sockets` web s'√©crivent sous la forme\n> `{PROTOCOL}://{DOMAIN / IP v4, v6}:{PORT}`\n\nVoici plusieurs exemples :\n-   _127.0.0.1_\n-   _fe80::1_\n-   _www.example.com_\n-   _tcp://127.0.0.1_\n-   _tcp://fe80::1_\n-   _tcp://[fe80::1]:80_\n-   _tcp://www.example.com_\n-   _udp://www.example.com_\n-   _ssl://www.example.com_\n-   _sslv2://www.example.com_\n-   _sslv3://www.example.com_\n-   _tls://www.example.com_\n\n**Sockets type UNIX**\n- unix:// (fournit l'acc√®s √† un flux de type socket, sur un domaine Unix)\n- udg:// (fournit un mode de transport alternatif, avec un protocole de datagrammes utilisateur)\n\n----\n\nVoila un petit tour d'horizon des diff√©rents protocoles que PHP met nativement, ou par extensions, √† votre disposition.\n\n**üë®‚ÄçüöÄ Il est √©galement possible de cr√©er sont propre `wrapper`, afin d'encapsuler la logique de transmission des donn√©es !**\n\nComme par exemple :\n\n- [s3://](https://docs.aws.amazon.com/aws-sdk-php/v2/guide/feature-s3-stream-wrapper.html) donne acc√®s √† votre storage AWS\n- [git://](https://github.com/teqneers/PHP-Stream-Wrapper-for-Git#using-the-streamwrapper) permet d'int√©ragir avec git\n- [hoa://](https://github.com/hoaproject/Protocol) permet d'acc√©der aux diff√©rentes informations manag√©es par HOA\n\n### Contexte de flux\n\nLes contextes de flux sont une autre notion importante de la gestion des flux. Le contexte est un ensemble d'options qui sera pass√© en argument aux diverses fonctions de traitements de flux (ex: `stream_*`, `fopen`, `copy`, `file_get_contents`...).\n\n```php\n$context = stream_context_create(\n    [\n        'http' => [\n            'protocol_version' => '1.1',\n            'timeout' => 10,\n            'user_agent' => 'Wilson Browser',\n            'method' => 'GET',\n        ],\n    ],\n    []\n);\n\n$result = file_get_contents('http://../page', false, $context);\n```\n> La requ√™te g√©n√©r√©e pour r√©cup√©rer la page sera donc en `GET HTTP 1.1` avec un user agent `Wilson Browser` et un timeout √† 10 secondes.\n\nVous pouvez √©galement utiliser `stream_context_set_default` afin de configurer les options par d√©faut des gestionnaires de flux.\n\n```php\nstream_context_set_default([\n    'http' => [\n        'timeout' => 10,\n        'user_agent' => 'Wilson Browser',\n    ],\n    'ftp' => [...]\n]);\n```\n> ‚ö†Ô∏è Attention √† l'utilisation de cette derni√®re, car elle configure les options de toutes les requ√™tes HTTP faites par la couche de flux de PHP.\n\n### Filtres\n\nUne autre partie assez int√©ressante des flux √©tant la possibilit√© d'ajouter des fonctions de [filtre](http://php.net/filters) sur les donn√©es qui transiteront dans le flux.\n\n- _string.rot13_\n- _string.toupper_\n- _string.tolower_\n- _string.strip_tags_ **(depuis PHP 5)**\n- _convert.base64-encode_ - _convert.base64-decode_\n- _convert.quoted-printable-encode_ - _convert.quoted-printable-decode_\n- _zlib.deflate_ (compression) (PHP >= _5_ si le support [zlib](http://php.net/manual/fr/ref.zlib.php) est activ√©)\n- _zlib.inflate_ (decompression) (PHP >= _5_ si le support [zlib](http://php.net/manual/fr/ref.zlib.php) est activ√©)\n- _bzip2.compress (PHP >= _5_ si le support [bz2](http://php.net/manual/fr/ref.bzip2.php) est activ√©)\n- _bzip2.decompress_ (PHP >= _5_ si le support [bz2](http://php.net/manual/fr/ref.bzip2.php) est activ√©)\n- _mcrypt.*_ (‚ùå **_OBSOLETE_ depuis PHP 7.1.0. Nous vous encourageons vivement √† ne plus l'utiliser.**)\n- _mdecrypt.*_ (‚ùå **_OBSOLETE_ depuis PHP 7.1.0. Nous vous encourageons vivement √† ne plus l'utiliser.**)\n\nUtiliser `stream_get_filters()` pour avoir la liste des filtres support√©s par votre serveur.\n```php\nvar_dump(stream_get_filters());\n```\n\nIl existe 2 syntaxes pour configurer un filtre sur un flux.\n\nL'utilisation de `stream_filter_append`/`stream_filter_prepend`.\n```php\n$fp = fopen('php://output', 'w');\nstream_filter_append($fp, 'string.toupper', STREAM_FILTER_WRITE);\nfwrite($fp, \"Code de lancement: 151215\");\nfclose($fp);\n```\n[`Ex√©cuter le php`](https://3v4l.org/VV6FG)\n\nGr√¢ce au flux `php://filter`\n```php\nfile_put_contents('php://filter/string.toupper/resource=php://output', 'Code de lancement: 151215');\n```\n[`Ex√©cuter le php`](https://3v4l.org/4nggb)\n> Les 2 exemples ci-dessus vont afficher `CODE DE LANCEMENT: 151215`\n\n**üë®‚ÄçüöÄ L√† aussi il est possible de cr√©er son propre `filter` gr√¢ce √† [php_user_filter](http://php.net/php_user_filter) !**\n\nVoici un petit filtre geek.\n\n```php\nclass l33t_filter extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing)\n    {\n        $common = [\"a\", \"e\", \"s\", \"S\", \"A\", \"o\", \"O\", \"t\", \"l\", \"ph\", \"y\", \"H\", \"W\", \"M\", \"D\", \"V\", \"x\"];\n        $leet = [\"4\", \"3\", \"z\", \"Z\", \"4\", \"0\", \"0\", \"+\", \"1\", \"f\", \"j\", \"|-|\", \"\\\\/\\\\/\", \"|\\\\/|\", \"|)\", \"\\\\/\", \"><\"];\n\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            $bucket->data = str_replace($common, $leet, $bucket->data);\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n        return PSFS_PASS_ON;\n    }\n}\nstream_filter_register('l33t_filter', 'l33t_filter') or die('Failed to register filter Markdown');\n\nfile_put_contents('php://filter/l33t_filter/resource=php://output', 'Salut √ßa va?');\n```\n[`Ex√©cuter le php`](https://3v4l.org/Zpgr8)\n\n> L'exemple du dessus convertira `Salut √ßa va?` en `Z41u+ √ß4 v4?`\n\nOn peut imaginer des filtres html>markdown,  un emoji converter, un dictionnaire de mots blacklist√©s, etc.\n\n## Les flux I/O\n\nPHP met √©galement √† notre disposition des flux d'`Input`/`Output`.\n\n### php://stdin\nC'est le flux d'entr√©e standard (ligne de commande)\n> ‚ÑπÔ∏è stdin: est en lecture seule\n\nExemple\n```php\n//index.php\ncopy(\n    'php://stdin',\n    'php://filter/string.toupper/resource=php://stdout'\n);\n```\nLa commande ci-dessous √©crira `string` dans le flux `stdin` et ici on copie simplement ce que l'on re√ßoit dans la sortie standard apr√®s avoir appliqu√© un filtre `toupper`.\n```bash\n$ echo 'string' | php index.php #affichera STRING\n$ cat file.txt | php index.php #affichera le contenu du fichier en majuscule\n```\n\n### php://stdout et php://stderr\nSont les flux de sortie standards (ligne de commande)\n> ‚ÑπÔ∏è stdin: est en lecture seule\n\nExemple\n```php\n//error.php\nerror_reporting(E_ALL);\nini_set(\"display_errors\", 0);\necho 'Hello '.$_GET['user'];\n```\nAvec ce script nous allons reporter toutes les erreurs (E_ALL) mais ne pas les afficher aux visiteurs.\n\nDans un navigateur web ce script affichera :\n```\nHello\n```\nEt les erreurs seront dirig√©es vers le flux `php://stderr` qui est bien souvent configur√© par votre file handler (nginx/apache...) gr√¢ce au param√®tre [error_log](http://php.net/error-log).\n\nüë®‚ÄçüöÄ **En ligne de commande `php://output` `php://stderr` sont par d√©faut envoy√©s dans `php://stdout`**\n\nLan√ßons ce script avec la commande suivante :\n```bash\n$ php error.php\n```\nCe qui donnera :\n```\nPHP Notice:  Undefined index: user in /var/www/error.php on line 5\nPHP Stack trace:\nPHP   1. {main}() /var/www/error.php:0\nHello %\n```\n**Utilisons maintenant la redirection de flux GNU/Linux**\n```bash\n$ php error.php > out.txt\n```\nla console affichera :\n```\nPHP Notice:  Undefined index: user in /var/www/error.php on line 5\nPHP Stack trace:\nPHP   1. {main}() /var/www/error.php:0\n```\ntandis que le fichier `out.txt` contiendra :\n```\nHello\n```\n\n**Mais on peut √©galement rediriger la sortie d'erreur**\n```bash\n$ php error.php 2> errors.txt\n```\nla console affichera :\n\n```\nHello\n```\ntandis que le fichier `errors.txt` contiendra :\n```\nPHP Notice:  Undefined index: user in /var/www/error.php on line 5\nPHP Stack trace:\nPHP   1. {main}() /var/www/error.php:0\n```\n‚ÑπÔ∏è On peut √©galement combiner les 2 `php error.php > out.txt 2> errors.txt`\n> `>` et `2>` √©crase le fichier ou le cr√©e.\n> `>>` et `2>>` √©crit √† la fin du fichier ou le cr√©e.\n> `2>&1` et `2>>&1` redirige les 2 flux (avec le m√™me comportement pour `>` et `>>`)\n\n### php://input\nPermet de lire les donn√©es brutes du corps de la requ√™te.\n> ‚ö†Ô∏è N'est pas disponible avec _enctype=\"multipart/form-data\"_.\n\n### php://output\nPermet d'√©crire dans le buffer de sortie de la m√™me fa√ßon que `print` `echo`.\n```php\n// les 2 √©critures suivantes feront la m√™me chose\nfile_put_contents('php://output', 'Some data');\necho 'Some data';\n```\nN'oubliez pas qu'avec `php://output` vous pouvez utiliser les filtres, le contexte et m√™me pourquoi pas r√©√©crire au d√©but.\n\n### php://temp et php://memory\nPermet d'√©crire dans un gestionnaire de fichiers. `php://memory` stockera toujours en m√©moire tandis que `php://temp` stockera en m√©moire, puis sur disque apr√®s avoir attendu la limite pr√©d√©finie (d√©faut 2Mo)\n> üë®‚ÄçüöÄ `php://temp/maxmemory:200` stockera sur disque une fois que 200 octets seront √©crit dans le flux.\n\n### php://filter\nPermet d'ajouter un filtre lors de l'ouverture d'un autre flux.\nExemple :\n```php\n// Applique un filtre lors de la lecture\nfile_get_contents('php://filter/read=string.rot13/resource=example.txt');\n\n// Applique un filtre lors de l'√©criture\nfile_put_contents('php://filter/write=string.rot13/resource=example.txt', 'new data');\n\n// Applique le filtre lors de l'√©criture mais aussi lors de la lecture\n$res = fopen('php://filter/string.rot13/resource=example.txt', 'w+');\n```\n\n### php://fd\n\nN'ayant pas trouv√© d'informations utiles je vous laisse consulter la [documentation](http://php.net/wrappers-php#refsect2-wrappers.php-unknown-unknown-unknown-unknown-descriptior)\n\n## Quelques cas d'utilisation\n\nPrenons l'exemple d'une copie de fichier :\n```php\n$file = file_get_contents('http://.../textfile.txt');\nfile_put_contents(__DIR__.'/downloaded_textfile.txt', $file);\n```\n‚ö†Ô∏è Avec ce code nous allons t√©l√©charger **enti√®rement** le fichier `textfile.txt` dans la m√©moire avant de l'√©crire dans le fichier de destination !\n\nMaintenant si l'on change l√©g√®rement le code on obtient :\n\nDO\n```php\ncopy(\n    'http://.../textfile.txt',\n    __DIR__.'/downloaded_textfile.txt'\n);\n```\n‚ÑπÔ∏è On peut faire le m√™me traitement avec des ressources :\n\n```php\nstream_copy_to_stream(\n    fopen('http://.../textfile.txt', 'r'),\n    fopen(__DIR__.'/downloaded_textfile.txt', 'w+')\n);\n```\nVoici la consommation m√©moire pour un fichier de 5Mo.\n\n| Code  | memory_get_usage(true) | memory_get_peak_usage(true) |\n|--|--|--|\n| file_get_content | 8Mo | 13Mo |\n| copy | 2Mo | 2Mo |\n|stream_copy_to_stream|2Mo|2Mo|\n\nLa diff√©rence de consommation m√©moire est due au fait que `copy` et `stream_copy_to_stream` vont directement √©crire la source dans la destination.\n\nüë®‚ÄçüöÄ N'h√©sitez pas √† utiliser les `wrappers`/`transports` cit√©s au d√©but de l'article.\n\n---\n```php\ncopy(\n    'http://.../image.jpg',\n    'ssh2.scp://user:pass@server:22/home/download/image.jpg'\n);\n```\n> Copie le fichier depuis le web sur un serveur en utilisant `scp` via `ssh`.\n\n---\n\nUn autre exemple fr√©quemment rencontr√© lors de la cr√©ation de fichier temporaire :\n\n```php\n$tmpFile = tempnam(sys_get_temp_dir(), 'php' . rand());\n```\n‚ö†Ô∏è Ici le script va cr√©er un **fichier** dans le **dossier temporaire** de php.\n- Ce qui veut dire qu'il vous faudra supprimer vous-m√™me ce fichier.\n- La fonction `tempnam()` retourne le `path` et non la ressource.\n\nüë®‚ÄçüöÄ Pr√©f√©rez donc l'utilisation de :\n- `php://temp` ou `php://temp/maxmemory:100` qui stockera en m√©moire puis sur disque une fois la limite atteinte.\n- `php://memory` stocker en m√©moire\n- `tmpfile()` cr√©e un fichier temporaire avec un nom unique, ouvert en √©criture et lecture (_w+_), et retourne un pointeur de fichier.\n\n```php\n$tmp = fopen('php://temp', 'w+');\n```\n\nCe fichier sera automatiquement effac√© :\n- lorsqu'il sera ferm√©.\n- lorsqu'il n'y a plus de r√©f√©rence au gestionnaire de fichiers.\n- lorsque le script sera termin√©.\n\n## Conclusion\nBien que tr√®s puissant et pr√©sent dans PHP depuis la version 4.3, ce composant est souvent m√©connu, sous exploit√©, voire mal utilis√©. C'est pourquoi j'en fais la promotion ici. J'esp√®re avoir suscit√© votre int√©r√™t !\n\nüìù **Je n'ai volontairement pas abord√© les flux de type `socket` car, ils m√©riteraient un article √† eux seuls.**\n\n## Liens utiles\n- üëç [Les flux : m√©connus et sous-utilis√©s - Pascal Martin - Forum PHP 2015](https://www.youtube.com/watch?v=3tOGhPj8IcA)\n- [http://php.net/stream](http://php.net/stream)\n- [http://php.net/context](http://php.net/context)\n- [http://php.net/wrappers](http://php.net/wrappers)\n- [https://github.com/reactphp/react](https://github.com/reactphp/react)\n"}