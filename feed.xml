<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Blog Eleven Labs</title>
        <link>https://blog.eleven-labs.com</link>
        <description>L'actualité tech</description>
        <lastBuildDate>Thu, 20 Apr 2023 17:13:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>awesome</generator>
        <image>
            <title>Blog Eleven Labs</title>
            <url>https://blog.eleven-labs.com/imgs/logo.png</url>
            <link>https://blog.eleven-labs.com</link>
        </image>
        <copyright>All rights reserved 2023, Blog Eleven Labs</copyright>
        <item>
            <title><![CDATA[Symfony et MongoDB, retour aux bases]]></title>
            <link>https://blog.eleven-labs.com/fr/symfony-et-mongodb-retour-aux-sources/</link>
            <guid>https://blog.eleven-labs.com/fr/symfony-et-mongodb-retour-aux-sources/</guid>
            <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Faire du MongoDB avec Symfony, c'est facile, mais avec ou sans Doctrine ?]]></description>
            <content:encoded><![CDATA[<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2023-02-22-symfony-et-mongodb-retour-aux-sources/logo.png" width="200px" alt="Symfony et MongoDB" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>Sur ce blog, nous avons déjà quelques articles autour de MongoDB, et même s’ils sont encore d’actualité, il n’y en avait pas sur MongoDB dans Symfony, d'où cet article !</p>
<h2>Qu’est-ce que MongoDB ?</h2>
<p>MongoDB est une base de données en NoSQL orientée documents.
On a plus souvent l’habitude de bases de données relationnelles comme MySQL pour enregistrer les entités sous Symfony. Les Bases orientées Document elles, sont pensées pour un besoin différent : stocker directement un objet complet, sans relation ou répartition sur plusieurs tables (par exemple des contenus comme des articles de journaux/blogs ou des catalogues de produits).
Cela permet d’y accéder plus rapidement et il n’y a pas besoin de relationnelle : toutes les informations sont enregistrées dans un JSON ou XML dans une structure souple.</p>
<h2>Installer une base MongoDB pour un projet Symfony dans Docker</h2>
<p>Avant de l’utiliser dans votre projet sous Symfony, il faut installer dans votre docker-compose l’image de MongoDB et le configurer.</p>
<p>On reste sur une configuration simple où les paramètres sont stockés dans le .env.</p>
<pre><code># .env
###&gt; mongodb ###
DATABASE_NAME=documents
DATABASE_HOST=database
DATABASE_PORT=27017
DATABASE_USER=user
DATABASE_PASSWORD=password
DATABASE_VERSION=x.x.xx
###&lt; mongodb ###
</code></pre>
<pre><code># docker-compose.yml
    database:
        image: mongo:${DATABASE_VERSION}
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
        ports:
            - ${DATABASE_PORT}:27017
        expose:
            - ${DATABASE_PORT}
        volumes:
            - data-documents:/data/db
</code></pre>
<h2>MongoDB dans Symfony, deux solutions possibles</h2>
<p>Pour l’implémentation dans Symfony, je vais proposer deux approches : avec Doctrine, et comme c’est dans l’air du temps, SANS Doctrine !</p>
<p>Pourquoi proposer sans Doctrine ? Il y a certes du Doctrine Bashing depuis quelques années, mais comme MongoDB n’est pas du relationnel, et si vous n’avez pas besoin de l’utiliser comme un objet lors de la récupération, alors pourquoi s’embêter avec un modèle ?</p>
<h2>Avec <a href="https://www.doctrine-project.org/projects/doctrine-mongodb-bundle/en/4.4/index.html">DoctrineMongoDBBundle</a></h2>
<h3>Installation</h3>
<p>Je ne vais pas répéter la documentation du Bundle qui est bien fait sur <a href="https://www.doctrine-project.org/projects/doctrine-mongodb-bundle/en/4.4/installation.html#install-the-bundle-with-composer">l’installation</a>, mais je vais préciser la configuration pour être cohérent avec celle de docker-compose.</p>
<pre><code># config/packages/doctrine_mongodb.yaml

doctrine_mongodb:
    connections:
        default:
            server: 'mongodb://%env(resolve:DOC_DATABASE_HOST)%:%env(resolve:DOC_DATABASE_PORT)%'
            options:
                username: '%env(resolve:DOC_DATABASE_USER)%'
                password: '%env(resolve:DOC_DATABASE_PASSWORD)%'
    default_database: '%env(resolve:DOC_DATABASE_NAME)%'
</code></pre>
<h3>Utilisation</h3>
<h4>Insérer un document</h4>
<p>Pour cela, il faut créer un objet correspondant au document que vous voulez insérer. On va prendre l’exemple d’un article de blog.</p>
<p>La suite est comme pour une autre base de données : il faut créer l’article, le persister via le DocumentManager et le flusher.</p>
<pre><code>// Article.php
use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;

/**
 * @MongoDB\Document(collection="article")
 */
class Article
{
    /**
     * @MongoDB\Id()
     */
    private string $id;

    /** @MongoDB\Field(type="string") */
    private string $title;

    /** @MongoDB\Field(type="string") */
    private string $content;

    /** @MongoDB\Field(type="string") */
    private string $status;

    /** @MongoDB\Field(type="date") */
    private \DateTime $createdDate;

    public function getId(): string
    {
        return $this-&gt;id;
    }

    public function getTitle(): string
    {
        return $this-&gt;title;
    }

    public function setTitle(string $title): Article
    {
        $this-&gt;title = $title;

        return $this;
    }

    public function getContent(): string
    {
        return $this-&gt;content;
    }

    public function setContent(string $content): Article
    {
        $this-&gt;content = $content;

        return $this;
    }

    public function getStatus(): string
    {
        return $this-&gt;status;
    }

    public function setStatus(string $status): Article
    {
        $this-&gt;status = $status;

        return $this;
    }

    public function getCreatedDate(): \DateTime
    {
        return $this-&gt;createdDate;
    }

    public function setCreatedDate(\DateTime $createdDate): Article
    {
        $this-&gt;createdDate = $createdDate;

        return $this;
    }
}
</code></pre>
<p>Après dans n'importe quelle classe, il faut déclarer <code>Doctrine\ODM\MongoDB\DocumentManager</code> dans le <code>__construct()</code> et appeler persist/flush.</p>
<pre><code>[...]
    public function __construct(
        public readonly DocumentManager $documentManager
    ) {
    }

    public function process(array $data): void
    {
        $article = new Article();
        $article
            -&gt;setTitle($data['title'])
            -&gt;setContent($data['content'])
            -&gt;setStatus($data['status'])
            -&gt;setCreatedDate($data['createdDate'])
        ;

        $this-&gt;documentManager-&gt;persist($article);
        $this-&gt;documentManager-&gt;flush();
    }
</code></pre>
<p>Voici la <a href="https://www.doctrine-project.org/projects/doctrine-mongodb-bundle/en/4.4/first_steps.html#persisting-objects-to-mongodb">documentation de MongoDB</a> si vous voulez aller plus loin.</p>
<h4>Récupérer un document</h4>
<p>Pour récupérer un document, il y a plusieurs possibilités comme décrites dans la <a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/2.3/reference/document-repositories.html">documentation</a>. Ici ça va être simplement par <code>id</code> et ça se fait en une ligne.</p>
<pre><code>[...]
    public function process(int $id): Article
    {
        return $this-&gt;documentManager-&gt;find(Article::class, $id);
    }
</code></pre>
<p>On ne voit pas qu'il s'agit d'une base de données MongoDB, Doctrine masque l'information. Mais cela peut être inutile de créer des objets correspondants aux documents. Et pour cela, il faut s'affranchir de Doctrine.</p>
<h2>Sans Doctrine mais avec <a href="https://github.com/facile-it/mongodb-bundle">Facile.it MongoDB Bundle</a></h2>
<h3>Installation</h3>
<p>Après avoir installé le bundle <code>composer require facile-it/mongodb-bundle</code>, à vous de vérifier et de mettre à jour la configuration.</p>
<pre><code># config/packages/facile_it_mongodb.yaml

mongo_db_bundle:
    data_collection: '%kernel.debug%'
    clients:
        default:
            hosts:
                - { host: '%env(resolve:DATABASE_HOST)%', port: '%env(int:DATABASE_PORT)%' }
            username:         '%env(resolve:DATABASE_USER)%'
            password:         '%env(resolve:DATABASE_PASSWORD)%'
            replicaSet:       '' # default null (no replica)
            ssl:              false
            connectTimeoutMS: 3000
            readPreference:   primaryPreferred

    connections:
        default:
            client_name:    default
            database_name:  '%env(resolve:DATABASE_NAME)%'
</code></pre>
<h3>Utilisation</h3>
<h4>Insérer un document</h4>
<p>Contrairement à la précédente solution, ici, pas besoin d'objet à persister : on utilise un tableau avec les données. À vous de voir si vous voulez vérifier le format et les données dedans.</p>
<p>Ensuite, pour insérer les données, il faut sélectionner la collection (ici <code>article</code> pour rester sur le thème) et tout simplement insérer le tableau.</p>
<pre><code>[...]
use MongoDB\Database;
[...]
    public function __construct(private readonly Database $database)
    {
    }

    public function process(array $data): void
    {
        $collection = $this-&gt;database-&gt;selectCollection('article');
        $collection-&gt;insertOne($data);
    }
}
</code></pre>
<h4>Récupérer un document</h4>
<p>Pour récupérer un document, on procède aussi à la sélection de la collection et le <code>findOne()</code> permet de rechercher sur n'importe quel champ.</p>
<pre><code>[...]
    public function process(int $id): array
    {
        $collection = $this-&gt;database-&gt;selectCollection('article');

        return $collection-&gt;findOne(['id' =&gt; $id]);
    }
</code></pre>
<p>Vous pouvez créer un repository avec l'ensemble des fonctions. Cela vous permettra d'être plus indépendant dans vos services vis-à-vis du choix de la base de données.</p>
<h2>Conclusion</h2>
<p>Nous sommes restés sur les bases qui sont l'insertion et la récupération d'un document, mais MongoDB a aussi un système d'indexation qui permet de gagner en efficacité pour la recherche de documents.</p>
<p>La documentation pour les deux possibilités est assez claire pour aller plus loin dans son utilisation.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Migrating from a Monolith to Microservices: A Step-by-Step Guide]]></title>
            <link>https://blog.eleven-labs.com/en/monolith-to-microservices/</link>
            <guid>https://blog.eleven-labs.com/en/monolith-to-microservices/</guid>
            <pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[This article is a step-by-step guide on how to migrate from a Monolith to Microservices]]></description>
            <content:encoded><![CDATA[<h2>What is a monolith ?</h2>
<p>In recent years, microservices architecture has become an increasingly popular way for organizations to build and deploy software applications. Unlike a monolithic architecture, in which all components of an application are bundled together and deployed as a single unit, a microservices architecture consists of a set of small, independent services that can be developed, tested, and deployed independently of one another.</p>
<p>While a monolithic architecture can be a good choice for simple, small-scale applications, it can become a bottleneck as an application grows in complexity and size. By contrast, a microservices architecture can offer several benefits, including improved scalability, flexibility, and maintainability.</p>
<p>However, migrating from a monolith to microservices is not a trivial task. It requires careful planning and execution, as well as a clear understanding of the benefits and challenges involved. In this article, we will outline the steps involved in migrating from a monolith to microservices, as well as best practices for designing, developing, and deploying microservices.</p>
<h2>Benefits of Microservices</h2>
<p>Before diving into the process of migrating from a monolith to microservices, it's worth considering the benefits that a microservices architecture can offer. Some of the key benefits include the following.</p>
<p><strong>Improved scalability</strong>: Because microservices are independent of one another, they can be scaled up or down independently as needed. This allows organizations to respond more quickly to changing workloads and demand, and can help to reduce the risk of downtime or other performance issues.</p>
<p>Greater <strong>flexibility</strong>: With a microservices architecture, it is easier to make changes or updates to a particular service without affecting the entire application. This can be particularly useful for organizations that need to release new features or updates on a frequent basis.</p>
<p>Enhanced <strong>maintainability</strong>: Because microservices are small and modular, they are easier to understand and maintain than a large, monolithic codebase. This can make it easier for developers to identify and fix issues, and can reduce the risk of introducing new bugs or regressions.</p>
<h2>Challenges of Migrating from a Monolith</h2>
<p>While the benefits of a microservices architecture are clear, migrating from a monolith to microservices is not without its challenges.</p>
<p><strong>Identifying the appropriate boundaries</strong> for microservices: One of the most important steps in migrating to microservices is identifying the appropriate boundaries for each service. This requires careful analysis of the existing codebase to determine which components should be separated into their own services, and which components should remain in the monolith.</p>
<p><strong>Extracting code</strong>: In order to migrate from a monolith to microservices, it will likely be necessary to extract the existing codebase to separate the appropriate components into their own services. This can be a time-consuming and complex process, especially for large, legacy codebases.</p>
<p><strong>Managing dependencies</strong>: Another challenge of migrating to microservices is managing dependencies between services. This can be particularly difficult when working with a large, complex codebase, as it may be difficult to identify all of the dependencies between different components.</p>
<p><strong>The heterogeneity</strong> of the code: sometimes a migration to a microservices architecture is accompanied by the introduction of new technologies or versions of dependencies used. This can result in a heterogeneity of processes and tools that you have to know how to manage on a daily basis.</p>
<p><strong>Complexification of the technical stack</strong>: the migration to a microservices architecture will require the introduction of new technologies to make the services communicate with each other. This will therefore add complexity to the technical stack and require an increase in skills on the part of the development team.</p>
<h2>Steps for Migrating to Microservices</h2>
<p>So, how do you go about migrating from a monolith to microservices? Here are the key steps to follow.</p>
<ol>
<li><strong>Identify the appropriate boundaries</strong> for microservices: As mentioned above, this is the first and most important step in the process. Use tools such as dependency analysis to identify which components of the monolith are candidates for migration to microservices.</li>
<li><strong>Extract the codebase</strong>: Once you have identified the appropriate boundaries for microservices, it will be necessary to refactor the codebase to extract the relevant components into their own services. This may involve breaking up the monolithic codebase into smaller, more modular pieces, and may also require changes to the application's data model and database schema. Whether it is a complete rewrite or a simple extraction of the code, the monolith will have to be adapted to communicate with the new service.</li>
<li><strong>Deploy the microservices</strong>: Once the codebase has been refactored, the next step is to deploy the microservices. This may involve deploying the services to different servers or containers, and may also require changes to the application's infrastructure, such as load balancers or service discovery tools.</li>
<li><strong>Test and monitor</strong> the microservices: After the microservices have been deployed, it's important to thoroughly test them to ensure that they are functioning correctly and meeting the required performance and reliability standards. It's also important to put in place monitoring and alerting tools to ensure that the microservices can be quickly and effectively managed in production.</li>
</ol>
<h2>Best Practices for Microservices</h2>
<p>In addition to the steps outlined above, there are also several best practices that organizations should follow when designing, developing, and deploying microservices. Some of the key best practices include:</p>
<p>Use a <strong>solid application architecture</strong>: A well-designed application architecture is critical for the success of any microservices project. This should include a clear separation of concerns, as well as well-defined interfaces between services.</p>
<p>Follow a <strong>continuous delivery</strong> approach: To ensure that microservices can be released and updated quickly and efficiently, it's important to adopt a continuous delivery approach. This may involve using tools such as automated testing, continuous integration, and deployment pipelines.</p>
<p><strong>Monitor and manage</strong> microservices in production: To ensure that microservices are functioning correctly and meeting performance and reliability standards in production, it's important to put in place monitoring and alerting tools. This will allow you to quickly identify and resolve any issues that may arise.</p>
<h2>Conclusion</h2>
<p>Migrating from a monolith to microservices is not a trivial task, but it can offer significant benefits in terms of scalability, flexibility, and maintainability. By carefully planning and executing the migration process, and following best practices for designing, developing, and deploying microservices, organizations can successfully transition to a microservices architecture and reap the rewards of this powerful software development paradigm.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[D'un monolithe vers une architecture microservices : les étapes pour y arriver]]></title>
            <link>https://blog.eleven-labs.com/fr/monolithe-a-microservices/</link>
            <guid>https://blog.eleven-labs.com/fr/monolithe-a-microservices/</guid>
            <pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Cet article va vous présenter les étapes pour passer d'un monolithe vers une architecture microservices.]]></description>
            <content:encoded><![CDATA[<h2>Qu'est ce qu'un monolithe ?</h2>
<p>Ces dernières années, l'architecture de microservices est devenue un moyen de plus en plus populaire pour les organisations de créer et de déployer des applications logicielles. Contrairement à une architecture monolithique, dans laquelle tous les composants d'une application sont regroupés et déployés comme une seule unité, une architecture de microservices consiste en un ensemble de petits services indépendants qui peuvent être développés, testés et déployés indépendamment les uns des autres.</p>
<p>Bien qu'une architecture monolithique puisse être un bon choix pour des applications simples à petite échelle, elle peut devenir un goulot d'étranglement à mesure qu'une application gagne en complexité et en taille. En revanche, une architecture de microservices peut offrir plusieurs avantages, notamment une évolutivité, une flexibilité et une maintenabilité améliorées.</p>
<p>Cependant, migrer d'un monolithe vers des microservices n'est pas une tâche aisée. Cela nécessite une planification et une exécution minutieuses, ainsi qu'une compréhension claire des avantages et des défis en cause. Dans cet article, nous décrirons les étapes de la migration d'un monolithe vers des microservices, ainsi que les meilleures pratiques pour concevoir, développer et déployer des microservices.</p>
<h2>Avantages des microservices</h2>
<p>Avant de plonger dans le processus de migration d'un monolithe vers des microservices, il convient de considérer les avantages qu'une architecture de microservices peut offrir.</p>
<p><strong>Évolutivité améliorée</strong> : étant donné que les microservices sont indépendants les uns des autres, ils peuvent être scalés indépendamment selon les besoins. Cela permet aux organisations de réagir plus rapidement à l'évolution des charges de travail et de la demande, et peut aider à réduire le risque de temps d'arrêt ou d'autres problèmes de performances.</p>
<p>Une plus grande <strong>flexibilité</strong> : avec une architecture de microservices, il est plus facile d'apporter des modifications ou des mises à jour à un service particulier sans affecter l'ensemble de l'application. Cela peut être particulièrement utile pour les organisations qui ont besoin de publier fréquemment de nouvelles fonctionnalités ou mises à jour.</p>
<p><strong>Maintenabilité améliorée</strong> : étant donné que les microservices sont petits et modulaires, ils sont plus faciles à comprendre et à faire évoluer qu'une grande base de code monolithique. Cela peut permettre aux développeurs d'identifier et de résoudre plus facilement les problèmes, et peut réduire le risque d'introduction de nouveaux bugs ou de régressions.</p>
<h2>Défis de la migration à partir d'un monolithe</h2>
<p>Alors que les avantages d'une architecture de microservices sont clairs, la migration d'un monolithe vers des microservices n'est pas sans défis. Voici les principaux défis à prendre en compte.</p>
<p>Identification du <strong>périmètre</strong> de chaque microservice : l'une des étapes les plus importantes de la migration vers les microservices consiste à identifier le périmètre fonctionnel pour chaque service. Cela nécessite une analyse minutieuse de la base de code existante pour déterminer quels composants doivent être séparés en leurs propres services et quels composants doivent rester dans le monolithe.</p>
<p><strong>L'extraction</strong> du code : afin de migrer d'un monolithe vers des microservices, il sera probablement nécessaire de refactoriser la base de code existante pour extraire les composants appropriés dans leurs propres services. Cela peut être un processus long et complexe, en particulier pour les grandes bases de code héritées.</p>
<p>Gestion des <strong>dépendances</strong> : un autre défi de la migration vers les microservices est la gestion des dépendances entre les services. Cela peut être particulièrement difficile lorsque vous travaillez avec une base de code volumineuse et complexe, car il peut être difficile d'identifier toutes les dépendances entre les différents composants.</p>
<p><strong>L'hétérogénéïté</strong> du code : parfois une migration vers une architecture microservices s'accompagne par l'introduction des nouvelles technologies ou versions de dépendances utilisées. Cela peut se traduire par une hérérogénéïté des process et outils qu'il faut savoir gérer au quotidien.</p>
<p><strong>La compléxification de la stack technique</strong> : la migration vers une architecture microservices va nécessiter d'introduire  de nouvelles technologies pour faire communiquer les services entre eux. Cela va donc rajouter de la compléxité à la stack technique et nécessiter une montée en compétences de la part de l'équipe de développement.</p>
<h2>Étapes de la migration vers les microservices</h2>
<p>Alors, comment procédez-vous pour migrer d'un monolithe vers des microservices ? Voici les étapes clés à suivre.</p>
<ol>
<li><strong>Identifiez le périmètre fonctionnel</strong> pour chaque microservice : comme mentionné ci-dessus, il s'agit de la première et de la plus importante étape du processus. Utilisez des outils tels que l'analyse des dépendances pour identifier les composants du monolithe candidats à la migration vers les microservices.</li>
<li><strong>Extraire la base de code</strong> : une fois la première étape terminée, il sera nécessaire d'extraire la base de code pour séparer les composants pertinents dans leurs propres services. Cela peut impliquer de diviser la base de code monolithique en éléments plus petits et plus modulaires, et peut également nécessiter des modifications du modèle de données et du schéma de base de données de l'application. Qu'il s'agisse d'une réécriture complète (refactorisation) ou d'une simple extraction du code, le monolith devra être adapté pour communiquer avec le nouveau service.</li>
<li><strong>Déployer les microservices</strong> : une fois la base de code refactorisée, l'étape suivante consiste à déployer les microservices. Cela peut impliquer le déploiement des services sur différents serveurs ou conteneurs, et peut également nécessiter des modifications de l'infrastructure de l'application, telles que des load balancers ou des outils de découverte de services.</li>
<li><strong>Tester et surveiller</strong> les microservices : une fois les microservices déployés, il est important de les tester minutieusement pour s'assurer qu'ils fonctionnent correctement et qu'ils répondent aux normes de performance et de fiabilité requises. Il est également important de mettre en place des outils de surveillance et d'alerte pour s'assurer que les microservices peuvent être gérés rapidement et efficacement en production.</li>
</ol>
<h2>Bonnes pratiques pour les microservices</h2>
<p>Outre les étapes décrites ci-dessus, il existe également plusieurs bonnes pratiques que les organisations doivent suivre lors de la conception, du développement et du déploiement de microservices.</p>
<p>Utilisez une <strong>architecture d'application solide</strong> : une architecture d'application bien conçue est essentielle au succès de tout projet de microservices. Cela devrait inclure une séparation claire des responsabilités, ainsi que des interfaces bien définies entre les services.</p>
<p>Suivez une approche de <strong>livraison continue</strong> : pour garantir que les microservices peuvent être publiés et mis à jour rapidement et efficacement, il est important d'adopter une approche de livraison continue. Cela peut impliquer l'utilisation d'outils tels que les tests automatisés, l'intégration continue et les pipelines de déploiement.</p>
<p><strong>Surveiller</strong> et gérer les microservices en production : pour s'assurer que les microservices fonctionnent correctement et respectent les normes de performance et de fiabilité en production, il est important de mettre en place des outils de surveillance et d'alerte. Cela vous permettra d'identifier et de résoudre rapidement les problèmes qui pourraient survenir.</p>
<h2>Conclusion</h2>
<p>La migration d'un monolithe vers des microservices n'est pas une tâche triviale, mais elle peut offrir des avantages significatifs en termes d'évolutivité, de flexibilité et de maintenabilité. En planifiant et en exécutant soigneusement le processus de migration et en suivant les bonnes pratiques de conception, de développement et de déploiement de microservices, les organisations peuvent réussir la transition vers une architecture de microservices et récolter les fruits de ce puissant paradigme de développement logiciel.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dédoublonnez vos photos]]></title>
            <link>https://blog.eleven-labs.com/fr/dedoublonnez-vos-photos/</link>
            <guid>https://blog.eleven-labs.com/fr/dedoublonnez-vos-photos/</guid>
            <pubDate>Wed, 25 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Comme moi vous avez sur vos disques dur des copies, de copie, de copie de photos et vous souhaiteriez faire un peu de ménage ? C'est par ici.]]></description>
            <content:encoded><![CDATA[<p></p>
<h2>Introduction</h2>
<p>Le dédoublonnage de photos est un processus qui vise à détecter et supprimer les images en double d'une collection.
Il est utilisé pour nettoyer des albums photos ou des bases de données d'images et pour améliorer la qualité des résultats de recherche d'images.
Il existe différentes méthodes pour le dédoublonnage, comme la comparaison de pixels, des caractéristiques d'image, des métadonnées et des signatures d'image, chacune ayant des avantages et inconvénients.</p>
<p>Dans cet article, nous combinerons plusieurs de ces techniques afin d'identifier des doublons.</p>
<h3>0. Avertissement</h3>
<p>Il est important de noter que le dédoublonnage de photos peut entraîner la perte de données, il est donc important de sauvegarder les images avant de les supprimer.
Il est également recommandé de vérifier manuellement les images supprimées afin de s'assurer qu'elles sont en effet des doublons et non des images uniques.</p>
<h3>I. Savoir à coup sûr si un fichier est déjà présent dans ma collection d'image</h3>
<p>La première méthode que nous utiliserons est de générer une somme de contrôle SHA-1 à partir du contenu du fichier puis de vérifier dans un registre si celle-ci s'y trouve déjà.</p>
<p>La somme SHA-1 (Secure Hash Algorithm 1) est un algorithme de hachage cryptographique qui permet de créer une empreinte numérique (ou "somme de contrôle") d'un fichier. Cette empreinte est générée en transformant les données du fichier en un code à 160 bits (40 caractères hexadecimal), qui est unique pour chaque fichier.
Si un fichier change, même de façon minime, sa somme SHA-1 sera complètement différente.</p>
<p>Les sommes SHA-1 sont souvent utilisées pour vérifier l'intégrité des fichiers téléchargés sur internet, pour s'assurer qu'ils n'ont pas été altérés pendant leur transfert. On peut comparer la somme SHA-1 d'un fichier téléchargé avec la somme SHA-1 d'un fichier original pour vérifier qu'ils sont identiques.
De cette manière, on peut être sûr que le fichier téléchargé est le même que celui qui a été diffusé par son auteur ou son éditeur.</p>
<p>Il est important de noter que même si la somme SHA-1 est encore utilisée, il y a des algorithmes de hachage plus récents qui sont considérés plus sécurisés (comme SHA-256, SHA-3, etc).</p>
<p>Calculons ainsi le hash SHA-1 de la photo suivante :
</p>
<p>Pour faire cela nous utiliserons le code suivant :</p>
<pre><code>&lt;?php

echo sha1_file('~/IMG_0546.jpg');
</code></pre>
<p>Ce qui nous donnera le résultat suivant :</p>
<pre><code>8ffe297f8e88d5573d375cd12536e33db8d49c54
</code></pre>
<p>Si deux fichiers ont le même hash, alors on peut être sûr (ou presque...), que ces derniers sont identiques en tous points et que nous pouvons archiver n'importe lequel des deux. Toutefois, cela ne fonctionne que si notre fichier n'a jamais été importé dans un logiciel (qui ajoutera des métadonnées sur le fichier) ou que nous n'avons pas fait de post traitement dessus.</p>
<p>Si on refait la même opération sur la photo qui s'est affichée, dans votre navigateur (et qui a été redimensionnée pour prendre moins de place) :</p>
<pre><code>&lt;?php

echo sha1_file('/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546.jpg');
</code></pre>
<p>Le résultat ne sera pas du tout le même :</p>
<pre><code>fbde9cebfa1522b7489c2e5360bf114f203d7c62'
</code></pre>
<p>En effet, comme dit précédemment, modifier un seul bit de notre fichier aura pour effet de complétement changer la somme de contrôle de celle-ci. Aussi pour trouver les doublons, nous allons devoir avoir recours à d'autres techniques plus permissives.</p>
<h3>II. Savoir si une image a le même aspect visuel qu'une autre</h3>
<p>Nous ne pouvons donc pas seulement utiliser la somme de contrôle afin de trouver tous les doublons d'une même photo. Nous pouvons toutefois nous reposer sur un deuxième type de hash dans le but d'identifier d'éventuels candidats : le perceptual hash.</p>
<p>Le perceptual hash, ou "empreinte perceptuelle", est un algorithme de hachage utilisé pour identifier les images similaires. Il fonctionne en créant un hash (ou une empreinte numérique) unique pour chaque image en comparant les caractéristiques visuelles de l'image plutôt que les données binaires de l'image elle-même.</p>
<p>Il compare les caractéristiques de l'image telles que les niveaux de luminosité, les contours et les textures, pour créer un hash qui est sensible aux différences subtiles entre les images. Cela permet de détecter les images similaires même si elles ont subi des modifications mineures, comme une rotation ou un redimensionnement.</p>
<p>Le perceptual hash est souvent utilisé pour l'analyse d'image, la reconnaissance d'images et la détection de contenu dupliqué, comme dans la vérification de contenu copyright ou, comme dans notre cas, dans la suppression de duplicat d'images. Il est également utilisé dans les systèmes de surveillance vidéo pour détecter des intrusions ou pour des applications de reconnaissance faciale pour identifier les personnes.</p>
<p>Afin de calculer simplement un perceptual hash, on peut utiliser une librairie PHP tel que l'excellente <a href="https://github.com/jenssegers/imagehash">jenssegers/imagehash</a>.</p>
<p>Après l'avoir installée à l'aide de la commande <code>composer require jenssegers/imagehash</code>, on pourra utiliser le morceau de code suivant :</p>
<pre><code>&lt;?php

require(__DIR__.'/vendor/autoload.php');

use Jenssegers\ImageHash\ImageHash;

$hasher = new ImageHash();
$hash = $hasher-&gt;hash('/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546.jpg');

echo $hash-&gt;toHex();
</code></pre>
<p>Qui nous donnera comme résultat :</p>
<pre><code>a3d7d5f2e22489b3
</code></pre>
<p>Je vais maintenant faire quelques ajustements sur ma photo afin de changer les niveaux de couleurs et nous obtenons ainsi la photo suivante (plus pâle, plus jaune) :</p>
<p></p>
<p>En exécutant le même bout de code que précédemment :</p>
<pre><code>&lt;?php

require(__DIR__.'/vendor/autoload.php');

use Jenssegers\ImageHash\ImageHash;

$hasher = new ImageHash();
$hash = $hasher-&gt;hash('/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546_leveling.jpg');

echo $hash-&gt;toHex();
</code></pre>
<p>Nous obtenons le résultat suivant :</p>
<pre><code>a3d7d5f2e22489b3
</code></pre>
<p>Vous avez bien lu : nous avons toujours le même perceptual hash !
Même si les couleurs de l'image ont été modifiées, la donnée visuelle est toujours la même, et donc le hash de même. Pour avoir un hash différent il va falloir faire des modifications beaucoup plus aggressive. Je vais donc maintenant changer réellement l'aspect d'une zone entière de l'image en mettant un smiley par-dessus la tête de mon chat :</p>
<p></p>
<p>En exécutant le même bout de code que précédemment :</p>
<pre><code>&lt;?php

use Jenssegers\ImageHash\ImageHash;

$hasher = new ImageHash();
$hash = $hasher-&gt;hash('/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546_emoji.jpg');

echo $hash-&gt;toHex();
</code></pre>
<p>Nous obtenons cette fois-ci un résultat bien différent :</p>
<pre><code>a3d7d5f2c26449b3
</code></pre>
<p>Si on compare les deux hashes :</p>
<p>a3d7d5f2<strong>e</strong>2<strong>2</strong>4<strong>8</strong>9b3</p>
<p>a3d7d5f2<strong>c</strong>2<strong>6</strong>4<strong>4</strong>9b3</p>
<p>On peut maintenant constater que le hash a évolué sur quelques caractères et on peut presque même deviner la zone qui a été modifiée en regardant la position des caractères du hash qui ont changés !</p>
<p>Il existe plusieurs méthodes de hachage pour le perceptual hash mais voici comment fonctionne la forme la plus simple :</p>
<p><em>Dans le cas des images, les hautes fréquences donnent des détails, tandis que les basses fréquences montrent la structure.</em></p>
<p><em>Une grande image détaillée comporte beaucoup de hautes fréquences. Une très petite image manque de détails, elle est donc composée uniquement de basses fréquences.</em></p>
<h4>1. Réduire la taille</h4>
<p>Le moyen le plus rapide de supprimer les hautes fréquences et les détails est de réduire la taille de l'image. Dans ce cas, réduisez-la à 8x8 de façon à ce qu'il y ait 64 pixels au total. Ne prenez pas la peine de conserver le rapport hauteur/largeur, réduisez simplement l'image pour qu'elle tienne dans un carré de 8x8.</p>
<p>De cette façon, le hachage correspondra à toute variation de l'image, indépendamment de l'échelle ou du rapport d'aspect.</p>
<p> &lt;-- résultat en taille réelle</p>
<p>&lt;img height="512" src="/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546_8x8.jpg" width="512"/&gt;</p>
<h4>2. Réduire la couleur</h4>
<p>La petite image 8x8 est convertie en niveaux de gris. Cela fait passer le hachage de 64 pixels (64 rouges, 64 verts et 64 bleus) à 64 couleurs au total.</p>
<p> &lt;-- résultat en taille réelle</p>
<p>&lt;img height="512" src="/imgs/posts/2023-01-25-dedoublonnez-vos-photos/IMG_0546_8x8_greyscale.jpg" width="512"/&gt;</p>
<h4>3. Moyenne des couleurs</h4>
<p>Calculer la valeur moyenne des 64 couleurs.</p>
<h4>4. Calculer les bits</h4>
<p>C'est la partie la plus amusante. Chaque bit est simplement défini selon que la valeur de la couleur est supérieure ou inférieure à la moyenne.</p>
<h4>5. Construire le hachage</h4>
<p>Placez les 64 bits dans un entier de 64 bits. L'ordre n'a pas d'importance, du moment que vous êtes cohérent.</p>
<h4>6. Résultat</h4>
<p>0xa3d7d5f2e22489b3</p>
<h4>7. Conclusion</h4>
<p>Le hachage résultant ne changera pas si l'image est mise à l'échelle ou si le rapport d'aspect change. L'augmentation ou la diminution de la luminosité ou du contraste, ou même l'altération des couleurs, ne modifieront pas de façon spectaculaire la valeur de hachage.</p>
<p>Si nous voulons comparer deux images, nous construirons le hachage de chaque image et on comptera le nombre de positions de bits qui sont différentes : il s'agit de la distance de Hamming. Une distance de zéro indique qu'il s'agit probablement d'une image très similaire (ou d'une variation de la même image).</p>
<p>Cette méthode nous permet donc d'identifier des images très proches visuellement, mais attention, elle ne sont pas pour autant identiques aussi il faudra nous baser sur d'autres critères avant de prendre une décision.</p>
<h3>III. Identifier les metadata d'une photo</h3>
<p>Afin de trouver des doublons, nous pouvons aussi utiliser Exiftool. Exiftool est un outil en ligne de commande qui permet de lire, écrire et éditer les métadonnées dans les fichiers images. Il peut également être utilisé pour détecter les images en double en comparant les métadonnées de ces images.</p>
<p>L'un des avantages d'utiliser Exiftool pour le dédoublonnage de photos est qu'il peut lire les métadonnées de nombreux formats d'images différents, y compris JPEG, TIFF, PNG, et RAW. Il peut également être utilisé pour lire les métadonnées des images stockées sur des appareils photo numériques, comme les informations de prise de vue, les réglages d'exposition, etc.</p>
<p>Pour utiliser Exiftool pour détecter les images en double, il suffit de lancer la commande suivante :</p>
<pre><code>exiftool -duplicates -r ~/photos &gt; result.txt
</code></pre>
<p>Cette commande va parcourir tous les fichiers dans le répertoire spécifié (et ses sous-répertoires) et va écrire les images en double dans un fichier texte appelé <code>result.txt</code>.</p>
<p>Vous pouvez également utiliser des options pour spécifier les métadonnées à utiliser pour la comparaison, comme la date de prise de vue, la résolution, etc.</p>
<p>Il est important de noter qu'Exiftool ne peut pas identifier les images en double basé sur le contenu de l'image, comme le fait le perceptual hash, il utilise uniquement les métadonnées pour identifier les images en double.</p>
<p>Il peut donc y avoir des faux positifs ou des images manquantes si les métadonnées ont été modifiées ou sont absentes. Il est donc important de vérifier manuellement les résultats pour s'assurer de la précision. Dans mon cas, je préfère ainsi utiliser Exiftool uniquement afin d'extraire les métadonnées d'un fichier.</p>
<p>C'est dans ce but que j'ai écrit la librairie PHP suivante : <a href="https://packagist.org/packages/jmoati/exiftool">jmoati/exiftool</a>.</p>
<p>Après un rapide <code>composer require jmoati/exiftool</code> et avoir installé <code>exiftool</code> dans un conteneur Docker ou sur votre système, vous pourrez utiliser le code suivant :</p>
<pre><code>&lt;?php

require 'vendor/autoload.php';

use Jmoati\ExifTool\ExifTool;

$media = ExifTool::openFile('~/IMG_0546.JPEG');

echo json_encode($media-&gt;data());
</code></pre>
<p>Ce qui nous donnera le résultat suivant :</p>
<pre><code>{
    "File":{
        "FileSize":808104,
        "FileType":"JPEG",
        "FileTypeExtension":"jpg",
        "MIMEType":"image/jpeg",
        "ExifByteOrder":"Big-endian (Motorola, MM)",
        "ImageWidth":2048,
        "ImageHeight":1536,
        "EncodingProcess":"Baseline DCT, Huffman coding",
        "BitsPerSample":8,
        "ColorComponents":3,
        "YCbCrSubSampling":"YCbCr4:2:0 (2 2)"
    },
    "JFIF":{
        "JFIFVersion":1.01,
        "ResolutionUnit":"inches",
        "XResolution":300,
        "YResolution":300
    },
    "EXIF":{
        "Make":"Apple",
        "Model":"iPhone 13 Pro",
        "Orientation":"Horizontal (normal)",
        "XResolution":72,
        "YResolution":72,
        "ResolutionUnit":"inches",
        "Software":"15.4.1",
        "ModifyDate":"2022:05:14 14:01:09",
        "HostComputer":"iPhone 13 Pro",
        "TileWidth":512,
        "TileLength":512,
        "YCbCrPositioning":"Centered",
        "ExposureTime":"1/81",
        "FNumber":2.7999999999999998,
        "ExposureProgram":"Program AE",
        "ISO":200,
        "ExifVersion":"0232",
        "DateTimeOriginal":"2022:05:14 14:01:09",
        "CreateDate":"2022:05:14 14:01:09",
        "OffsetTime":"+02:00",
        "OffsetTimeOriginal":"+02:00",
        "OffsetTimeDigitized":"+02:00",
        "ComponentsConfiguration":"Y, Cb, Cr, -",
        "ShutterSpeedValue":"1/81",
        "ApertureValue":2.7999999999999998,
        "BrightnessValue":3.137087712,
        "ExposureCompensation":0,
        "MeteringMode":"Multi-segment",
        "Flash":"Off, Did not fire",
        "FocalLength":"9.0 mm",
        "SubjectArea":"2013 1500 2310 1327",
        "SubSecTimeOriginal":305,
        "SubSecTimeDigitized":305,
        "FlashpixVersion":"0100",
        "ColorSpace":"Uncalibrated",
        "ExifImageWidth":4032,
        "ExifImageHeight":3024,
        "SensingMethod":"One-chip color area",
        "SceneType":"Directly photographed",
        "ExposureMode":"Auto",
        "WhiteBalance":"Auto",
        "FocalLengthIn35mmFormat":"77 mm",
        "SceneCaptureType":"Standard",
        "LensInfo":"1.570000052-9mm f/1.5-2.8",
        "LensMake":"Apple",
        "LensModel":"iPhone 13 Pro back triple camera 9mm f/2.8",
        "CompositeImage":"General Composite Image",
        "GPSLatitudeRef":"North",
        "GPSLatitude":"&lt;redacted&gt;",
        "GPSLongitudeRef":"East",
        "GPSLongitude":"&lt;redacted&gt;",
        "GPSAltitudeRef":"Above Sea Level",
        "GPSAltitude":"88.93688587 m",
        "GPSSpeedRef":"km/h",
        "GPSSpeed":0,
        "GPSImgDirectionRef":"Magnetic North",
        "GPSImgDirection":286.21852100000001,
        "GPSDestBearingRef":"Magnetic North",
        "GPSDestBearing":286.21852100000001,
        "GPSHPositioningError":"35 m"
    },
    "MakerNotes":{
        "RunTimeFlags":"Valid",
        "RunTimeValue":42659336558125,
        "RunTimeScale":1000000000,
        "RunTimeEpoch":0,
        "AccelerationVector":"-0.9578987955 0.0249360241 -0.2511245309",
        "ContentIdentifier":"ABDDE637-8EF6-4C67-B0FD-E7DB4BC0526E"
    },
    "MPF":{
        "MPFVersion":"0100",
        "NumberOfImages":2,
        "MPImageFlags":"(none)",
        "MPImageFormat":"JPEG",
        "MPImageType":"Undefined",
        "MPImageLength":106047,
        "MPImageStart":702057,
        "DependentImage1EntryNumber":0,
        "DependentImage2EntryNumber":0,
        "MPImage2":"(Binary data 106047 bytes, use -b option to extract)"
    },
    "ICC_Profile":{
        "ProfileCMMType":"Apple Computer Inc.",
        "ProfileVersion":"4.0.0",
        "ProfileClass":"Display Device Profile",
        "ColorSpaceData":"RGB ",
        "ProfileConnectionSpace":"XYZ ",
        "ProfileDateTime":"2017:07:07 13:22:32",
        "ProfileFileSignature":"acsp",
        "PrimaryPlatform":"Apple Computer Inc.",
        "CMMFlags":"Not Embedded, Independent",
        "DeviceManufacturer":"Apple Computer Inc.",
        "DeviceModel":"",
        "DeviceAttributes":"Reflective, Glossy, Positive, Color",
        "RenderingIntent":"Perceptual",
        "ConnectionSpaceIlluminant":"0.9642 1 0.82491",
        "ProfileCreator":"Apple Computer Inc.",
        "ProfileID":"ca1a9582257f104d389913d5d1ea1582",
        "ProfileDescription":"Display P3",
        "ProfileCopyright":"Copyright Apple Inc., 2017",
        "MediaWhitePoint":"0.95045 1 1.08905",
        "RedMatrixColumn":"0.51512 0.2412 -0.00105",
        "GreenMatrixColumn":"0.29198 0.69225 0.04189",
        "BlueMatrixColumn":"0.1571 0.06657 0.78407",
        "RedTRC":"(Binary data 32 bytes, use -b option to extract)",
        "ChromaticAdaptation":"1.04788 0.02292 -0.0502 0.02959 0.99048 -0.01706 -0.00923 0.01508 0.75168",
        "BlueTRC":"(Binary data 32 bytes, use -b option to extract)",
        "GreenTRC":"(Binary data 32 bytes, use -b option to extract)"
    },
    "Composite":{
        "RunTimeSincePowerUp":"11:50:59",
        "Aperture":2.7999999999999998,
        "ImageSize":"2048x1536",
        "LensID":"iPhone 13 Pro back triple camera 9mm f/2.8",
        "Megapixels":3.1000000000000001,
        "ScaleFactor35efl":8.5999999999999996,
        "ShutterSpeed":"1/81",
        "SubSecCreateDate":"2022:05:14 14:01:09.305+02:00",
        "SubSecDateTimeOriginal":"2022:05:14 14:01:09.305+02:00",
        "SubSecModifyDate":"2022:05:14 14:01:09+02:00",
        "GPSAltitude":"88.9 m Above Sea Level",
        "GPSLatitude":"&lt;redacted&gt;",
        "GPSLongitude":"&lt;redacted&gt;",
        "CircleOfConfusion":"0.004 mm",
        "FOV":"26.3 deg",
        "FocalLength35efl":"9.0 mm (35 mm equivalent: 77.0 mm)",
        "GPSPosition":"&lt;redacted&gt;",
        "HyperfocalDistance":"8.24 m",
        "LightValue":8.3000000000000007
    }
}
</code></pre>
<p>Voici une quantité monstre d'informations plus intéressantes les unes que les autres. Ne les utilisez pas pour trouver des doublons ! Utilisez-les plutôt comme discriminant afin d'identifier les "doubles légitimes".</p>
<p>Même si une image a le même perceptual hash, si la date de prise de vue n'est pas exactement la même (Exif.DateTimeOriginal) ou que l'identifiant de média (Exif.MakerNotes.ContentIdentifier) est différent ou que le temps écoulé depuis lequel l'appareil est allumé (Exif.Composite.RunTimeSincePowerUp) n'est pas identique alors, ce n'est pas un doublon !</p>
<p>Cette méthode est donc à coupler avec la précédente.</p>
<h2>Conclusion</h2>
<p>Un fichier qui a la même somme de contrôle (MD5, SHA-1, etc.) peut-être considéré comme un doublon, car la chance que deux photos partagent le même hash est relativement faible. Dans le cas où deux photos ont le même perceptual hash, cela ne veux pas forcément dire que nous avons un doublon.</p>
<p>Pour savoir si la suppression de l'un ou de l'autre est légitime, il nous faut confronter les métadonnées de celles-ci.</p>
<p>Enfin, afin de savoir quelle image garder, écrivez-vous un petit algorithme de scoring dans le but de valoriser par exemple les photos en RAW, ayant une position GPS, n'étant pas passé par un logiciel de retouche, etc.</p>
<p>Bonne chance, et que la force soit avec vous dans cette dangereuse entreprise !</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chronique d'un retour en douceur au présentiel avec React Day Berlin, qu'attendre des conférences ?]]></title>
            <link>https://blog.eleven-labs.com/fr/react-day-berlin/</link>
            <guid>https://blog.eleven-labs.com/fr/react-day-berlin/</guid>
            <pubDate>Wed, 11 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Avec une reprise progressive des conférences dev depuis la crise COVID, le React Day Berlin a eu lieu cette année le 2 et 5 décembre en modalité mixte. J’y suis allée pour la première fois, et je vous propose dans cet article mon expérience complète !]]></description>
            <content:encoded><![CDATA[<p>Avec une reprise progressive des conférences depuis la crise de COVID, le React Day Berlin a eu lieu cette année le 2 et 5 décembre en modalité mixte : un jour en présentiel et un jour en distanciel. Le vendredi s’est passé dans <strong>l’espace Kosmos</strong>, un théâtre des années 1960 avec une capacité de plus de 800 personnes et deux salles principales. J’y suis allée pour la première fois, et vous propose dans les lignes qui suivent un retour de mon expérience.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/kosmos-place.jpg" width="800px" alt="" style="display: block; margin: auto;" /&gt;
&lt;figcaption&gt;
&lt;span&gt;Le site Kosmos prêt pour le premier jour du React Day Berlin.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<h2>Le chemin vers la conférence</h2>
<p>Le voyage a commencé mercredi 30 novembre à 19 heures depuis Gare de l'Est, Paris, avec destination Berlin. J'avoue que je n'ai pas eu énormément de chance avec les trains cette fois. Avec une heure d'arrivée originelle estimée à 6:34 a.m., je ne suis descendue à Berlin hbf qu'à 11:15 a.m à cause d’une panne de train qui m’a obligée à me rendre jusqu'à Hambourg et puis Berlin. Et pourquoi arriver jeudi et pas vendredi ? Eh bien, c'est parce que <strong>j'ai participé à l'organisation de l'événement en tant que bénévole</strong>.</p>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Bénévole ? Qu'est-ce-que c'est ?&lt;/p&gt;</p>
<p><em>Les meetups de GitNation sont ouverts aux bénévoles. Il suffit de remplir un formulaire en ligne normalement disponible sur le site web de la conférence et attendre leur réponse. J'ai postulé fin octobre et j’ai reçu la convocation une semaine après par mail. La communication a été fluide, avec des réponses plutôt claires du côté des organisateurs. Une semaine avant le React Day Berlin on a eu un videocall avec tous les participants choisis, et pendant lequel les tâches nous ont été assignées pour le 2 décembre.</em></p>
<p><em>Participer en tant que bénévole implique d'être présent la veille de la conférence pour préparer le lieu et bien entendu de se rendre disponible pour l’organisation le jour de l'événement. En échange, les bénévoles peuvent avoir accès à l'intégralité de l'événement, les enregistrements des expositions inclus, et 6 mois d'accès Multipass aux événements de GitNation. Il vaut mieux savoir que le billet d'entrée en full remote coûtait environ 80 EUR, le billet hybride 480 EUR, et le Multipass annuel plus de 900 EUR.</em>
&lt;/div&gt;</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/react-day-berlin-1.jpg" width="800px" alt="Variété de goodies avec le logo React Day, tels que des autocollants et des badges." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Autocollants, épingles et badges prêts.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Finalement à Berlin, je devais être sur place le jeudi à 12h. J’ai déposé mes affaires au Airbnb, qui n'était heureusement qu'à 10 minutes à pied du complexe Kosmos dans le quartier Friedrichshain. Une fois là, j’ai pu rencontrer une dizaine des gens, tous bénévoles eux aussi. La plupart d’entre eux étaient aussi devs, mais tous habitaient à Berlin. Ceci dit, malgré le fait d'être dans la capitale allemande, la communication de tout le voyage s’est passée entièrement en anglais.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/kosmos.jpg" width="800px" alt="Mur en pierre blanche et détails en jaune, noir, vert et rouge avec des lettres bleues." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Intérieur de la salle principale de Blade Runner.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>La première journée était guidée par Veronika, chargée de l'organisation des événements de GitNation, qui a divisé l'équipe de bénévoles en squads. Les tâches étaient assez simples et on était nombreux à les faire, ce qui a été très appréciable pour passer le temps plus rapidement étant donné que je n’avais pas dormi le soir. Une équipe était chargéé de mettre en place les signalisations des salles, une autre de monter les décors, d'autres devaient ordonner les badges d'accès alphabétiquement, et la mienne étaient en charge des goodie bags. Avec plein des cartons sur le sol et un déjeuner complet offert, nous avons rempli plus de 450 sacs avec les goodies des sponsors.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/sous-verre.jpg" width="800px" alt="Trois sous-verre avec le logo d'Internet Explorer, JavaScript et TypeScript" style="display: block; margin: auto;" /&gt;
&lt;span&gt;Sous-verres thématiques pour les participants.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Etonnant, mais c'était plutôt drôle à faire ! On s’est divisés en stations ou chacun était chargé d’un des éléments. Les sacs étaient plutôt classiques : une tote bag en coton, avec quelques stickers, des dessousde  verre JS et TS, un cache-camera, des cartes postales, et un mystérieux boomerang. À 18h nous avions fini et sommes rentrés chez nous.</p>
<h2>L'événement : goodies, nourriture et plein de gens</h2>
<p>Le lendemain, c'était la journée la plus importante de la conférence, avec plus de 25 speakers et plusieurs workshops gratuits. Dans le salon principal se tenaient les conférences du track Blade Runner, et dans le secondaire celles du track appelé Mnemonic.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/breakfast.jpg" width="800px" alt="Trois plateaux en métal avec de la nourriture sur une table blanche." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Pâtisseries du petit-déjeuner.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>L'équipe des bénévoles devait être sur place à 7h pour inscrire, guider ou donner des goodie bags aux participants qui ont commencé à arriver à 8h. Le matin a donc commencé avec l'accueil des participants et un petit déjeuner avec du café et des viennoiseries dans les deux buffets disponibles à côté de chaque salon. On remettait à chacun un carton jaune ou un carton bleu dans le but de diviser les visiteurs de la façon la plus homogène possible sur les deux endroits pendant l'heure de déjeuner. Il y avait aussi un open bar avec des bouteilles d'eau en libre service pour tous les assistants de la conférence.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/mnemonic.jpg" width="800px" alt="Salle avec plusieurs sièges bleus et une scène avec le logo React Day Berlin" style="display: block; margin: auto;" /&gt;
&lt;span&gt;Intérieur de la deuxième salle Mnemonic.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Cette fois en binôme, j’ai été assignée aux tâches dans le track Blade Runner, qui a été une belle surprise parmi les conférences. On devait s'assurer que les speakers soient dans la salle à l'heure indiquée au programme, puis les guider aux tests son, et les accompagner aux session de Q&amp;A après leurs talks. On devait, bien-sûr, répondre aux requêtes générales des assistants relatives au mot de passe du Wi-Fi ou à la garde-robe. C’est important de préciser que les organisateurs de GitNation étaient disponibles tout le temps et qu’on avait une communication ouverte dans un channel spécial en Discord.</p>
<h2>Les conférences du track Bladerunner les plus intéressantes (selon moi)</h2>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/blade-runner-track.jpg" width="800px" alt="Porte en métal avec un panneau bleu" style="display: block" /&gt;
&lt;span&gt;Extérieur de la salle principale.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<h3>L'ouverture de Nik Graf</h3>
<p>L'ouverture était assurée par Nik Graf, le créateur de Serenity notes. Sa présentation "The weird things about React" a été - à vue d'oeil - la plus suivie. Il a donné plusieurs bons conseils, le plus évident étant peut-être <strong>la recommandation sur le suivi des documentations informelles de la libraire par des chaînes non officiels, comme par exemple dans les comptes <a href="https://twitter.com/dan_abramov">Twitter de Dan Abramov</a> (créateur de Redux et actuellement en ReactJS); <a href="https://twitter.com/sebmarkbage">Sebastian Markbåge</a> (Vercel) et <a href="https://twitter.com/acdlite">Andrew Clark</a> (core team de ReactJS).</strong></p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/graf.jpg" width="800px" alt="Homme en pull blanc parlant sur une scène avec un écran géant" style="display: block; margin: auto;" /&gt;
&lt;span&gt;Nik Graf lors de sa présentation.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Pour illustrer l'importance d'être au courant des changements ‘hors normes’, il a mentionné la possibilité de remount un composant juste… en changeant la propriété “key”! Même si c’est un usage marginal et non recommandé dans les documentations officielles, c’est une notion qui peut être utile en travaillant avec du legacy code ou des useEffects problématiques.</p>
<p>Graf a exposé un long chemin vers les évolutions de React par rapport à la composition, les types, l'interprétation des Warnings, et même sur l'importance du strict-mode. Un parcours très intéressant avec plein d'informations et un grand clin d'œil aux beta-docs et aux échanges dans les réseaux sociaux.</p>
<h3>Tobias Koppers sur l'évolution de Webpack a Turbopack</h3>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/koppers.jpg" width="800px" alt="Salle avec vue sur l'écran d'information, le présentateur avec un t-shirt noir à gauche sur scène prenant la parole." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Tobias Kopper lors de sa présentation.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Probablement la deuxième présentation la plus attendue de la première journée du React Day Berlin, présentée par l’allemand Tobias Kopper, qui a créé Webpack et qui travaille actuellement chez Vercel. Une introduction très complète sur Turbopack.</p>
<p>Comme le dit Kopper, <strong>Turbopack est le "successeur de Webpack”</strong>. Cela veut dire que les objectifs sont les mêmes que dans l’ancien module bundler, avec un horizon open source et agnostique. La première motivation de la création de Turbopack est de répondre à une nouvelle demande sur le développement en JS : <strong>la performance</strong>. C’est pour ça que le cœur de ce nouveau projet se concentre sur des problématiques courantes comme l’invalidation de cache, les builds incrémentiels et le watch mode. Avec un système fait en plusieurs couches, l'équipe de Vercel s’est éloignée du langage JavaScript pour choisir Rust grâce à sa performance prévisible, sa sécurité, et surtout car cela permet d’utiliser le parser SWC. Toutefois, les plugins pourraient être développés en JS ou Rust pour améliorer l'expérience de l’application par des développeurs qui ne travaillent pas en Rust.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/koppers2.jpg" width="800px" alt="Salle pleine illuminée de lumière bleue et le présentateur sur scène." style="display: block; margin: auto;" /&gt;
&lt;span&gt;La situation de Webpack selon Tobias Kopper.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>La couche suivante est le Turbo engine, qui est peut-être le concept le plus intéressant présenté par Koppers. <strong>La puissance de Turbo engine réside dans la possibilité d’avoir la mémorisation ou le cache des fonctions</strong>, ce qui implique que si la fonction est appelée deux fois, elle ne sera calculée qu'une seule fois. Au-dessus de tout cela, Turbopack est construit avec de grosses évolutions comme l’optimisation inter-environnement notamment, cet outil ne devrait pas tarder à arriver dans les projets des prochaines années.</p>
<h3>L'abordage des projets interculturels selon Emma Bostian</h3>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/bostian.jpg" width="800px" alt="Femme en longue robe noire sur podium donnant la présentation." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Emma Bostian lors de sa présentation.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Emma Bostian (Spotify) a mis sur le tapis le sujet de <strong>l’interculturalité dans les équipes de développement</strong>. Faire des demandes, donner ou recevoir du feedback, et même la quotidienneté n’est pas du tout évidente quand on travaille avec des gens partout dans le monde. J'étais touchée très rapidement par cette présentation car j’ai ressenti des chocs similaires plusieurs fois au travail.</p>
<p>Bostian a exposé que l’expression et la communication en fonction des différentes cultures n’est que la reconnaissance de l'individualité de chaque être humain, et que  l’effet de nier ou s'éloigner de cet aspect provoque une lecture des interactions envahie par notre propre culture. Elle a basé sa présentation selon <strong>deux types de communication : celle de contexte bas, et celle de contexte haut</strong>. La première correspondrait à une communication très claire, directe et indépendante du contexte, alors que la deuxième est absolument opposée car on a besoin de connaître le contexte pour bien comprendre le message.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/bostian2.jpg" width="800px" alt="Salle pleine avec le présentateur sur le podium et les participants assis." style="display: block; margin: auto;" /&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Par la suite, Bostian exprimait que selon la culture d’origine on peut être plus ou moins éloignés de nos interlocuteurs, et que nos compétences communicatives peuvent être très fortes avec les gens avec qui on partage la culture mais pas autant avec les autres. Elle a aussi remarqué que la plupart des conflits sont communs aux interlocuteurs avec un type de communication très liée au contexte mais qui appartiennent à différentes cultures. Les conseils proposés incluent une <strong>écoute active</strong> dans les cas de communication avec des gens qui correspondent plutôt aux cultures plus dépendantes du contexte et à <strong>la priorité sur la clarté dans les processus du travail</strong>, entre autres.</p>
<p>À vrai dire, la conception et la façon de traiter le sujet par Bostian ont été profondement marquées par la bibliographie américaine (<a href="https://erinmeyer.com/books/the-culture-map/">The cultural map par Erin Meyer</a>), donnant comme résultat une perspective trop étroite et des données pas totalement précises à mon avis. Je reconnais toutefois l'intérêt de la démarche de vouloir <strong>ouvrir un débat</strong> sur des connaissances dont la plupart sont tenues pour acquises et je vous recommande de voir sa présentation <a href="https://portal.gitnation.org/contents/building-high-performing-cross-cultural-teams">ici</a> si vous travaillez dans des équipes internationales ou interculturelles.</p>
<p>Après cette dernière présentation, l’after party a eu lieu. Plusieurs accessoires lumineux et des DJs ont animé la fête.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/after-party.jpg" width="800px" alt="Trois hommes discutant et dansant dans la chambre noire avec des accessoires lumineux." style="display: block; margin: auto;" /&gt;
&lt;span&gt;Accessoires, musique techno et des jeux de société.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>Le lundi 5 décembre c'était la deuxième partie de cette conférence. Cette fois à distance, beaucoup moins de bénévoles ont été convoqués, mais j’ai participé à la modération des conférences et à l’introduction des speakers. Personnellement, j’ai été un peu moins attirée par ce format car les presentations étaient précédemment enregistrées. Par contre, après chacune le Q&amp;A était possible en ligne, du coup les présentateurs étaient quand même “présents”.</p>
<h3>Retour d'expérience</h3>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/team.jpg" width="800px" alt="L'équipe sur scène saluant et souriant à la caméra." style="display: block; margin: auto;" /&gt;
&lt;span&gt;L'équipe GitNation, speakers et assistants sur la photo finale.&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
<p>L'expérience en tant que bénévole était très intéressante et c’est une très bonne façon de rencontrer du monde et de découvrir des nouveautés techniques. React Day Berlin nous rappelle <strong>l'enrichissement unique de la rencontre en personne et comment le partage des connaissances dans la conversation avec le public n'est pas seulement un moyen d'apprendre mais aussi de rendre cette information interactive et engageante</strong>. La ville gelée de Berlin était un point de ralliement pour les développeurs du monde entier et un point de découverte.</p>
<p>Dans cet article, je n'ai mentionné que certaines des présentations les plus intéressantes, mais il y en avait beaucoup d'autres comme le <a href="https://portal.gitnation.org/contents/the-sorcery-of-building-a-cross-platform-design-system-architecture">"The Sorcery of Building a Cross Platform Design System Architecture" par Kamlesh Chandnani</a> ou <a href="https://portal.gitnation.org/contents/staying-safe-in-a-concurrent-world-1014">"Staying Safe In a Concurrent World" par Andreas Roth</a>. Tout le contenu est accessible depuis le site GitNation sur <a href="https://portal.gitnation.org/events/react-day-berlin-2022">ce lien</a>.</p>
<p>&lt;figure style="text-align: center; margin: 2rem 0;"&gt;
&lt;figcaption&gt;
&lt;img src="/imgs/posts/2023-01-11-react-day-berlin/swag-bag.jpg" width="800px" alt="Sac en tissu bleu avec un imprimé blanc" style="display: block; margin: auto;" /&gt;
&lt;span&gt;La phrase du React Day Berlin "Build code not walls".&lt;/span&gt;
&lt;i&gt;Crédit photo : GitNation.&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mission accessible, une introduction]]></title>
            <link>https://blog.eleven-labs.com/fr/mission-accessible-introduction/</link>
            <guid>https://blog.eleven-labs.com/fr/mission-accessible-introduction/</guid>
            <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Cet article est une introduction à l’accessibilité, son approche en tant que diversité des situations d’usage et son application dans la conception de produits numériques.]]></description>
            <content:encoded><![CDATA[<p>Le Web et les outils numériques sont présents dans toutes les sphères du quotidien, de l’achat de produits de première nécessité à la recherche d’emploi et aux démarches administratives. Ils nous concernent toutes et tous et doivent donc être accessibles qu’importe la situation et nos capacités sensorielles, motrices ou cognitives.</p>
<p>Cet article est une <strong>introduction au sujet de l’accessibilité</strong>, son approche en tant que diversité des situations d’usage et son application dans la conception de produits numériques.</p>
<h2>Qu’est-ce que l’accessibilité ?</h2>
<p>L’accessibilité c'est la promesse de rendre compréhensible, utilisable et agréable le web pour toutes et tous, qu’importe les capacités de la personne qui l’utilise, son âge, son lieu de résidence ou son contexte d’usage.</p>
<p>La notion d’usages est au cœur de l’idée d’accessibilité. Opposé à l’idée d’un design par défaut qui conviendrait supposément à tous, un design accessible prend en compte <strong>les différents contextes d’usage possibles</strong>. En effet, notre expérience numérique peut être amenée à changer dans une même journée ou plus largement dans notre vie. Ainsi, une application peut devenir difficile d’utilisation en situation de <strong>handicap permanent, temporaire</strong>, mais aussi <strong>situationnel</strong> : lorsqu’on doit garder un bébé dans les bras, lorsque l’écran est exposé à une forte lumière ou lorsque l’on se retrouve dans un lieu faiblement connecté à internet. Il est donc important de penser aux différents contextes d’usage d’un site ou d’une application.</p>
<p>Concevoir un outil accessible c’est donc penser un outil pour les utilisatrices et utilisateurs tels qu’ils sont réellement, dans leur diversité (voir les <a href="https://m3.material.io/foundations/accessible-design/overview">travaux d’accessibilité de Google</a> et de <a href="https://www.microsoft.com/design/inclusive/">Microsoft</a> pour en savoir plus).</p>
<p>&lt;div style="text-align: center; margin: 2rem 0;"&gt;
&lt;img src="/imgs/posts/2022-11-22-mission-accessible/disabilities.jpg" width="600px" alt="Exemple de situation d’handicap permanent, temporaire et situationnel" style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;Source &lt;cite&gt;&lt;a href="https://uxdesign.cc/accessibility-guidelines-for-a-ux-designer-c3ba775539be" target="_blank" rel="nofollow, noreferrer"&gt;Accessibility Guidelines de Avinash Kaur&lt;/a&gt;&lt;/cite&gt;&lt;/figcaption&gt;
&lt;/div&gt;</p>
<h2>Pourquoi <em>faire</em> de l’accessibilité ?</h2>
<p>Intégrer une démarche d’accessibilité à votre produit est <strong>bénéfique pour vos utilisateurs et pour votre business</strong>.</p>
<p>Tout d’abord, concevoir une expérience utilisateur accessible est <strong>bénéfique pour l’ensemble de vos utilisateurs</strong>. Par exemple, alors que le sous-titrage de messages peut servir pour les individus avec une déficience auditive, cela permet aussi de faire passer un message dans une situation bruyante (voir illustration ci-dessous). Ainsi, la démarche d’accessibilité permet d’inclure les individus atteints d’un handicap permanent, qui représentent <a href="https://www.cnsa.fr/documentation/cnsa_chiffres_cles_2021_interactif.pdf">près d’1 adulte français sur 7</a>, mais aussi d’offrir une expérience plus adaptée à <strong>l’ensemble de vos utilisateurs</strong>.</p>
<p>&lt;div style="text-align: center; margin: 2rem 0;"&gt;
&lt;img src="/imgs/posts/2022-11-22-mission-accessible/group.png" width="600px" alt="Exemple de situation d’handicap permanent, temporaire et situationnel" style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;Source &lt;cite&gt;&lt;a href="https://uxdesign.cc/accessibility-guidelines-for-a-ux-designer-c3ba775539be" target="_blank" rel="nofollow, noreferrer"&gt;Accessibility Guidelines de Avinash Kaur&lt;/a&gt;&lt;/cite&gt;&lt;/figcaption&gt;
&lt;/div&gt;</p>
<p>Enfin, concevoir votre produit dans une démarche d’accessibilité est aussi <a href="https://www.w3.org/standards/webdesign/accessibility">bénéfique pour votre business</a>. Parmi d’autres bénéfices pour votre entreprise, un produit “accessible” est un produit qui :</p>
<ul>
<li>Atteint une audience plus grande ;</li>
<li>Est plus utilisable ;</li>
<li>Est moins coûteux à maintenir ;</li>
<li>Apparaît davantage dans les moteurs de recherche.</li>
</ul>
<p>Bénéfique pour vos utilisateurs et votre business, il n’y a plus qu’à se lancer !
Mais par où commencer…</p>
<h2>Les principes POUR selon WCAG</h2>
<p>Le célèbre W3C a conçu les Web Content Accessibility Guidelines (WCAG pour référence) afin d'établir des moyens pour que le contenu web soit accessible aux personnes ayant différents handicaps. Ces directives ont été largement acceptées dans le monde entier. C'est un point très important qui peut même avoir des conséquences juridiques dans des pays dans lesquels l'accessibilité web <a href="https://www.w3.org/WAI/policies/">est requise par la loi</a>.</p>
<p>Les critères WCAG ont été déterminés dans quatre grands domaines : <em>Perceivable</em>, <em>Operable</em>, <em>Understandable</em> et <em>Robust</em> sous l’acronyme POUR. Mais qu'est-ce que cela signifie ? Heureusement, la réponse est assez simple.</p>
<ul>
<li>Tous les critères qui correspondent à la catégorie <em>Perceivable</em> (perceptible) sont liés à <strong>l'accès à l'information</strong>. Cela signifie que chaque information sur l'application doit être perceptible par l'utilisateur en utilisant “un ou plusieurs de ses sens” (<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable">MDN documentation</a>).</li>
<li>Le principe <em>Operable</em> (opérable) décrit les directives de <strong>navigation dans l'application et dans les composants d'interface</strong>. Par exemple, cela inclut la navigation par clavier, voix, écran tactile ou même les appareils par mouvement, entre autres.</li>
<li>Aussi clair que cela puisse paraître, le principe <em>Understandable</em> (compréhensible) se concentre sur le fait que l'interface est, disons, <strong>compréhensible par les utilisateurs</strong>.</li>
<li>Enfin et surtout, le principe <em>Robust</em> (robuste) fournit une ligne directrice sur la construction de <strong>contenu qui peut être interprété par autant d'agents utilisateurs que possible</strong>, même les agents de technologie d'assistance tels que les lecteurs d'écran.</li>
</ul>
<p>Ces quatre principes ont été classés en trois niveaux de conformité : A, AA et AAA, le dernier étant le plus performant en matière d'accessibilité. Un site web ne peut accomplir l'un de ces niveaux que s'il a atteint tous les critères : cela signifie que les niveaux ne peuvent pas être partiellement atteints.</p>
<h2>Comment est faite l'évaluation A, AA et AAA ?</h2>
<p>L'accessibilité Web peut être délicate pour les concepteurs, les développeurs et même les gestionnaires. Ainsi, la W3C a organisé trois niveaux d'accompagnement en matière d'accessibilité pour organiser et classer les applications Web. D'autre part, chaque niveau ajoute une nouvelle couche de complexité qui doit être soigneusement élaborée.</p>
<p>Cela dit, les critères pour atteindre le niveau A s'additionnent à ceux du niveau AA, et il en va de même pour atteindre une conformité AAA. Même si dans cet article on n'inclut pas une explication exhaustive de chaque critère de chaque niveau, n'hésitez pas à lire la documentation existante soit sur la page WCAG ou même MDN. Voyons quelques exemples suivant les principes POUR.</p>
<h3>- Niveau A, que l'accessibilité commence</h3>
<p>Le premier niveau est le plus simple où les choix de conception, tels que le contraste des couleurs, ne sont pas fortement impliqués. Il comporte 30 critères et son objectif est que la plupart des utilisateurs soient capables d'utiliser un site avec succès.</p>
<p>Pour être <em>Perceivable</em> (perceptible), tout contenu non textuel, comme les images ou le son entre autres, doit avoir un équivalent textuel. Il s'agit d'un exemple très simple qui est très facile à mettre en place. Dans le cas d'images, cela peut être facilement réalisé en utilisant l'attribut HTML <code>alt</code> :</p>
<pre><code>&lt;img src="cat.png" alt="Chat : un petit mammifère à quatre pattes très populaire comme animal de compagnie" /&gt;
</code></pre>
<p>On peut aussi utiliser l'attribut HTML <code>aria-labelledby</code>, qui permet de faire correspondre un ou plusieurs éléments avec une description par un identifiant.</p>
<pre><code>&lt;img src="cat.png" aria-labelledby="catto-label" /&gt;
 
&lt;p id="catto-label"&gt;Chat : un petit mammifère à quatre pattes très populaire comme animal de compagnie"&lt;/p&gt;
</code></pre>
<p>Il est important de comprendre que ces descriptions doivent être objectives et concises, une vraie description de l'image utilisée. Si l'image est purement décorative, il est préférable de laisser ces informations vides afin que les lecteurs d'écran puissent simplement les ignorer. Dans le cas de vidéos, par exemple, il est indispensable de fournir des sous-titres ou une transcription. Ce n'est qu'un début. Vous pouvez en savoir plus sur les textes alternatifs dans <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML#text_alternatives">ce lien</a>.</p>
<p>De plus, une hiérarchie claire dans la structure du site est nécessaire jusqu'au niveau de conformité A. C'est l'un des nombreux cas où le code et l'UX se chevauchent nécessairement. Voici un exemple de mise en page de site Web prototype :</p>
<p>&lt;div style="text-align: center; margin: 2rem 0;"&gt;
&lt;img src="/imgs/posts/2022-11-22-mission-accessible/layout.png" width="600px" alt="HTML structuré de manière sémantique et prévisible en utilisant les éléments tels que Menu, en-tête, titre, sous-titre, article, image, etc." style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;Image de &lt;cite&gt;&lt;a href="https://digital.com/how-to-create-a-website/how-to-properly-structure-your-html-for-web-accessibility/" target="_blank" rel="nofollow, noreferrer"&gt;How to structure your HTML properly for Web Accessibility&lt;/a&gt;&lt;/cite&gt;&lt;/figcaption&gt;
&lt;/div&gt;</p>
<p>Afin de respecter les critères d'accessibilité, la mise en page doit suivre un balisage sémantique. Oui, <code>&lt;h1&gt;</code> sera le premier et le plus pertinent en tête, et honnêtement, nous ne voyons aucune raison d'en avoir plus d'un dans la même page. Les données tabulaires doivent être affichées à l'aide de la balise <code>&lt;table&gt;</code> et chaque élément <code>&lt;input&gt;</code> doit être lié à une étiquette. C'est le moment de se débarrasser de la maladie <code>&lt;div&gt;</code> et d'accueillir <code>&lt;fieldset&gt;</code> et <code>&lt;legend&gt;</code> dans votre code.</p>
<p>C'est une excellente occasion de mentionner que les couleurs qui fournissent des informations à l'utilisateur ne doivent jamais être la seule source d’information. Oui ! Les icônes lors d'une erreur et aussi les éléments qui indiquent l'état d'un élément sont essentiels. Cela peut sembler un point assez simple, mais la vérité est qu'en tant que développeur front-end, j'ai vu ce code appliqué à plusieurs reprises. La pseudo-classe CSS ":focus" indique qu'un élément a reçu le focus en cliquant ou en sélectionnant à l'aide de la touche de <code>tab</code>. Il vaut mieux ne pas oublier l'état "focus" d’un élément, afin d'éviter que les développeurs écrivent cette ligne de code :</p>
<pre><code>:focus {
   outline: none;
}
</code></pre>
<p>Si nous ne fournissons qu'un changement dans l'interface lors du focus sur un élément (ex : un bouton, un input), il est probable qu'un utilisateur malvoyant n'aura pas accès à cette information. <strong>C'est pourquoi l’outline ne doit jamais être enlevé</strong>, à moins qu'un autre élément ne fournisse cette information. Il peut être vrai que le focus par défaut sur les navigateurs n'est généralement pas très attrayant, mais consultez <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline">cette page</a> pour voir comment le personnaliser. À vous de jouer !</p>
<p>&lt;iframe height="300" style="width: 100%;" scrolling="no" title="outline-style" src="https://codepen.io/seyedi/embed/OJmqVxm?default-tab=html%2Cresult" frameborder="no" loading="lazy"&gt;
See the Pen &lt;a href="https://codepen.io/seyedi/pen/OJmqVxm"&gt;
outline-style&lt;/a&gt; by Mojtaba Seyedi (&lt;a href="https://codepen.io/seyedi"&gt;@seyedi&lt;/a&gt;)
on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;</p>
<h3>- Niveau AA, le challenge</h3>
<p>La catégorie AA ajoute 20 critères à ceux déjà inclus dans le niveau A. Honnêtement, peu de sites respectent un niveau AA... mais cela ne veut pas dire qu'il faut renoncer aux questions d'accessibilité !</p>
<p>Suivant le principe d'opérabilité (<em>Operable</em>), <strong>ce niveau propose d'avoir plusieurs façons de naviguer sur un site web</strong>. Par exemple, ajouter un champ de recherche et des liens entre les pages offre une navigation moins rigide. Outre ce point, la relation sémantique entre les en-têtes et les étiquettes est également pertinente pour une conformité AA. Compte tenu des recherches sur la façon dont les utilisateurs lisent sur le web, des messages clairs et concis sont une clé de l'accessibilité. Imaginez un formulaire où l'étiquette ne dit que "nom et nom de famille" mais il y a deux entrées disponibles... laquelle est le nom et laquelle est le nom de famille si elle n'est pas clairement indiquée à chaque côté de chaque entrée ?</p>
<p>Pour le principe de compréhensibilité (<em>Understandable</em>), <strong>ce niveau se concentre également sur la disponibilité de la langue de l'utilisateur et les éventuelles variations qui pourraient apparaître</strong>. Par exemple, si un mot étranger se trouve dans le contenu de la page, les informations traduites doivent être fournies sur la page. Même un sélecteur de langue est pertinent pour cette catégorie.</p>
<h3>- Niveau AAA, le véritable engagement</h3>
<p>Le niveau AAA, avec 28 critères de plus que le niveau précédent, est très restrictif et n'est atteint que sur des sites hautement spécialisés. Du point de vue de la perception (<em>Perceivable</em>), <strong>il permet une très petite gamme de nuances de couleurs avec un contraste très élevé</strong>, les options de conception sont donc assez limitées.</p>
<p>Une dynamique parfaitement compréhensible et flexible est nécessaire pour se conformer à ce niveau. Le point unique en opérabilité (<em>Operable</em>) indique que l'application peut être entièrement naviguée au clavier sans exception, mais il existe de nombreuses spécifications autour de la section Compréhensible (<em>Understandable</em>) pour gérer, par exemple, la soumission de données dans un formulaire : il doit être modifiable , appliquer une vérification lors de l'achèvement de la saisie afin de fournir la possibilité de corriger les erreurs et également d'afficher une confirmation avant la soumission.</p>
<h3>Vers quel niveau viser ?</h3>
<p>Tout d'abord, le fait que tous les critères doivent être réunis pour atteindre un niveau <strong>ne doit décourager aucun produit web</strong>. Les efforts doivent être mesurés en fonction du public cible et du type de site Web. Parfois, il y aura des lois qui peuvent pénaliser l'institution ou l'entreprise si elles ne sont pas respectées. Parfois, les frontières sont moins définies et la rigueur est plus lâche.</p>
<p>D'autre part, de nombreux critères d'accessibilité ne font que suivre les bonnes pratiques. Cela rend notre code plus propre et plus performant. Cela rend notre conception plus claire et améliore notre UX. Ensuite, et probablement le plus important de tout, <strong>un Web plus accessible rend l'Internet plus démocratique et plus juste</strong>. Alors pourquoi minimiser l'effort ?</p>
<h2>Comment évaluer son produit ?</h2>
<p>Une fois les principes appliqués se pose la question de l’évaluation. Est-ce que votre produit est effectivement davantage accessible pour les contextes d’usages que vous envisagiez ?</p>
<p>&lt;div style="text-align: center; margin: 2rem 0;"&gt;
&lt;img src="/imgs/posts/2022-11-22-mission-accessible/guidelines.png" width="300px" alt="Illustration of a guidelines book" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<h3>Outils d’audit</h3>
<p>Il existe de nombreux outils qui peuvent être utiles pour évaluer le niveau d’accessibilité de votre produit. Parmi eux, nous pouvons citer les outils suivants qui permettent d’évaluer :</p>
<ul>
<li>l’accessibilité globale de votre produit et d’identifier les éventuels problèmes d’accessibilité avec <a href="https://github.com/squizlabs/HTML_CodeSniffer">CodeSniffer</a>, <a href="https://developer.chrome.com/docs/lighthouse/overview/">LightHouse</a> ou <a href="https://accessibilityinsights.io/">Accessibility Insights</a> ;</li>
<li>l’utilisation de vos balises HTML en retirant le CSS de votre page avec <a href="https://gist.github.com/estudiobold/4181e56129ed5cbd0b6cf40c73787a56">Naked Styles</a> ;</li>
<li>ou encore l’accessibilité de vos couleurs avec <a href="https://whocanuse.com/">WhoCanUse</a> et <a href="http://contrast-grid.eightshapes.com">Contrast Grid</a>.</li>
</ul>
<p>Cette liste ne représente qu’une petite partie de l’ensemble des outils d’audit d’accessibilité existants, vous pouvez retrouver une liste plus détaillée d’outils recommandés par le W3C via <a href="https://www.w3.org/WAI/ER/tools/">ce lien</a>.</p>
<h3>Tests manuels</h3>
<p>Il est intéressant d’essayer d’utiliser votre propre produit à l’aide d’outils d’assistance technologique, un <a href="https://support.google.com/chromebook/answer/7031755?hl=fr">lecteur d’écran</a> ou des <a href="https://support.google.com/accessibility/android/answer/6006949?hl=fr">options d’agrandissement d’écran</a> par exemple. Ces tests ne remplacent pas les tests utilisateurs mais vous permettent de faire une première estimation de votre travail d’accessibilité et d’affiner votre travail en vue des tests utilisateurs.</p>
<h3>Tests utilisateurs</h3>
<p>Enfin, il est intéressant <strong>d’adopter une démarche d’accessibilité pour vos tests utilisateurs.</strong></p>
<p>Cette démarche passe par le recrutement de personnes atteintes de handicap en cohérence avec la population et les contextes cibles de votre produit ou encore la prise en compte des différents contextes d’usages réels dans vos protocoles de test, par exemple tester le produit avec une connexion internet instable ou avec une lumière extérieure éclairant le téléphone.</p>
<p>Ces tests utilisateurs vous permettront de :</p>
<ul>
<li>évaluer l’utilisation de votre produit en condition plus écologique ;</li>
<li>évaluer le niveau d’accessibilité de votre produit pour les populations et contextes visés ;</li>
<li>montrer les problématiques d’accessibilité réelles de votre produit à l’ensemble de votre équipe afin de les sensibiliser et les engager sur le sujet.</li>
</ul>
<p>Pour plus d’informations, <a href="https://www.nngroup.com/reports/how-to-conduct-usability-studies-accessibility/">Pernice et Nielsen ont rédigé un rapport détaillé sur les tests utilisateur d'accessibilité</a> qui regroupe un ensemble très riche de conseils et de méthodes pour la mise en place de ces tests.</p>
<h2>L’accessibilité en deux mots</h2>
<p>Pour récapituler, nous avons vu que :</p>
<ul>
<li>l’accessibilité est la promesse d’un outil utilisable par toutes et tous ;</li>
<li>non seulement bénéfique pour vos utilisateurs, la démarche est aussi bénéfique pour votre entreprise ;</li>
<li>il existe un ensemble de principes pour travailler l’accessibilité de vos produits ;</li>
<li>il existe un ensemble d’outils et méthodes pour évaluer le niveau d’accessibilité de votre produit et engager votre équipe sur le sujet.</li>
</ul>
<p>Le chemin déblayé, il ne reste plus qu’à se demander : on commence quand ?</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-11-22-mission-accessible/accessibility_cover.png" width="300px" alt="Woman in a wheelchair using a computer" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<h3>Ressources</h3>
<ul>
<li>Understanding the Web Content Accessibility Guidelines: <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG">https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG</a></li>
<li>Accessibility Toolkit for Open Educational Resources (OER): Accessibility Principles: <a href="https://guides.cuny.edu/accessibility/whyitmatters">https://guides.cuny.edu/accessibility/whyitmatters</a></li>
<li>Developing for Web Accessibility: <a href="https://www.w3.org/WAI/tips/developing/">https://www.w3.org/WAI/tips/developing/</a></li>
<li>W3 Web Design and Applications Accessibility: <a href="https://www.w3.org/standards/webdesign/accessibility">https://www.w3.org/standards/webdesign/accessibility</a></li>
<li>What is the difference between WCAG A, AA and AAA?: <a href="https://ialabs.ie/what-is-the-difference-between-wcag-a-aa-and-aaa/">https://ialabs.ie/what-is-the-difference-between-wcag-a-aa-and-aaa/</a></li>
<li>Outline, accessibility concerns: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline#accessibility_concerns">https://developer.mozilla.org/en-US/docs/Web/CSS/outline#accessibility_concerns</a></li>
<li>How to structure your HTML properly for Web Accessibility: <a href="https://digital.com/how-to-create-a-website/how-to-properly-structure-your-html-for-web-accessibility/">https://digital.com/how-to-create-a-website/how-to-properly-structure-your-html-for-web-accessibility/</a></li>
<li>Never remove CSS outlines <a href="https://www.a11yproject.com/posts/never-remove-css-outlines/">https://www.a11yproject.com/posts/never-remove-css-outlines/</a></li>
<li>Outline style <a href="https://css-tricks.com/almanac/properties/o/outline-style/">https://css-tricks.com/almanac/properties/o/outline-style/</a></li>
<li>Accessibility tools for Developers &amp; QAs: <a href="https://medium.com/leniolabs/accessibility-tools-for-developers-qas-59f8d2b8a502">https://medium.com/leniolabs/accessibility-tools-for-developers-qas-59f8d2b8a502</a></li>
<li>How to Conduct Usability Studies for Accessibility: <a href="https://www.nngroup.com/reports/how-to-conduct-usability-studies-accessibility/">https://www.nngroup.com/reports/how-to-conduct-usability-studies-accessibility/</a></li>
<li>Accessibility guidelines for UX Designers: <a href="https://uxdesign.cc/accessibility-guidelines-for-a-ux-designer-c3ba775539be">https://uxdesign.cc/accessibility-guidelines-for-a-ux-designer-c3ba775539be</a></li>
<li>Les Chiffres Clés de l’Aide à  l’Autonomie 2021: <a href="https://www.cnsa.fr/documentation/cnsa_chiffres_cles_2021_interactif.pdf">https://www.cnsa.fr/documentation/cnsa_chiffres_cles_2021_interactif.pdf</a></li>
<li>Microsoft Inclusive Design: <a href="https://www.microsoft.com/design/inclusive/">https://www.microsoft.com/design/inclusive/</a></li>
<li>Accessibility and Material Design: <a href="https://m3.material.io/foundations/accessible-design/overview">https://m3.material.io/foundations/accessible-design/overview</a></li>
<li>Cover image <a href="https://www.freepik.com/free-vector/web-accessibility-program-abstract-concept-illustration_12291244.htm#query=web%20accessibility&amp;position=1&amp;from_view=search">by vectorjuice</a> on FreePik</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Explorer la donnée pour optimiser ses coûts d'électricité]]></title>
            <link>https://blog.eleven-labs.com/fr/explorer-la-donnee-pour-optimiser-ses-couts-d-electricite/</link>
            <guid>https://blog.eleven-labs.com/fr/explorer-la-donnee-pour-optimiser-ses-couts-d-electricite/</guid>
            <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Et si on mettait en pratique quelques réflexes d'analyse de données, pour faire de meilleurs choix au quotidien ? On pourrait peut-être ainsi mieux sélectionner son forfait chez notre fournisseur d'électricité par exemple...]]></description>
            <content:encoded><![CDATA[<p>Dans cet article, je vous propose de vous mettre dans la peau d'un Data Analyst. Sous forme de cas pratique, nous allons répondre à des questions en nous aidant d'outils d'analyse de données.</p>
<p>Avant de vous expliquer comment j'ai procédé, je vous donne un peu de contexte.</p>
<h2>Contexte</h2>
<p>Lors de l'acquisition d'un bien immobilier, il faut souscrire à un fournisseur d'électricité. Une fois le fournisseur d'électricité sélectionné, il existe deux types d'offres généralement : tarif de base, et tarif heures creuses / heures pleines (généralement abbrégé HC-HP). En plus de ces offres, il existe des déclinaisons pour les véhicules électriques, ou avec de l'électricité produite à partir de sources renouvelables.</p>
<p>La tarification heures creuses propose un prix assez bas du kilowatt-heure. En contre-partie, l'abonnement et le prix du kilowatt-heure en heures pleines est plus cher. Les périodes d'heures creuses/pleines sont déterminées par le gestionnaire du réseau Enedis. Ces périodes correspondent à des moments de faible charge du réseau.</p>
<p>Avec tous ces tarifs, il n'est pas évident de s'y retrouver. Quand le bien immobilier a son chauffage au gaz, il est en général conseillé de prendre le tarif de base. Si le chauffage est électrique et qu'il y un chauffe-eau électrique à accumulation, il est alors conseillé de prendre le tarif HC-HP. Cela permet de chauffer l'eau durant les périodes creuses pour économiser de l'argent.</p>
<p>En choisissant un tarif HC-HP, il est possible de faire baisser ses coûts en consommation électrique. Cependant, il faut veiller à consommer le plus possible durant la période creuse. Cela signifie par exemple, lancer le lave-linge et le lave-vaisselle à ces moments.</p>
<p>La question que l'on peut se poser est donc : <strong>est-ce que la tarification HC-HP est vraiment avantageuse ?</strong></p>
<p>Voyons les outils que nous allons utiliser.</p>
<h2>Outils utilisés</h2>
<p>Dans ce cas pratique, en tant qu'analyste de données (ou en anglais "Data Analyst"), je vais faire l'analyse du problème et y répondre.
Je vais m'appuyer sur des outils tel que <a href="https://pandas.pydata.org/about/">Pandas</a> pour la manipulation des données et <a href="https://plotly.com/python/">plotly</a> pour la création de visualisation de données. Tout cela en Python et dans un [notebook Jupyter]({{ site.baseurl }}/fr/decouverte-ipython-un-shell-interactif-avance-pour-python/).</p>
<p>J'ai sélectionné ces outils car ce sont les plus utilisés dans ce domaine. Il est tout à fait possible d'utiliser une feuille de calcul tel que LibreOffice Calc ou Microsoft Excel, mais le but de ce cas pratique est d'utiliser des outils spéciques à la manipulation des données en Python.</p>
<p>Maintenant que vous avez le contexte, on met les main dedans et on rentre dans le sujet. Je vais tout d'abord commencer par trouver les sources de données.</p>
<h2>Trouver les sources de données</h2>
<p>Pour effectuer mon analyse, j'ai besoin de données. Dans un premier temps, il me faut les données sur les différents tarifs et ensuite il me faut les données sur ma consommation. Allons tout d'abord récupérer les données sur les tarifs de l'électricités.</p>
<h3>Les tarifs de l'électricité</h3>
<p>Pour faire simple, je vais sélectionner EDF comme fournisseur d'électricité. Il est tout à fait possible d'en ajouter davantage pour comparer.</p>
<p>Généralement, l'information sur la tarification n'est pas accessible du premier coup sur le site internet. Il faut fouiller un peu. Quand la page est trouvée, la tarification est dans un document pdf.</p>
<ul>
<li><a href="https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/tarif-bleu.html">https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/tarif-bleu.html</a></li>
<li><a href="https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/offres-marche.html">https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/offres-marche.html</a></li>
</ul>
<p>J'ai sélectionné 4 tarifs :</p>
<ul>
<li>tarif bleu base</li>
<li>tarif vert base</li>
<li>tarif vert weekend</li>
<li>tarif vert weekend HC-HP</li>
</ul>
<p>Note : Par souci de rigueur, je ne peux pas sélectionner le tarif bleu HC-HP car je n'ai pas de données sur ma consommation en HC-HP durant le weekend.</p>
<p>J'ai copié chaque valeur dans un tableau et sauvegardé dans un fichier OpenDocument (.ods). Le choix du format n'a pas d'importance. Cependant, pour faciliter leurs ingestions il faut garder une uniformité dans le format et la structure des données.</p>
<table>
<thead>
<tr>
<th>kva</th>
<th>abonnement</th>
<th>heure pleine</th>
<th>heure creuse</th>
<th>heure weekend</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>11,8</td>
<td>22,35</td>
<td>15,21</td>
<td>15,21</td>
</tr>
<tr>
<td>9</td>
<td>15,3</td>
<td>22,35</td>
<td>15,21</td>
<td>15,21</td>
</tr>
<tr>
<td>12</td>
<td>18,48</td>
<td>22,35</td>
<td>15,21</td>
<td>15,21</td>
</tr>
<tr>
<td>15</td>
<td>21,58</td>
<td>22,35</td>
<td>15,21</td>
<td>15,21</td>
</tr>
<tr>
<td>18</td>
<td>24,52</td>
<td>22,35</td>
<td>15,21</td>
<td>15,21</td>
</tr>
</tbody>
</table>
<p>La première colonne est la puissance maximale qu'il est possible de soutirer. Cette puissance est mesurée en kilo-voltampère (kVA).Au-delà, le contacteur du compteur Linky s'ouvre pour couper l'alimentation de l'abonné.</p>
<p>En seconde colonne, c'est le prix de l'abonnement mensuel en euro.
Enfin, les autres colonnes sont les tarifs du kWh en centimes d'euros.</p>
<p>Une fois que j'ai les données sur la tarification de l'électricité, je peux aller chercher les données sur la consommation.</p>
<h3>Les données de consommations</h3>
<p>Avec le déploiement des compteurs Linky, la consommation (et la production) d'électricité est remontée quotidiennement chez le gestionnaire de réseau Enedis. Les fournisseurs d'électricité demandent à Enedis la consommation électrique de chaque Point De Livraison (PDL) pour ainsi facturer au client final.</p>
<p>Enedis permet au client de consulter ses données quotidiennes. Je vous renvoie vers un article Enedis pour récupérer les données de consommation <a href="https://www.enedis.fr/jaccede-mes-donnees-de-consommation-et-de-production-delectricite">https://www.enedis.fr/jaccede-mes-donnees-de-consommation-et-de-production-delectricite</a>. Pour notre étude, j'ai pris les données sur 1 mois.</p>
<p>Nous avons les données sur les tarifs de l'électricité et les données sur la consommation. Cependant, le format des données sur la consommation est difficile à exploiter... Nous devons donc la nettoyer !</p>
<h2>Nettoyage des données de consommation</h2>
<p>Les données de consommation récupérées auprès d'Enedis sont assez chaotiques. Il n'est pas possible de fournir ce fichier à Pandas car il ne saura pas l'organiser.</p>
<p>Ci-dessous un extrait du fichier fournis par Enedis.</p>
<pre><code>Identifiant PRM;Type de donnees;Date de debut;Date de fin;Grandeur physique;Grandeur metier;Etape metier;Unite
00000000000000;Index;12/04/2021;18/04/2021;Energie active;Consommation;Comptage Brut;Wh
Horodate;Type de releve;EAS F1;EAS F2;EAS F3;EAS F4;EAS F5;EAS F6;EAS F7;EAS F8;EAS F9;EAS F10;EAS D1;EAS D2;EAS D3;EAS D4;EAS T
2021-04-01T01:00:00+02:00;Arrêté quotidien;11538434;12944147;3668104;;;;;;;;19416294;2543931;2686684;3503776;28150685
Periode;Identifiant calendrier fournisseur;Libelle calendrier fournisseur;Identifiant classe temporelle 1;Libelle classe temporelle 1;Cadran classe temporelle 1;
Du 2021-04-12T00:00:00+01:00 au;AA000000;Option Heures Creuses + Week-End;HC;Heures Creuses;EAS F1;HP;Heures Pleines;
</code></pre>
<p>Les données de consommation ont une structure spécifique. Les deux premières lignes sont des en-tête qui décrivent la nature des données. Un élément doit attirer notre attention : la consommation est en watt-heure et c'est du cumulatif (comme un compteur kilométrique d'une voiture).</p>
<p>La troisième ligne ce sont les noms de colonnes. Ces noms sont des index de colonnes. Les labels plus détails sont dans les 2 dernières lignes du tableau.</p>
<p>Ce sont des metadonnées qui donnent des informations supplémentaires à la donnée en elle-même, mais elles ne sont pas utiles pour exploiter les informations.</p>
<p>Par exemple, pour la colonne <code>EAS F1</code> j'ai la valeur <code>11538434</code>. En regardant les deux dernière lignes du tableau, je vois :</p>
<pre><code>Identifiant classe temporelle 1;Libelle classe temporelle 1;Cadran classe temporelle 1
EAS F1                         ;HP                         ;Heures Pleines
</code></pre>
<p>Donc la colonne <code>EAS F1</code> correspond à la consommation en <code>Heures Pleines</code>.</p>
<p>Au final, ce sont les colonnes <code>EAS F1</code>, <code>EAS F2</code>, <code>EAS F3</code> qui correspondent à la consommation en heures pleines, heures creuses et weekend.</p>
<p>Dans un premier temps je supprime les deux premières lignes d'en-tête et les deux dernières lignes, je veux conserver uniquement la données concernant la consommation et ne veux pas de métadonnées dans le fichier final.</p>
<pre><code>BASE_PATH = "datalake/"
RAW_DATA_FILENAME = "sample.csv"
RAW_DATA_CLEANED_FILENAME = "enedis_conso_clean.csv"
CLEANED_DATA_FILENAME = "enedis-data-ready-to-work.parquet"

with open(f"{BASE_PATH}{RAW_DATA_FILENAME}", "r+") as fp:
    lines = fp.readlines()
    with open(f"{BASE_PATH}{RAW_DATA_CLEANED_FILENAME}", "w+") as fpclean:
        fpclean.writelines(lines[2: len(lines) - 2])
</code></pre>
<p>Un nouveau fichier nettoyé est généré : enedis_conso_clean.csv.
Ensuite, je charge ce nouveau fichier avec Pandas pour effectuer quelques calculs de base, comme le différentiel par jour et la consommation totale de la journée.</p>
<p>Avec Pandas, le travail sur les données s'effectue en colonnes et non en lignes. Ce fonctionnement est un peu déroutant lorsque l'on utilise couramment des bases de données tel que MySQL ou PostgreSQL.</p>
<pre><code>import pandas as pd

df = pd.read_csv(f"{BASE_PATH}{RAW_DATA_CLEANED_FILENAME}", sep=";")

# Calcul de la consommation totale de la journée
df["Total Consommation"] = df["EAS F2"] + df["EAS F1"] + df["EAS F3"]

# Renommage des colonnes
df_work = df[["Horodate", "EAS F1", "EAS F2", "EAS F3", "Total Consommation"]].copy()
df_work.columns = [
    "Horodate",
    "Quantité Heure Creuse en wh",
    "Quantité Heure Pleine en wh",
    "Quantité Weekend en wh",
    "Total Consommation",
]

# Calcul de la différence par rapport à la journée précédente pour chaque colonne.
df_work["Différence journalier Total Consommation"] = df_work["Total Consommation"].diff()
df_work["Différence journalier Heure Creuse"] = df_work["Quantité Heure Creuse en wh"].diff()
df_work["Différence journalier Heure Pleine"] = df_work["Quantité Heure Pleine en wh"].diff()
df_work["Différence journalier Weekend"] = df_work["Quantité Weekend en wh"].diff()

# Sauvegarde du traitement dans un fichier Apache Parquet
df_work.to_parquet(f"{BASE_PATH}{CLEANED_DATA_FILENAME}")
</code></pre>
<p>Cela nous donne ce tableau.</p>
<table>
<thead>
<tr>
<th>Horodate</th>
<th>Quantité Heure Creuse en wh</th>
<th>Quantité Heure Pleine en wh</th>
<th>Quantité Weekend en wh</th>
<th>Total Consommation</th>
<th>Différence journalier Total Consommation</th>
<th>Différence journalier Heure Creuse</th>
<th>Différence journalier Heure Pleine</th>
<th>Différence journalier Weekend</th>
</tr>
</thead>
<tbody>
<tr>
<td>2021-04-01T01:00:00+02:00</td>
<td>11538434</td>
<td>12944147</td>
<td>3668104</td>
<td>28150685</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr>
<td>2021-04-02T01:00:00+02:00</td>
<td>11543332</td>
<td>12948970</td>
<td>3668104</td>
<td>28160406</td>
<td>9721.0</td>
<td>4898.0</td>
<td>4823.0</td>
<td>0.0</td>
</tr>
<tr>
<td>2021-04-03T01:00:00+02:00</td>
<td>11550420</td>
<td>12954810</td>
<td>3668104</td>
<td>28173334</td>
<td>12928.0</td>
<td>7088.0</td>
<td>5840.0</td>
<td>0.0</td>
</tr>
<tr>
<td>2021-04-04T01:00:00+02:00</td>
<td>11550420</td>
<td>12954810</td>
<td>3683924</td>
<td>28189154</td>
<td>15820.0</td>
<td>0.0</td>
<td>0.0</td>
<td>15820.0</td>
</tr>
<tr>
<td>2021-04-05T01:00:00+02:00</td>
<td>11550420</td>
<td>12954810</td>
<td>3700863</td>
<td>28206093</td>
<td>16939.0</td>
<td>0.0</td>
<td>0.0</td>
<td>16939.0</td>
</tr>
<tr>
<td>2021-04-06T01:00:00+02:00</td>
<td>11550420</td>
<td>12954810</td>
<td>3715235</td>
<td>28220465</td>
<td>14372.0</td>
<td>0.0</td>
<td>0.0</td>
<td>14372.0</td>
</tr>
</tbody>
</table>
<p>Il est à noter que les colonnes qui contiennent le calcul de la différence journalier sur la première ligne contiennent la valeur NaN. Couramment, la valeur NaN signifie "Not A Number" surtout lorsque le typage de la colonne est un nombre floattant (float64). Mais avec Pandas, cela signifie qu'il manque une valeur. Ici c'est tout à fait normal, car il n'y a rien à comparer avant, cela ne gêne pas pour la suite des calculs.</p>
<p>Pour finir, je choisis de stocker le résultat dans un format Apache Parquet car il permet de stocker le schéma des données. Ce format est adapté aux données de type colonne et permet un stockage efficace (compression). Nos données sont prêtes pour l'analyse.</p>
<h2>Analyse des données</h2>
<p>Pour rappel, le but de notre analyse est de répondre à la question suivante : <strong>est-ce que la tarification HC-HP est vraiment avantageuse ?</strong></p>
<p>Pour cela, je vais procéder en deux étapes :</p>
<ul>
<li>Répartition de la consommation</li>
<li>Calcul du coût en fonction du tarif</li>
</ul>
<p>Effectuons le calcul pour obtenir la répartition de la consommation.</p>
<h3>Répartition de la consommation</h3>
<p>Dans un premier temps, je vais regarder la répartition de la consommation entre les différentes périodes. Quelle est la part d'heures creuse, d'heures pleines et weekend ?</p>
<pre><code>import pandas as pd

df = pd.read_parquet("datalake/enedis-data-ready-to-work.parquet")
repartition_consommation = pd.DataFrame(
    {
        "Consommation par periode en kWh": [
            df["Différence journalier Heure Pleine"].sum() / 1000,
            df["Différence journalier Heure Creuse"].sum() / 1000,
            df["Différence journalier Weekend"].sum() / 1000,
        ],
        "Périodes": ["Heure Pleine", "Heure Creuse", "Weekend"],
    }
)
repartition_consommation
</code></pre>
<p>Cela me donne le tableau suivant.</p>
<table>
<thead>
<tr>
<th>Consommation par periode en kWh</th>
<th>Périodes</th>
</tr>
</thead>
<tbody>
<tr>
<td>132.935</td>
<td>Heure Pleine</td>
</tr>
<tr>
<td>158.837</td>
<td>Heure Creuse</td>
</tr>
<tr>
<td>136.113</td>
<td>Weekend</td>
</tr>
</tbody>
</table>
<p>La lecture du tableau ne permet pas de se rendre compte de cette répartition. Ajoutons un graphique en camembert.</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-11-08-analyse-cout-electricite/repartition-consommation.png" alt="répartition de la consommation entre les différentes périodes" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>C'est mieux :)</p>
<p>Cela me permet de voir que ~69% de ma consommation électrique est dans la tarification creuse (le weekend c'est la tarification heure creuse qui est utilisée).</p>
<p>Maintenant, appliquons le prix de l'électricité à la consommation électrique. Cela va nous donner le coût total.</p>
<h3>Calcul du coût en fonction du tarif</h3>
<p>Je vais faire l'analyse avec les tarifs de l'électricité que j'ai récupérés auprès de mon fournisseur. Dans la grille tarifaire, chaque ligne correspond à une puissance électrique apparente maximale mesurée en kilovoltampère (kVA). Je vous renvoie à Wikipédia pour plus d'explications <a href="https://fr.wikipedia.org/wiki/Voltamp%C3%A8re">https://fr.wikipedia.org/wiki/Voltamp%C3%A8re</a>.</p>
<p>Pour notre cas, ça sera 9 kVA.</p>
<p>Ci-dessous j'expose le code du calcul pour le tarif vert weekend hc-hp</p>
<pre><code># Je charge le fichier de tarification et je sélectionne la ligne avec 9 kVA
df_tarif_vert_weekend_hp_hc = pd.read_excel("datalake/tarif-vert-weekend-hc-hp.ods")
selected_df_tarif_vert_weekend_hp_hc = df_tarif_vert_weekend_hp_hc.loc[df_tarif_vert_weekend_hp_hc["kva"] == 9]
selected_df_tarif_vert_weekend_hp_hc.reset_index(drop=True, inplace=True)  # Remise à zéro de l'index du tableau

# Je crée un nouveau tableau avec le calcul de consommation multiplié par le tarif du kWh. Attention aux unités.
cout_tarif_vert_weekend_hp_hc = pd.DataFrame(columns=["cout heure creuse", "cout heure pleine", "cout weekend"])
cout_tarif_vert_weekend_hp_hc["cout heure creuse"] = (df["Différence journalier Heure Creuse"] / 1000) * (selected_df_tarif_vert_weekend_hp_hc["heure creuse"].values[0] / 100)
cout_tarif_vert_weekend_hp_hc["cout heure pleine"] = (df["Différence journalier Heure Pleine"] / 1000) * (selected_df_tarif_vert_weekend_hp_hc["heure pleine"].values[0] / 100)
cout_tarif_vert_weekend_hp_hc["cout weekend"] = (df["Différence journalier Weekend"] / 1000) * (selected_df_tarif_vert_weekend_hp_hc["heure weekend"].values[0] / 100)
cout_tarif_vert_weekend_hp_hc["total"] = cout_tarif_vert_weekend_hp_hc["cout weekend"] + cout_tarif_vert_weekend_hp_hc["cout heure pleine"] + cout_tarif_vert_weekend_hp_hc["cout heure creuse"]

# j'ajoute le coût de l'abonnement au total
calculated_cout_tarif_vert_weekend_hp_hc = cout_tarif_vert_weekend_hp_hc["total"].sum() + selected_df_tarif_vert_weekend_hp_hc["abonnement"].values[0]
</code></pre>
<p>Je répète cette opération pour tous les tarifs que j'ai sélectionnés.</p>
<p>Cela me permet de tracer ce graphique avec Plotly.</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-11-08-analyse-cout-electricite/calcul-cout-electricite.png" alt="coût de l'électricité en fonction du tarif" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>Il nous donne les informations nécessaires pour répondre à notre question initiale, à nous de l'interpréter.</p>
<h2>Interprétation</h2>
<p>En comparant le tarif vert de base et tarif vert weekend HC-HP, il y a bien une différence de 2,25 euros (soit une différence de 2,44%). Cela représente 27 euros par an. Donc pour répondre à la question initiale : <strong>oui</strong>, la tarification HC-HP est avantageuse par rapport à une tarification de base.</p>
<p>Cependant, cette interprétation est à nuancer.</p>
<p>L'analyse est effectuée pour une répartition de la consommation donnée. Chaque foyer à une consommation différente, donc la répartition de la consommation est différente.</p>
<p>Si je compare la tarification vert weekend HC-HP et le tarif bleu de base, la réponse à la question est inversée. En observant la grille tarifaire, le tarif vert est plus cher que le bleu. On peut alors se demander : "pourquoi ?" Je laisse cette question ouverte car elle dépasse notre cas étudié.</p>
<p>Pour conclure, ce cas a permis de mettre en pratique des outils utilisés dans le domaine de la Data. Notebook IPython et la bibliothèque Pandas sont des incourtournables qu'il est nécessaire de maitriser.</p>
<p>Sur cette base d'analyse, il est possible d'approfondir le sujet en appliquant une modèle prédictif à l'aide du machine learning par exemple. Tout est possible, la donnée est disponible, il ne reste plus qu'à l'exploiter !</p>
<h2>Ressources</h2>
<ul>
<li><a href="https://www.enedis.fr/faq/gerer-sa-consommation-delectricite/loption-heures-creuses-comment-ca-marche">https://www.enedis.fr/faq/gerer-sa-consommation-delectricite/loption-heures-creuses-comment-ca-marche</a></li>
<li><a href="https://particuliers.engie.fr/electricite/conseils-electricite/conseils-tarifs-electricite/tarif-reglemente.html">https://particuliers.engie.fr/electricite/conseils-electricite/conseils-tarifs-electricite/tarif-reglemente.html</a></li>
<li><a href="https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/tarif-bleu.html">https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/tarif-bleu.html</a></li>
<li><a href="https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/offres-marche.html">https://particulier.edf.fr/fr/accueil/electricite-gaz/offres-electricite/offres-marche.html</a></li>
<li><a href="https://www.enedis.fr/jaccede-mes-donnees-de-consommation-et-de-production-delectricite">https://www.enedis.fr/jaccede-mes-donnees-de-consommation-et-de-production-delectricite</a></li>
<li><a href="https://fr.wikipedia.org/wiki/Voltamp%C3%A8re">https://fr.wikipedia.org/wiki/Voltamp%C3%A8re</a></li>
<li><a href="/imgs/posts/2022-11-08-analyse-cout-electricite/code.zip">Code de l'analyse</a></li>
<li><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#values-considered-missing">https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html#values-considered-missing</a></li>
<li><a href="https://chartio.com/resources/tutorials/how-to-check-if-any-value-is-nan-in-a-pandas-dataframe/">https://chartio.com/resources/tutorials/how-to-check-if-any-value-is-nan-in-a-pandas-dataframe/</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Retour sur le Forum PHP 2022]]></title>
            <link>https://blog.eleven-labs.com/fr/retour-sur-le-forum-php-2022/</link>
            <guid>https://blog.eleven-labs.com/fr/retour-sur-le-forum-php-2022/</guid>
            <pubDate>Wed, 26 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Un REX sur les différentes confs qui ont été données cette année au Forum PHP.]]></description>
            <content:encoded><![CDATA[<p>Les 13 &amp; 14 octobre 2022 a eu lieu le mythique Forum PHP 2022 organisé par l'AFUP, dans un lieu non moins mythique : DisneyLand Paris.
C'est la première fois que l'AFUP vient poser ses valises dans ce lieu magique, plus précisément dans l'hôtel New York qui dispose de salles de conférences grandioses.</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="fr" dir="ltr"&gt;Et vous, il est comment votre vendredi ? &lt;a href="https://t.co/SFMqKjIGfb"&gt;pic.twitter.com/SFMqKjIGfb&lt;/a&gt;&lt;/p&gt;— AFUP (@afup) &lt;a href="https://twitter.com/afup/status/1578341478518362112?ref_src=twsrc%5Etfw"&gt;October 7, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<p>Les astronautes étaient présents pour assister aux différents talks proposés. Impossible bien entendu d'assister à tout, mais entre rappels et nouveaux apprentissages, voici un retour pêle-mêle sur les talks qui nous ont marqués !</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-10-26-retour-sur-le-forum-php-2022/afup2022.png" width="300px" alt="Afup2022 Logo" style="display: block; margin: auto;"/&gt;
&lt;i&gt;AFUP 2022&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<h2>The PHP Foundation: The past, the present, and the future</h2>
<p>On commence fort car ce n'est pas n'importe qui qui monte sur scène pour ce premier talk. Il s'agit tout simplement de Sebastian Bergmann, notamment créateur de <strong>PHPUnit</strong>. Il est accompagné de Roman Pronskiy, product marketing manager chez JetBrains.</p>
<p>Ils sont venus nous présenter la <a href="https://opencollective.com/phpfoundation"><strong>PHP Foundation</strong></a>, qu'ils ont créée il y a tout juste un an. Le but ? Réduire le <em>bus factor</em> de l'écosystème PHP.</p>
<p>Rembobinons, qu'est-ce qu'un <em>Bus Factor</em> ? Eh bien c'est simple, ce principe part du postulat que nous allons <strong>tous mourir</strong> (oui, PHP y compris).</p>
<p>Or, imaginez un bus transportant une poignée de personnes, rassemblant à elles seules 80% de la connaissance sur PHP (le fonctionnement de son moteur, son interpréteur, toutes les zend functions utilisées en C, etc.). Si ce bus se crashe, on perd instantanément toute la connaissance.</p>
<p>La solution à ce problème est de réduire le plus possible le Bus Factor, en partageant au maximum la connaissance sur le <strong>développement et la maintenance</strong> du langage PHP.</p>
<p>Et c'est exactement le but de la PHP Foundation nouvellement créée. D'après eux, le Bus Factor du PHP est immense sur beaucoup de concepts, et il est important de le réduire le plus possible.</p>
<p>Pour retrouver le support de présentation de ce talk :</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Here is the material from the presentation on &lt;a href="https://twitter.com/ThePHPF?ref_src=twsrc%5Etfw"&gt;@ThePHPF&lt;/a&gt; that I just gave with &lt;a href="https://twitter.com/pronskiy?ref_src=twsrc%5Etfw"&gt;@pronskiy&lt;/a&gt; at &lt;a href="https://twitter.com/afup?ref_src=twsrc%5Etfw"&gt;@afup&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ForumPHP?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#ForumPHP&lt;/a&gt;:&lt;a href="https://t.co/wKUrOVuXrI"&gt;https://t.co/wKUrOVuXrI&lt;/a&gt; &lt;a href="https://t.co/RMbQNf4ibG"&gt;pic.twitter.com/RMbQNf4ibG&lt;/a&gt;&lt;/p&gt;— Sebastian Bergmann (@s_bergmann) &lt;a href="https://twitter.com/s_bergmann/status/1580487913858441216?ref_src=twsrc%5Etfw"&gt;October 13, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<h2>Comprenez comment PHP fonctionne, vos applications marcheront mieux</h2>
<p>Le premier rappel et le plus important, qui a d'ailleurs été évoqué à de nombreuses reprises durant ce Forum PHP, c'est l'aspect <strong>shared-nothing</strong> du langage lui-même.
Entre 2 requêtes distinctes, PHP oublie tout, ce qui est un avantage pour nous développeurs. Il est plus facile de coder sans se soucier de potentielles fuites mémoire entre deux requêtes, mais c'est également un coût en performance : à chaque requête, on ré-alloue la mémoire nécessaire, on ré-ouvre des connexions, etc.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Plutôt que d'utiliser les traditionnels <code>malloc</code> &amp; <code>mfree</code> natifs du langage C, PHP utilise son propre gestionnaire de mémoire ZMM (pour Zend Memory Manager) afin d'optimiser l'allocation de mémoire en PHP, qui s'effectue à chaque requête.
&lt;/div&gt;</p>
<p>Le SAPI PHP-FPM est très bien optimisé, certes, mais cela ne suffit pas toujours à avoir une application qui fonctionne parfaitement.
De plus, il n'existe pas de <strong>multi-threading</strong> en PHP. On peut cumuler plusieurs processus avec PHP-FPM, mais ce n'est pas une solution illimitée ; chaque nouveau processus va consommer du CPU et de la RAM. Il ne s'agit donc pas d'en rajouter dès que l'application connaît des lenteurs.</p>
<p>Des problèmes, des problèmes, mais où sont les solutions alors ?</p>
<p>Eh bien, au risque de vous décevoir, il n'y a pas de solution magique (auquel cas, vous le sauriez déjà), mais on peut rappeler quelques pistes à prendre en compte lorsque l'on projette d'améliorer nos performances :</p>
<ul>
<li>Ne pas hésiter à mettre des <strong>timeouts</strong> sur les appels API au sein de notre application. PHP est un langage qui attend la fin de l'exécution de chaque instruction, faisons tout pour lui simplifier la tâche en offrant ce genre de portes de sortie.</li>
<li>Dans la lignée du point ci-dessus et de manière générale, <strong>optimiser</strong> son code.</li>
<li>Vérifier que <strong>OPCache</strong> est bien activé.</li>
<li>Penser à la <strong>scalabilité</strong> des serveurs (mais attention aux <strong>coûts</strong>).</li>
<li>Bien comprendre le fichier de configuration de PHP et travailler de pair avec les DevOps pour en fournir un qui soit à la fois <strong>compatible</strong> avec votre infrastructure, et <strong>optimisé</strong> pour votre application.</li>
</ul>
<p>&lt;div  class="admonition important"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Important&lt;/p&gt;</p>
<p>En ce qui concerne l'OPCache, l'activer ne suffit pas, le configurer CORRECTEMENT est un point central, au risque d'être totalement contre-productif.
&lt;/div&gt;</p>
<p>J'en profite pour vous présenter le super compte Twitter de @mdesnouveaux, découvert pendant l'événement, qui a partagé sa prise de notes en format #sketchnotes, admirez :</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="fr" dir="ltr"&gt;Retour en &lt;a href="https://twitter.com/hashtag/sketchnote?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#sketchnote&lt;/a&gt; sur la conférence de &lt;a href="https://twitter.com/pascal_martin?ref_src=twsrc%5Etfw"&gt;@pascal_martin&lt;/a&gt; au &lt;a href="https://twitter.com/hashtag/ForumPHP?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#ForumPHP&lt;/a&gt; de l’&lt;a href="https://twitter.com/afup?ref_src=twsrc%5Etfw"&gt;@afup&lt;/a&gt; sur le fonctionnement de &lt;a href="https://twitter.com/hashtag/php?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#php&lt;/a&gt; &lt;a href="https://t.co/Ep2JeO0SK6"&gt;pic.twitter.com/Ep2JeO0SK6&lt;/a&gt;&lt;/p&gt;— Mathieu Desnouveaux (@mdesnouveaux) &lt;a href="https://twitter.com/mdesnouveaux/status/1580560861290110977?ref_src=twsrc%5Etfw"&gt;October 13, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<h2>Design Pattern Rules Engine</h2>
<p>Une de mes conférences préférées, merci à Thibault Richard pour ce talk. La présentation de ce design patterns en application dans un cas concret, c'était la meilleure manière d'en prouver l'efficacité et la simplicité.</p>
<p>Ce design pattern implémente un système qui évalue un ensemble de <strong>règles</strong> pour définir les <strong>actions</strong> à mener.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>C'est un design pattern avant tout indiqué dans un projet comprenant beaucoup de règles métier à vérifier. Si vous constatez une armée de <code>if (...)</code> qui commence à s'entasser dans votre code pour vérifier chacune d'entre elles, impactant la lisibilité et la testabilité de votre application, alors le Rules engine est fait pour vous.
&lt;/div&gt;</p>
<p>Il vous faudra dans un premier temps créer 1 fichier par règle métier. Ce fichier devra faire 2 choses :</p>
<ul>
<li><strong>Vérifier</strong> si la règle est vérifiée pour un état donné.</li>
<li><strong>Exécuter</strong> l'action correspondante si la règle a été vérifiée.</li>
</ul>
<p>Ces 2 actions peuvent être dans 2 fonctions différentes ou non, selon votre préférence.</p>
<p>Il ne vous reste plus qu'à créer votre fichier principal, le <strong>système</strong>.
Dans une boucle, on appelera chacune de ces règles pour en exécuter ou non le contenu si la condition est préalablement vérifiée.</p>
<p>Votre code est à présent bien mieux découpé, et beaucoup plus facilement <strong>testable</strong> : une règle = 1 fichier = 1 test unitaire.</p>
<p>De plus, avec un framework comme Symfony, implémenter ce design pattern peut être plus rapide, grâce aux annotations <code>AutoconfigureTag</code> et <code>TaggedIterator</code>.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Vous pouvez même ajouter un attribut <code>priority</code> sur votre tag si vous souhaitez que vos règles soient appelées dans un ordre particulier, très pratique !</p>
<p>Si des exemples de code sont plus parlant pour vous, retrouvez-en dans les <a href="https://speakerdeck.com/trichard/un-moteur-bien-huile-forum-php-2022">slides de Thibault</a>.
&lt;/div&gt;</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="fr" dir="ltr"&gt;Mon &lt;a href="https://twitter.com/hashtag/sketchnote?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#sketchnote&lt;/a&gt; de la conférence « un moteur bien huilé » donné par &lt;a href="https://twitter.com/t__richard?ref_src=twsrc%5Etfw"&gt;@t__richard&lt;/a&gt; lors du &lt;a href="https://twitter.com/hashtag/forumphp?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#forumphp&lt;/a&gt; de l’&lt;a href="https://twitter.com/afup?ref_src=twsrc%5Etfw"&gt;@afup&lt;/a&gt; concernant le Rule engine pattern. Un sujet intéressant surtout que j’ai eu à implémenter un cas similaire. &lt;a href="https://t.co/K0T39CDvWJ"&gt;pic.twitter.com/K0T39CDvWJ&lt;/a&gt;&lt;/p&gt;— Mathieu Desnouveaux (@mdesnouveaux) &lt;a href="https://twitter.com/mdesnouveaux/status/1581905545493037056?ref_src=twsrc%5Etfw"&gt;October 17, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<h2>Watch the clock</h2>
<p>Ahhh, les dates... Ne partez pas tout de suite ! Je sais que c'est la némésis de beaucoup d'entre vous,  notamment lorsqu'il s'agit d'écrire des tests.
Pour venir à bout de ce problème, Andreas Heigl est là pour nous aiguiller.</p>
<p>&lt;div  class="admonition question"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Question&lt;/p&gt;</p>
<p>Pourquoi est-ce si compliqué de tester des dates ?
&lt;/div&gt;</p>
<p>C'est surtout parce que les fonctions comme <code>time()</code> qui nous renvoient l'heure actuelle ne sont pas des <em>fonctions pures</em>, c'est-à-dire que la valeur de retour de la fonction n'est pas prédictible, quel que soit l'argument passé, même en utilisant un <strong>DateTimeImmutable</strong>.</p>
<p>Pour solutionner cela, Andreas nous présente la <a href="https://github.com/php-fig/fig-standards/blob/master/proposed/clock.md"><strong>PSR-20</strong></a> qui est actuellement en Draft, et est bien nommée <em>Clock</em>. Ce standard fournit une <em>ClockInterface</em> qui permet une interopérabilité avec les tests. Elle expose une méthode <code>now()</code> qui renvoie un <code>DateTimeImmutable</code>.</p>
<p>À partir de là, il suffit d'implémenter l'interface avec différents types de <code>Clock</code>, dont une pourrait par exemple renvoyer <strong>toujours</strong> la même date, et donc être utilisée pour les tests. Ainsi, vous pouvez utiliser un objet <code>RegularClock</code> au comportement habituel dans votre code. Et grâce à l'interface, vous pouvez maintenant utiliser votre <code>MockClock</code> dans vos tests et enfin accéder au bonheur du test unitaire de date sans bug inattendu.</p>
<p>En attendant que cette PSR soit validée, sachez que vous pouvez tout de même en installer une implémentation :</p>
<pre><code>composer require psr/clock
</code></pre>
<p>Cependant, après une petite recherche de mon côté, sachez que Symfony a créé son propre <strong><a href="https://symfony.com/components/Clock">composant Clock</a></strong> qui sera disponible dès la version 6.2.</p>
<p>Elle vous permettera d'accéder à ces différentes implémentations de la <code>ClockInterface</code> :</p>
<ul>
<li><code>NativeClock</code> =&gt; Pour créer une date basée sur celle du système (renvoie simplement un <code>new DateTimeImmutable('now')</code>) avec une timezone que vous pouvez passer en paramètre.</li>
<li><code>MonotoniClock</code> =&gt; Une Clock adaptée pour l'analyse de performance par exemple.</li>
<li><code>MockClock</code> =&gt; Pour renvoyer <strong>toujours</strong> la même date, votre graal pour les tests.</li>
</ul>
<p>Pour retrouver les slides d'Andreas :</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Find the slides of my talk "Watch the Clock" earlier at &lt;a href="https://twitter.com/hashtag/ForumPHP?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#ForumPHP&lt;/a&gt; at &lt;a href="https://t.co/HZfZH25P6n"&gt;https://t.co/HZfZH25P6n&lt;/a&gt; - and while you're there, why not also leave some feedback at &lt;a href="https://t.co/nf7ZWmOLoT"&gt;https://t.co/nf7ZWmOLoT&lt;/a&gt; ? Thanks!&lt;/p&gt;— 💙💛Andreas Heigl @ 🏡 (@heiglandreas) &lt;a href="https://twitter.com/heiglandreas/status/1580585784473632768?ref_src=twsrc%5Etfw"&gt;October 13, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<h2>FrankenPHP</h2>
<p>Une fois n'est pas coutume, Kévin Dunglas a quelque chose sous la main à nous montrer. Et une fois n'est pas coutume, c'est un outil <strong>expérimental</strong> qu'il a créé lui-même qu'il nous présente. Voici FrankenPHP.</p>
<p>&lt;div  class="admonition question"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Question&lt;/p&gt;</p>
<p>Quel est le problème de base ?
&lt;/div&gt;</p>
<p>Le constat <strong>principal</strong> de Kévin est le suivant : il est compliqué de dockeriser une application PHP / Symfony, notamment avec PHP-FPM qui est un service externe.</p>
<p>On se retrouve donc rapidement avec une architecture complexe juste pour avoir une application qui tourne.</p>
<p>La solution est double :</p>
<p>Premièrement, partir d'une base <strong>Caddy</strong> pour le serveur. Nginx fait partie des serveurs web les plus populaires aujourd'hui, mais depuis que Caddy a pointé le bout de son nez, il lui vole la vedette. Une configuration plus intuitive et plus simple, une résolution automatique de certificat pour le HTTPS, une extensibilité par modules, le support des  HTTP 103 (Early Hint)... Tout ça, c'est la modernité de Caddy, le serveur web écrit en Go.</p>
<p>Ensuite, il y a <strong>FrankenPHP</strong> en lui-même, un <strong>SAPI</strong> (Serveur Application Programming Interface), lui-même écrit en Go, qui fonctionne directement par-dessus Caddy.</p>
<p>L'avantage ? Plus besoin de dockeriser plusieurs containers pour notre serveur web d'un côté, et notre SAPI (PHP-FPM) de l'autre, qui doivent communiquer ensemble.</p>
<p>À présent, vous avez un seul service. One service to rule them all, and in docker, bind them. On parle de Docker, mais FrankenPHP est tout aussi facile d'utilisation sans.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Pour la config ? Plus qu'à éditer votre <strong>Caddyfile</strong> pour la partie Web server, et votre <strong>php.ini</strong> pour la partie applicative. FrankenPHP vient également avec une intégration spéciale Symfony pour en facilité l'interopérabilité.
&lt;/div&gt;</p>
<p>Le tout étant bâti sur Caddy et donc Go, votre application peut à présent supporter la puissance des <strong>Early Hints</strong>.</p>
<p>Mais une des killers features de FrankenPHP, c'est son <strong>Worker Mode</strong>. Grâce à ce mode, Franken construit votre application une seule fois au démarrage et la garde en mémoire, ce qui permet de traiter toutes les futures requêtes sans avoir à redémarrer l'application à chaque fois, comme le voudrait le comportement de base de PHP.</p>
<p>Ce comportement est compatible avec Symfony et Laravel, et permet d'atteindre des performances assez dingues, d'après le benchmark que Kévin nous présente.</p>
<p>&lt;div  class="admonition important"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Important&lt;/p&gt;</p>
<p>S'il est <strong>découragé</strong> d'utiliser FrankenPHP en production pour le moment, c'est d'autant plus le cas pour son Worker Mode. Vous pouvez être sûr de faire face à des bugs en vous y essayant. Préférez plutôt tester l'outil en local et remonter les bugs à Kévin (voire de faire une PR, FrankenPHP est open source !) pour le faire grandir en maturité.
&lt;/div&gt;</p>
<p>Et pour finir, le site de <a href="https://frankenphp.dev/">FrankenPHP</a>, et ci-dessous notre habituel sketchnote :</p>
<p>&lt;div style="display: flex; justify-content: center;"&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="fr" dir="ltr"&gt;Retour en &lt;a href="https://twitter.com/hashtag/sketchnote?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#sketchnote&lt;/a&gt; sur la découverte de &lt;a href="https://twitter.com/hashtag/frankenphp?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#frankenphp&lt;/a&gt;, un serveur d’application PHP par &lt;a href="https://twitter.com/dunglas?ref_src=twsrc%5Etfw"&gt;@dunglas&lt;/a&gt; lors de sa conférence au &lt;a href="https://twitter.com/hashtag/ForumPHP?src=hash&amp;ref_src=twsrc%5Etfw"&gt;#ForumPHP&lt;/a&gt; de l’&lt;a href="https://twitter.com/afup?ref_src=twsrc%5Etfw"&gt;@afup&lt;/a&gt; &lt;a href="https://t.co/j9cXLAtETs"&gt;pic.twitter.com/j9cXLAtETs&lt;/a&gt;&lt;/p&gt;— Mathieu Desnouveaux (@mdesnouveaux) &lt;a href="https://twitter.com/mdesnouveaux/status/1580923228247461890?ref_src=twsrc%5Etfw"&gt;October 14, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;</p>
<h2>Conclusion</h2>
<p>Ce fut un ForumPHP encore riche en partage, qui a atteint le nombre record de <strong>774 participants</strong>. De quoi faire taire ceux qui pensent que le PHP est mort. Les évolutions et acquis récents de notre langage préféré prouvent qu'il a encore de belles années devant lui, et c'était un plaisir de partager le même état d'esprit et la même philosophie avec autant d'homologues.</p>
<p>Je ne pouvais pas vous partager toutes les conférences de manière exhaustive, mais restez connectés sur youtube pour accéder aux replays des talks qui seront partagés bientôt !</p>
<p>Merci aux conférenciers, aux participants, et surtout, merci au PHP.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PhpStorm tips : config & extensions]]></title>
            <link>https://blog.eleven-labs.com/fr/phpstorm-tips-config-extensions/</link>
            <guid>https://blog.eleven-labs.com/fr/phpstorm-tips-config-extensions/</guid>
            <pubDate>Wed, 24 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Les meilleurs tips de configs et extensions pour profiter pleinement de PhpStorm.]]></description>
            <content:encoded><![CDATA[<p>Bienvenue dans cet article qui j'espère, vous aidera à gagner en productivité sur l'IDE <a href="https://www.jetbrains.com/fr-fr/phpstorm/">PhpStorm</a> de la suite JetBrains. Je vais vous parler de mes extensions préférées ainsi que de certains points de configuration méconnus mais très utiles. Prêts ? C'est parti !</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-24-phpstorm-tips-config-extensions/PhpStorm_Icon.png" width="300px" alt="PhpStorm Logo" style="display: block; margin: auto;"/&gt;
&lt;i&gt;PhpStorm&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Nous irons crescendo dans cet article, du plus populaire des tips à celui le moins connu. Le meilleur se trouvant à la fin, restez bien jusqu'au bout (oui, j'optimise mon readtime).
&lt;/div&gt;</p>
<h1>Mes extensions les plus utiles</h1>
<h2>Key promoter</h2>
<p>Comme vous le savez certainement si vous utilisez PhpStorm, les raccourcis clavier, c'est la vie. Ce sont eux qui permettent de déployer toute la puissance de votre IDE.</p>
<p>Cependant il peut être compliqué de se rappeler de tous les raccourcis qui existent, et de prendre l'habitude de les utiliser. Il faudrait que quelqu'un nous rabache à longueur de journée que ce que nous faisons aurait pu être effectué en un clic avec un raccourci. Devinez quoi ? C'est exactement ce que Key Promoter va faire pour vous.</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-24-phpstorm-tips-config-extensions/key-promoter-notification.png" width="450px" alt="Key Promoter notif" style="display: block; margin: auto;"/&gt;
&lt;i&gt;Key Promoter&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>Comme vous le voyez, dès que vous exécuterez une action pour laquelle il existe un raccourci clavier, Key Promoter va vous afficher une petite notification ennuyeuse en bas à droite de votre IDE. Pour vous rappeler que vous êtes nuls car vous avez manuellement copié un fichier au lieu de faire un <em>Ctrl+c</em> par exemple.</p>
<p>Si vous trouvez que certains raccourcis clavier sont inutiles pour vous et que vous en avez marre que Key Promoter vous les rappelle, vous pouvez cliquez sur le bouton <strong>Action</strong> de la notification et demander à l'extension de ne plus vous rappeler ce raccourci en particulier. Il est possible de spécifier ce comportement également directement dans la config de l'extension.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>De plus, si Key Promoter vous surprend à faire plusieurs fois la même action qui n'est liée à aucun raccourci, il vous proposera d'en créer un. On dit merci qui ?
&lt;/div&gt;</p>
<h2>Codeglance</h2>
<p>Une des fonctionnalités qui m'a manqué quand j'ai quitté VSCode pour PhpStorm, c'est cette minimap à droite d'un fichier de code qui vous donne un aperçu du fichier dans sa globalité, ainsi que la possibilité de cliquer dessus pour scroller rapidement dans votre fichier et s'arrêter exactement à la ligne souhaitée.
Heureusement, PhpStorm possède une extension pour cela, j'ai nommé <em>CodeGlance</em>.</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-24-phpstorm-tips-config-extensions/code-glance-example.png" width="300px" alt="Codeglance Map" style="display: block; margin: auto;"/&gt;
&lt;i&gt;Code Glance&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>Très pratique, on s'en rend compte surtout à l'utilisation, rapidement on ne peut plus s'en passer.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Comme vous l'avez remarqué, oui je suis dans un mood light theme en ce moment. Le dark mode c'est classe, mais pas si vous voulez prendre soin de vos yeux. cf <a href="https://stitcher.io/blog/why-light-themes-are-better-according-to-science">Which colour scheme is better according to science ?</a>
&lt;/div&gt;</p>
<p>Dans la suite de cet article, nous parlerons de configuration d'IDE. Il s'agit donc de préférences subjectives qui peuvent ne pas vous correspondre, mais je me suis efforcé de sélectionner celles que je trouve réellement utiles et qui me font, je crois, gagner en productivité.</p>
<h1>Optimiser sa configuration</h1>
<h2>Cachez ces taskbars que je ne saurais voir</h2>
<p>Comme dit plus haut, PhpStorm s'utilise surtout avec des raccourcis, alors pourquoi garder tous ces boutons tout autour de votre éditeur ? Non seulement je suis sûr que vous n'en utilisez pas ne serait-ce que le quart, mais en plus toutes ces barres de tâches rognent vos fichiers de code, on finit par ne plus respirer.</p>
<p>La solution ? Cliquez sur l'onglet <em>View</em> =&gt; <em>Appearance</em>. La liste des menus s'affiche, la majorité est cochée. Décochez <em>TOUS</em> les menus, en finissant par le <strong>Main Menu</strong> car c'est celui qui vous permet d'accéder à cette option.</p>
<p>Vous voilà à présent dans cette situation :</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-24-phpstorm-tips-config-extensions/clean-phpstorm.png" width="500px" height="400px" alt="PhpStorm Clean" style="display: block; margin: auto;"/&gt;
&lt;i&gt;PhpStorm, the clean way&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>Je trouve ça toujours émouvant de voir ce beau désert blanc épuré.</p>
<p>&lt;div  class="admonition important"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Important&lt;/p&gt;</p>
<p>Pour afficher / faire disparaître votre arborescence de fichier, utilisez <strong>Alt + 1</strong>.
Et pas de panique si vous pensez avoir perdu tout accès à votre <strong>Main Menu</strong>, j'y arrive dans un instant.
&lt;/div&gt;</p>
<p>Je vous arrête tout de suite, j'ai moi aussi trouvé ça un peu flippant au début. Je me sentais un peu perdu sans toutes ces options qui nous rassurent autour de nous.</p>
<p>Pourtant on se rend vite compte que l'on a jamais eu besoin d'y accéder de cette manière. Il y a beaucoup, beaucoup plus simple, même pour les actions complexes ou les actions de configurations qui n'ont pas leur équivalent en raccourcis clavier comme changer des éléments de layout. Et tout ça en 1 seul raccourci clavier.</p>
<p>Laissez-moi vous présenter votre nouveau meilleur ami...</p>
<h2>Surutilisez le menu d'actions</h2>
<p>Vous souhaitez réafficher votre <strong>Main Menu</strong> ? Simple, <strong>Ctrl + Maj + A</strong> puis tapez "Main menu". Vous trouverez votre bonheur.</p>
<p>Besoin de changer les onglets de place ? <strong>Ctrl + Maj + A</strong> =&gt; "Tab placement".</p>
<p>Ouvrir un nouveau fichier / projet ? <strong>Ctrl + Maj + A</strong> =&gt; "Open...".</p>
<p>Etc. Pour <strong>TOUTES</strong> les actions auxquelles vous pensez dont vous ne vous souvenez plus du raccourci ou qui n'en ont tout simplement pas, il suffit d'ouvrir votre menu d'actions avec <strong>Ctrl + Maj + A</strong> et d'écrire ce que vous voulez faire.</p>
<p>L'utilisation de ce menu prend tout son sens quand on est débarrassé de toutes nos taskbars. Je trouve son utilisation même plus rapide que les barres de tâches : plutôt que de fouiller dans une arborescence d'options ou même de ne plus savoir où chercher, le menu d'actions trouve votre option en quelques caractères tapés au clavier.</p>
<h2>Distraction free mode, aka le boss de fin</h2>
<p>Nous voilà arrivés à la dernière fonctionnalité que je vais vous présenter aujourd'hui. Elle devrait en particulier vous intéresser si vous avez du mal à vous passer des taskbars 100% du temps. Voici le Distraction free mode.</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-24-phpstorm-tips-config-extensions/distraction-free-mode.png" alt="distraction free mode" style="display: block; margin: auto;"/&gt;
&lt;i&gt;Distraction free mode&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>&lt;div  class="admonition important"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Important&lt;/p&gt;</p>
<p>Pour l'activer, je vous le donne en mille : un petit coup de <strong>Ctrl + Maj + A</strong> =&gt; "Distraction free mode"
&lt;/div&gt;</p>
<p>Si vous avez préféré ne pas vous séparer de vos taskbars et menus, le <em>distraction free mode</em> vous les enlevera <strong>uniquement</strong> pour le temps où vous souhaitez rester focus. C'est donc un bon compromis si vous ne souhaitez travailler ainsi que quelques instants. Dès que vous voulez retrouver vos menus et le layout de PhpStorm de base, il vous suffit d'utiliser votre menu d'action pour quitter ce mode.</p>
<p>Autre avantage, le distraction free mode va quelque peu centrer votre code plutôt que le laisser tout collé à gauche comme il l'est habituellement quand on se contente de fermer l'arborescence de fichiers, et c'est très agréable (et oui, cette marge à gauche est personnalisable à vos souhaits).</p>
<p>Le distraction free mode retire beaucoup de choses, mais vous pouvez le personnaliser si besoin.</p>
<p>Par exemple, si comme moi vous ne pouvez pas vous passer des numéros de lignes (cachés par défaut), en un coup de baguette magique : <strong>Ctrl + Maj + A</strong> =&gt; "Show line numbers"..</p>
<p>Vous commencez à connaître la chanson !</p>
<h2>Conclusion</h2>
<p>Avez toutes ces astuces, libre à vous de piocher dans celles qui vous intéresse le plus. Surtout : adaptez-les à vos besoins en changeant des éléments de config ou de layout selon vos préférences. Le plus important, c'est que votre IDE vous ressemble et soit agréable à utiliser pour VOUS.</p>
<p>Enfin, n'oubliez pas de vérifiez régulièrement les mises à jour de votre IDE &lt;b&gt;ET&lt;/b&gt; de vos extensions.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Quote&lt;/p&gt;</p>
<p>Votre mantra : "Un esprit sain dans un corps sain se doit d'utiliser un IDE sain".
&lt;/div&gt;</p>
<p>Prenez soin de votre PhpStorm, et très bon été à tous !</p>
<p>À très bientôt 👋</p>
<h3>Sources</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=jVTk-F3g9XM">How to set up PhpStorm</a></li>
<li><a href="https://stitcher.io/blog/why-light-themes-are-better-according-to-science">Which colour scheme is better according to science ?</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Symfony, Javascript et traduction : BazingaJSTranslationBundle, comment l'utiliser avec le format ICU ?]]></title>
            <link>https://blog.eleven-labs.com/fr/2022-08-24-symfony-javascript-traduction-bazinga-js-translation-bundle-icu/</link>
            <guid>https://blog.eleven-labs.com/fr/2022-08-24-symfony-javascript-traduction-bazinga-js-translation-bundle-icu/</guid>
            <pubDate>Wed, 24 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Même si de plus en plus d'architectes séparent le back et le front pour qu'ils puissent évoluer indépendamment, certaines applications (souvent du legacy) implémentent le front dans l'application Symfony avec Twig et du Javascript. Nous allons refaire le point sur le fonctionnement des traductions et sur le formattage ICU.]]></description>
            <content:encoded><![CDATA[<p>Même si de plus en plus d'architectes séparent le back et le front pour qu'ils puissent évoluer indépendamment, certaines applications (souvent du legacy) implémentent le front dans l'application Symfony avec Twig et du Javascript. Nous allons refaire le point sur le fonctionnement des traductions et sur le formattage ICU.</p>
<h2>Comment sont gérés les traductions dans Symfony ?</h2>
<p>Dans les nombreux composants proposés par Symfony, il y a celui qui permet de gérer les traductions : <a href="https://symfony.com/doc/current/translation.html">translation</a>.</p>
<p>Il permet de générer les traductions soit par une phrase, soit par une clé dans le PHP (avec le service Translator) ou dans les twigs. Les fichiers de traductions peuvent être en YAML, XML et PHP, et l'emplacement ainsi que la langue par défaut sont définis dans la <a href="https://symfony.com/doc/current/translation.html#configuration">configuration</a>. Ils sont généralement nommés messages.{locale}.yaml.</p>
<pre><code>// PHP
use Symfony\Contracts\Translation\TranslatorInterface;

public function index(TranslatorInterface $translator)
{
    $translatedByPhrase = $translator-&gt;trans('Symfony is great'); // phrase
    $translatedByKey = $translator-&gt;trans('home.welcome'); // phrase
}
</code></pre>
<pre><code>{# Twig #}
{% trans %}Symfony is great{% endtrans %}
{{ welcome.home|trans }}
</code></pre>
<pre><code># translations/messages.fr.yaml
Symfony is great: J'aime Symfony
home:
    welcome: Bonjour
</code></pre>
<p>C'est pratique pour pouvoir gérer le texte statique, mais on peut avoir parfois besoin d'afficher des paramètres dans la phrase, ou encore de gérer les pluriels.</p>
<p>Pour cela, on peut rajouter des paramètres dans les fonctions, et Symfony possède la variable <em>%count%</em> pour gérer les pluriels (uniquement pour des fichiers au format YAML ou PHP).</p>
<pre><code>// PHP
$translatedWithName = $translator-&gt;trans('home.welcome', ['%name%' =&gt; $name]);
$translatedWithCount = $translator-&gt;trans('home.notification.message', ['%count%' =&gt; $count]);
</code></pre>
<pre><code>{# Twig #}
{{ welcome.home|trans({'%name%': name}) }}
{{ home.notification.message|trans({'%count%': count}) }}
</code></pre>
<pre><code># translation
home:
    welcome: Bonjour %name%
    notification:
            message: {0}Vous n'avez aucun message|{1}Vous avez un message|]1,Inf[Vous avez %count% messages
</code></pre>
<blockquote>
<p>👉🏻 Symfony gère les pluriels différemment en fonction de la langue : pour le français, le 0 équivaut au 1, mais pour les autres langues (hormis quelques langues spécifiques comme le russe), le 0 équivaut au pluriel. En effet, on va dire 0 message en français, mais 0 messages en anglais.</p>
</blockquote>
<p>Il existe plein d'autres subtilités et de configurations ainsi que des bundles propres pour gérer les solutions Saas dans la documentation officielle.</p>
<p>D'ailleurs, ces solutions Saas utilisent un autre format que celui proposé de base par Symfony : le format ICU.</p>
<h2>Qu'est-ce que le format ICU ?</h2>
<p>Le format ICU (International Components for Unicode) est un format de message largement utilisé dans de nombreux systèmes logiciels de traduction tels que localize.biz (et vous pouvez en apprendre plus sur son utilisation sur l’article <a href="https://blog.eleven-labs.com/fr/gestion-des-traductions-avec-localise.biz/">Gestion des traductions avec localise.biz</a>), <a href="https://phrase.com/">phrase</a>, <a href="https://lokalise.com">lokalise</a> ou encore <a href="https://crowdin.com/">crowdin</a>. Ce format permet de gérer des patterns tels que le pluriel.</p>
<p>Le format ne fait pas varier l'utilisation et l'ordonnancement des clés des fichiers de traduction, mais les fichiers doivent être renommés messages.{locale}+intl-icu.yaml et les patterns modifiés.</p>
<p>Reprenons l’exemple plus haut d’une traduction incluant le pluriel :</p>
<pre><code>home:
    notification:
            message: {0}Vous n'avez aucun message|{1}Vous avez un message|]1,Inf[Vous avez %count% messages
</code></pre>
<p>Devient en format ICU sous Symfony</p>
<pre><code>home:
    notification:
        message: &gt;-
            count, plural,
                =0     {Vous n'avez aucun message}
                one   {Vous avez un message}
                other {Vous avez # messages}
            }
</code></pre>
<p>D’autres patterns existent : la sélection (par exemple l’indication du genre pour afficher le bon pronom), le formatage des dates, des pourcentages ou encore des affichages spécifiques des prix en fonction de la monnaie. Vous pouvez retrouver toutes les possibilités dans la <a href="https://symfony.com/doc/current/translation/message_format.html">documentation de Symfony</a>.</p>
<h2>Pour les traductions dans le Javascript, il y a BazingaJSTranslationBundle</h2>
<p><a href="https://github.com/willdurand/BazingaJsTranslationBundle">BazingaJSTranslationBundle</a> sert à utiliser les traductions gérées par Symfony. Il va générer un fichier js avec l’ensemble des traductions qui vont pouvoir être ensuite utilisées dans les autres classes js.</p>
<p>Pour revenir à notre exemple de traduction sur le nombre de messages dont on doit être notifié, voici ce que cela donnerait :</p>
<pre><code>Translator.trans('home.notification.message', {'%count%': countNotifications}, 'messages');
</code></pre>
<blockquote>
<p>⚠️ Il n’est plus conseillé d’utiliser <em>Translator.transChoice()</em>: la fonction <em>transChoice()</em> du composant Translation de Symfony a été dépréciée et supprimée en version 5.</p>
</blockquote>
<p>Ce bundle permet d'utiliser le format ICU en incluant la librairie externe <em>intl-messageformat.min.js</em>, mais malheureusement, tout ne se passe pas comme prévu.</p>
<h2>BazingaJSTranslationBundle et format ICU, que se passe-t-il ?</h2>
<p>Lors d'une de mes missions, je me suis retrouvée devant deux problématiques.</p>
<p>Pour la première, il se trouve que certaines traductions comprenaient des tags HTML. Si cela ne posait aucun souci hors ICU, cela le devenait d’un coup. En comparant la version de BazingaJSTranslationBundle avec la dernière sortie et en lisant la dernière <a href="https://github.com/willdurand/BazingaJsTranslationBundle/releases/tag/5.0.0">Release Note</a>, je me suis rendu compte qu’il s’agissait d’un bug connu de ma version 4.*, et qu’elle était réglée en version 5.0. Une simple montée de version a donc résolu ce problème.</p>
<p>Concernant la deuxième, elle est survenue uniquement en mode production : impossible de récupérer le fichier js des traductions ! J’avais une belle erreur 500 😱</p>
<p>Je n'avais eu aucun souci en local, mais parce que les assets ne sont pas générés de la même façon entre la dev et la prod avec BazingaJSTranslationBundle. Pourquoi ? Parce qu’en prod, ça considère que le fichier messages.en+intl-icu.yaml est le même domaine que le fichier messages.en.yaml, et du coup, ça fonctionne !</p>
<p>Plusieurs PRs ont été proposées mais aucune n’a été acceptée pour l’instant (on dirait que la maintenance du bundle est un peu mort), il a fallu que je trouve en <a href="https://github.com/willdurand/BazingaJsTranslationBundle/pull/322#issuecomment-975614873">réponse d’une des PRs</a> un petit tour de passe-passe (sinon, il allait falloir faire un fork) : rajouter un fichier vide nommé <em>messages.en.yaml</em> en plus du votre fichier en format ICU.</p>
<h2>Conclusion</h2>
<p>De plus en plus d’entreprises utilisent des solutions Saas pour gérer les traductions, et si vous devez faire une migration, vous allez devoir passer par cette passation de format de traduction. La phase est chronophage et fastidieuse, et l’existant peut réserver des surprises avec ce nouveau format. En espérant que cet article vous aura aidé soit à mettre en place des traductions, soit à faire cette migration !</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mon top 5 des PIRES erreurs sous Symfony]]></title>
            <link>https://blog.eleven-labs.com/fr/top-5-des-pires-erreurs-sous-symfony/</link>
            <guid>https://blog.eleven-labs.com/fr/top-5-des-pires-erreurs-sous-symfony/</guid>
            <pubDate>Fri, 12 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[La numéro 2 va vous surprendre 😱]]></description>
            <content:encoded><![CDATA[<p>Je suis développeuse PHP/Symfony depuis près de 10 ans, et au cours de mes missions j’ai pu tester, expérimenter, et découvrir différentes architectures et design patterns en entreprise. J'ai vu du bon, j'ai vu du passable, et j'ai aussi parfois ouvert les portes de l'enfer. De ces expériences, j'ai décidé de recenser le pire, et je vous propose dans cet article le top 5 des erreurs qu’il faut à tout prix éviter sous Symfony !</p>
<h2>#5 Faire une librairie, alors qu’il s’agit d’un bundle</h2>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-12-top-5-des-pires-erreurs-sous-symfony/libraryvsbundle.png" width="300px" alt="Library vs Bundle" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>Combien de fois ai-je vu des soi-disant librairies qui, n'en étant pas (vous allez comprendre ce que j'entends par là très vite), posaient des soucis de maintenabilité sur les projets Symfony ? La réponse est : beaucoup trop.</p>
<p>Tout d'abord revenons sur le vocabulaire : une librairie est un ensemble de code destiné à être réutilisé, qui fournit des outils pour réduire le temps de développement. Il peut être normal, vu cette définition, de vouloir en faire avec des composants Symfony.</p>
<p>Le seul hic c'est que dans l’écosystème Symfony... il n'y a pas de librairies, il n'y a que des composants ou des bundles. Je répète donc : les librairies dites Symfony sont inexistantes ! Notons toutefois qu'il peut bien y avoir des librairies PHP.</p>
<p>Si on fait une librairire qui utilise des composants Symfony (qui aura sûrement besoin d'une configuration), alors lors d'une mise à jour de la librairie sur le projet on s'expose à la fois à des bugs difficilement identifiables mais aussi au fait de rendre la configuration illisible.
Alors que faire un bundle permet d'utiliser toutes les possibilités qu’offre le framework comme <a href="https://symfony.com/doc/current/bundles/configuration.html">gérer la configuration</a> ou utiliser directement les services sans avoir besoin de les déclarer.</p>
<p>Moralité : que ce soit à cause de la sémantique ou de la pratique, faites des bundles si vous avez des composants Symfony !</p>
<h2>#4 Les librairies partagées</h2>
<p>On pourrait croire que c’est une bonne idée quand dans plusieurs projets nous avons les mêmes classes. On se dit que la duplication de code c’est mal, qu'on a la même unicité sur tous les projets et qu’on n’a qu’à tester qu’une seule fois le code.</p>
<p>Sur le papier, ça passe. Dans les faits, si on n’est pas rigoureux, cela peut vite ressembler à l’enfer.</p>
<p>Prenons un exemple concret : vous avez plusieurs services qui utilisent la même librairie, et celle-ci n’a pas de release.
Un développeur travaille sur le service A qui utilise la library Tools pour la feature 01. Il a eu besoin de modifier cette librairie, et ce code a été mergé sur la branche principale.
Mais ce développeur n'a pas détecté que sa modification a créé un break change inintentionnel sur le Service B, et comme la librairie n’a pas été mise à jour sur celui-ci, c'est resté invisible.
Un autre développeur travaille en parallèle sur, justement, ce Service B et a aussi besoin de modifier cette librairie. Quand il va faire sa branche sur la librairie, cela sera à partir de la branche principale, avec la modification pour la feature 01. Quand la librairie sera mise à jour pour tester la branche spécifique, il y aura une erreur, dont la raison demeurera complètement opaque pour le deuxième développeur...</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-12-top-5-des-pires-erreurs-sous-symfony/librairies-partagees.png" width="600px" alt="Example problème librairies partagées" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>Cela fait perdre du temps pour débugger, car ça implique de solliciter toute son équipe, pour identifier le développeur responsable du break change et corriger ce qui doit l'être.</p>
<p>S'il y a une bonne communication dans votre équipe et avec les autres équipes, un même processus rigoureux, ou un versionning fait dans les règles de l’art, vous pourrez limiter les impacts de ce genre d'erreur.</p>
<h2>#3 Ne pas faire les mises à jour Symfony</h2>
<p>Qui n’a pas déjà eu à travailler sur du code legacy en Symfony dans une vieille version, dont la mise à jour est devenue plus difficile et coûteuse au fur et à mesure du temps qui passe ?</p>
<p>Le framework n’est pas mis à jour régulièrement que pour des nouvelles fonctionnalités, il l'est aussi pour corriger des bugs qui peuvent être relatifs à la sécurité. Cela veut dire qu'en ignorant une ou plusieurs mises à jour, vous pouvez laisser des failles sur votre application.
Aussi, les versions de Symfony sont liées à des versions de PHP. Vous ne pourrez par exemple pas monter votre version de PHP sur le serveur si vous avez une vieille application qui tourne sur du Symfony 3/PHP 7.</p>
<p>Faire régulièrement les montées de versions de Symfony en enlevant progressivement les deprecated évitera les surprises lors d’une montée majeure de version.</p>
<p>Attention toutefois, car paradoxalement faire trop rapidement une mise à jour Symfony est aussi une erreur.
Rares sont les projets qui n’utilisent pas de bundles externes, et quand il s’agit d’une montée de version majeure, il faut attendre que ceux-ci proposent leur propre mise à jour.</p>
<p>Même si de nos jours les releases Symfony sont globalement stables, attendre un petit peu pour être sûr qu’il n’y ait pas de bugs peut être salutaire.</p>
<h2>#2 TROP utiliser les Event Listeners</h2>
<p>Je suis la première à aimer utiliser les listeners : ça me permet de mettre en place une action commune pour un événement particulier assez facilement.</p>
<p>Mais ça peut vite devenir une usine à gaz difficilement maintenable pour toute nouvelle personne arrivant sur le projet.
Les listeners sont souvent invisibles dans le code, dispersés entre le code source et les bundles, pouvant être déclenchés très facilement si l'événement est récurrent. Les risques sont d’avoir des listeners se marchant sur les pieds (par exemple un listener pouvant impacter le comportement d'un deuxième) ou de plomber les performances par des appels trop fréquents. Blackfire peut être votre ami dans ce cas-là avec le metric <code>symfony.events</code>.</p>
<p>Grâce à la commande <code>bin/console debug:event-dispatcher</code> ou dans le profiler, il est facile d’avoir la liste des classes, de vérifier qu'un listener existant ne peut pas être enrichi avant d'en créer un autre et surtout de debugger.</p>
<h2>#1 Utiliser API Platform aveuglément</h2>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-08-12-top-5-des-pires-erreurs-sous-symfony/no-api-platform.png" width="200px" alt="No API Platform" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>API Platform permet de créer rapidement des APIs et cela permet de gagner un temps incroyable en début de projet. Malheureusement, le coût de développement et de maintien vient plus tard et peut être faramineux.</p>
<p>Si votre besoin est très spécifique et demande plus que des CRUD basiques, cela peut vite devenir très lourd : besoin de faire des hacks dans tous les sens, d’override des classes, et si vous avez besoin d’une serialization un peu gourmande, vos tirs blackfire vous feront perdre de la tête. Pour l’avoir vu et expérimenté, il faut ensuite déployer une énergie folle et faire appel à son ingéniosité pour passer outres toutes ces problématiques.</p>
<p>API Platform propose régulièrement des mises à jour pour améliorer sa performance, pourtant je reste convaincue de ne pas l’utiliser si le projet est un peu plus complexe.</p>
<p>En fonction de votre besoin, il faut réfléchir entre utiliser cet outil ou faire soi-même son API. <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOSRestBundle</a> vous permettra d’être indépendant sur les actions que doivent faire vos routes, sans code magique, ce qui vous permettra de maîtriser la résilience et la performance de votre application.</p>
<h2>Conclusion</h2>
<p>Ce top est propre à mon expérience, et avec de la chance, je n’ai sûrement pas tout vu.</p>
<p>Et vous, quelles erreurs avez-vous déjà vues ?</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Responsive and accessible typography and why you should care]]></title>
            <link>https://blog.eleven-labs.com/en/responsive-accessible-typography/</link>
            <guid>https://blog.eleven-labs.com/en/responsive-accessible-typography/</guid>
            <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Typography is a silent tool that UX designers and developers can sometimes take for granted. There is much noise around this topic. Pixels? Are breakpoints enough to switch sizes across devices? Do we even need breakpoints at all?]]></description>
            <content:encoded><![CDATA[<p>&lt;style&gt;
@media screen and (max-width: 500px) {
#responsive{
flex-direction: column;
}
}
&lt;/style&gt;</p>
<p>&lt;div style="display: flex; align-items: center;" id="responsive"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/read-me.png" width="300px" alt="Man holding a note saying 'Read me if you can'" style="display: block; margin-right: 20px; width: 80%; max-width: 145px" /&gt;
&lt;div style="display: flex; flex-direction: column"&gt;
&lt;p&gt;
How many times have you been aware of text's different shapes and sizes while browsing the web lately? Probably not many, unless you found an extremely uncomfortable typography that pushed you to quickly flee the website.
&lt;/p&gt;
&lt;p&gt;
Typography is a silent tool that UX designers and developers can sometimes take for granted. &lt;b&gt;There is much noise around this topic&lt;/b&gt;. Pixels? Are breakpoints enough to switch sizes across devices? Do we even need breakpoints at all?&lt;/p&gt;
&lt;p&gt;
Let’s find out about a few key concepts to succeed at a responsive and accessible typography as a front-end developer or as a UX designer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</p>
<h2>How does readability impact web accessibility?</h2>
<p>Readability and legibility are two typography concepts that relate to how easy it is to read a text. As readability can be more linked to implementation (such as font-size, line-height, amount of characters per line, etc.), legibility concerns mostly design choices (font type, weight or width <a href="https://creativepro.com/legibility-and-readability-whats-the-difference/">among others</a>). In this article we will focus on <strong>readability</strong> in order to achieve responsive and accessible typography.</p>
<p>There is an incredibly extended and wonderful documentation about typography, but readability sometimes-forgotten concepts can give some clues about responsiveness and accessibility.</p>
<h3>Type size 🔍</h3>
<p>The first readability factor to consider is the type size. The WCAG (Web Content Accessibility Guidelines) states that <strong>accessible text should be resizable up to 200 percent without loss of content or functionality</strong>.</p>
<p>Smaller text can be challenging for seniors, children or visually impaired people. Even if there is no official recommendation through this point nor WCAG directives, there is a growing consensus about <strong>body text being at least 16px</strong>.</p>
<p>For <strong>heavy-text pages, even 18px or &gt;20px</strong> could even be suitable for a comfortable reading. Does it sound ridiculous? Check the body text on any medium.com article, such as <a href="https://kantrowitz.medium.com/face-to-face-with-dall-e-the-ai-artist-that-might-change-the-world-e9057e9e89a">this one</a>.</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/medium-example.jpg" width="800px" alt="Post on medium with detail on font-size" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<h3>Should typography be smaller in mobile?</h3>
<p>&lt;div style="display: flex; align-items: center;" id="responsive"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/girl-phone.png" width="300px" alt="Magnifier glass" style="display: block; margin-right: 20px; width: 60%; max-width: 140px;" /&gt;
&lt;div style="display: flex; flex-direction: column;"&gt;
&lt;p&gt;
Ok, what’s the trick here? Perhaps an intuitive answer to this question is to think that the text needs to be smaller to fit on the phone screen, or perhaps the opposite… that the text should be larger to achieve a more comfortable experience when reading on a smaller screen!&lt;/p&gt;</p>
<p>&lt;p&gt;However, the answer is quite simple. &lt;strong&gt;The size of the font in the body of the text is usually the same on desktop, tablet or mobile&lt;/strong&gt;. The companies that manufacture mobile devices have already solved this point by themselves. As front-end developers, our most critical practice is the way the font-size is implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</p>
<h3>Font units: why px can be accessibility enemies</h3>
<p>The <strong>px unit</strong> is a very popular unit in the front-end development world. Even if more often than not its use is accepted for font sizes in typographical hierarchies, it <strong>is not the way for creating a fully accessible body text in code</strong>. Users can change the default font value on the browser!</p>
<p>This is why body text has a better result when using the <strong>rem unit, which is relative to the font size of the root element</strong>. All major browsers set a default font size of 16px, so this is the value that developers use as reference in their CSS code.</p>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;What is the root element? &lt;/p&gt;</p>
<p>As the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html">MDN</a> documentation states, the root is the top-level element in an HTML document.
&lt;/div&gt;</p>
<p>You probably know at this point that <strong>rem</strong> is not the only relative unit in CSS. There is also <strong>em</strong> units, which take the parent's font-size for calculating its value. Using rem is a more consistent approach for setting the size of your body text, since it has a fixed value that will scale predictably. I strongly recommend you to read this <a href="https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/#unit-summaries">article about px and accessibility</a> if you need to dive deeper in these waters.</p>
<p>&lt;iframe height="300" style="width: 100%;" scrolling="no" title="px vs rem" src="https://codepen.io/amirtaqiabadi/embed/dyWZVgV?default-tab=html%2Cresult" frameborder="no" loading="lazy"&gt;
See the Pen &lt;a href="https://codepen.io/amirtaqiabadi/pen/dyWZVgV"&gt;
px vs rem&lt;/a&gt; by amir taqiabadi (&lt;a href="https://codepen.io/amirtaqiabadi"&gt;@amirtaqiabadi&lt;/a&gt;)
on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;</p>
<h3>How and why implement rem units for type size?</h3>
<p>There are a few different ways of implementing accessible font-size for body text. Take a few minutes to enumerate the possible ways this can be achieved. Did you think about tweaking the value from the HTML document?</p>
<pre><code>/* Bad practice! It overrides any changes made by the user on the browser font-size. */
html {
    font-size: 16px;
}
</code></pre>
<p><strong>This is a complete not-to-do.</strong> Applying a base font-size will override any change the user had done in the browser's settings. Maybe you have seen this trick that intends to make the math behind the usage of rem units easier by downsizing the equivalence of 1rem = 10px:</p>
<pre><code>/* Not recommended! It breaks the by-default convention 1rem = 16px*/
html {
    font-size: 62.5%;
}
</code></pre>
<p>This practice has even been promoted by CSS-tricks last May on Twitter... and it received little love from their followers:
&lt;a href="https://twitter.com/css/status/1523700789083996160?s=20&amp;t=CC56aWixbiPV7R_pqUOGcw" rel="nofollow, noreferrer" target="_blank"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/css-tricks.png" width="400px" alt="Tweet from CSS tricks suggesting to set the font-size to 62.5% in the root element" style="display: block; margin: auto;"/&gt;
&lt;/a&gt;</p>
<p>&lt;div style="display: flex; align-items: center" id="responsive"&gt;
&lt;p&gt;
Changing the font size in the root is generally not great. It will either overwrite custom values or break any other usage of rem outside the typography. It is possible, but it will bring many changes regarding scalability.
&lt;br&gt;
&lt;br&gt;
Let's check a better way. Or two.
&lt;/p&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/research-illustration.png" width="800px" alt="Researcher going for adventure" style="display: block; margin: auto; width: 50%; max-width: 145px; margin-right: 10px"/&gt;
&lt;/div&gt;</p>
<h4>#1 - Use calc(): yes, but wait and see!</h4>
<p>There's good news in this world of darkness. CSS has evolved through the years, and it has incorporated solving mathematical operations (+, -, /, *).</p>
<p>This CSS function takes a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc">single expression as parameter and returns a value</a>. <strong>The most powerful asset of calc() is the fact that it can mix different CSS units, and also supports CSS variables!</strong>.</p>
<p>calc() can come in handy when calculating typography size using rem units. It is possible to get the proportional value in a single line:</p>
<pre><code>p {
    font-size: calc(18rem / 16);
}
</code></pre>
<p>Ok, this is quite practical. But you can take this magic to another level.</p>
<h4>#2 - calc() + CSS variables: the winner!</h4>
<p>As Joshua W. Comeau wonderfully explains in his article "The Surprising Truth About Pixels and Accessibility", it is possible to take out the most of calc() <strong>by storing the calculated values in CSS variables</strong>.</p>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;What are CSS variables? &lt;/p&gt;</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">CSS variables are custom properties</a> that store specific values that are reused several times through an app. They are written in a specific notation (e.g., <code>font-size: --font-size-xs</code>) and are accessed using the <code>var()</code> function.
&lt;/div&gt;</p>
<pre><code>html {
    --font-size-extra-small: 0.75rem; /* 12 px */
    --font-size-small: 0.875rem; /* 14 px */
    --font-size-normal: 1rem; /* 16 px */
    --font-size-large: 1.125rem; /* 18 px */
}
</code></pre>
<p>Yes, it is almost the same. But in terms of scalability and practicity, this approach has it all!</p>
<h3>Ok, great... but what about fluid typography?</h3>
<p>&lt;div style="display: flex; align-items: center;" id="responsive"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/fluid-typography.png" width="400px" alt="Researcher going for adventure" style="display: block; margin-right: 20px; margin-bottom: 10px; width: 80%; height: 80%; max-width: 145px;"/&gt;
&lt;div style="display: flex; flex-direction: column"&gt;
&lt;p&gt;
Fluid typography is a CSS enhancement that smoothly scales the font-size depending on the viewport width. In order to achieve this, a new CSS unit comes into play: &lt;b&gt;vw units&lt;/b&gt;, which stands for &lt;i&gt;viewport width&lt;/i&gt;.
&lt;br&gt;
Even if it is possible to make this happen using &lt;code&gt;calc&lt;/code&gt;, it is better to use the CSS function &lt;code&gt;clamp&lt;/code&gt; that takes three values:
&lt;br&gt;
&lt;/p&gt;</p>
<p>&lt;ul&gt;
&lt;li&gt;Minimum value,&lt;/li&gt;
&lt;li&gt;referred value,&lt;/li&gt;
&lt;li&gt;Maxim value,&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</p>
<p>This CSS function comes with two treats: it can solve operations without the use of <code>calc</code> and also allows mixing different CSS units, such as <code>rem</code> and <code>vw</code>.</p>
<pre><code>h1 {
  font-size: clamp(
    1.5rem, /* min value: 24px */
    4vw + 1rem, /* preferred value: depends on the viewport width */
    3rem /* max value: 38px */
  );
</code></pre>
<p>How does this sorcery work? The <code>vw</code> unit is 1% of the viewport width, and the rem unit depends on the font-size set in the browser. For example, in an 800px width viewport, this value would be: <strong>32 + 16 = 48px</strong>.</p>
<p>However, fluid typography should not replace responsive typography and it is not recommended for body text by <a href="https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/">many authors</a>. On the other hand, headings are clear visual keys ordering content at a glance, and they are great candidates for using this technique. Headings are great, and they should not be underestimated.
&lt;br&gt;
&lt;br&gt;</p>
<h4>Line height</h4>
<p>Line height is also a key point in accessible typography. Just check this two paragraphs with the exact same content:
&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/line-height.png" width="800px" alt="Line height example" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>By default, most browsers set the line-height to 1.2. But what does 1.2 even mean? Spoiler: it's not pixels. An accessibility-focused line-height uses nothing less but unitless values (numbers) that are multiplied by the element's own font size. Yes, it is also possible to use <code>percentages</code>, <code>em</code> as well as global values, but this might lead to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#prefer_unitless_numbers_for_line-height_values">unexpected results</a>.</p>
<h3>A CSS reset</h3>
<p>Sometimes, the browsers' default values in properties such as line-height are just not great. The <a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html">WCAG</a> specifies that line-height should be 1.5 <strong>at least</strong> for body text, and this means that we should tweak this default value for ensuring accessibility.</p>
<pre><code>body {
    line-height: 1.5; /* Safe path! */
}
</code></pre>
<p>This new setting works perfectly for body text, but gives a quite bizarre look to bigger texts such as headings. As shown in <a href="https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/">this amazing article</a>, it <em>might be</em> possible to spare this problem using <code>calc()</code>.</p>
<pre><code>body {
    line-height: calc(
        2px + 2ex + 2px
    ); /* Experimental path! In this article https://www.joshwcomeau.com/css/custom-css-reset/#digit-tweaking-line-height, the author also suggests this other option:
    * {
  line-height: calc(1em + 0.5rem);
      }
*/
}
</code></pre>
<p>&lt;iframe height="300" style="width: 100%;" scrolling="no" title="calc line-height: demo 2" src="https://codepen.io/supersimplenet/embed/vYNjaem?default-tab=html%2Cresult" frameborder="no" loading="lazy"&gt;
See the Pen &lt;a href="https://codepen.io/supersimplenet/pen/vYNjaem"&gt;
calc line-height: demo 2&lt;/a&gt; by super-simple.net (&lt;a href="https://codepen.io/supersimplenet"&gt;@supersimplenet&lt;/a&gt;)
on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;</p>
<p>Please make sure to really test through your full app before considering it a victory! You can also use this <a href="https://www.thegoodlineheight.com/">very cool line-height calculator</a> made by Fran Perez.</p>
<h4>More than words: how many characters per line?</h4>
<p>Another <strong>readability</strong> point is the line-length, or how many characters should you fit in one line. On this point, WCAG addresses a maximum of <a href="https://www.w3.org/WAI/WCAG21/Understanding/visual-presentation.html">80 characters</a> per line. And yes, <strong>characters include white spaces</strong>. Unfortunately, this does not ensure a comfortable reading experience since there is still many factors to consider, such as the font type and the space between characters.</p>
<p>On the bright CSS side, there's another unit that can help with this subject: <code>ch</code>. As MDN states <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units">here</a>, <code>ch</code> is an advanced measure (width) of the glyph "0" of the element's font. Along with <code>max-width</code>, it is possible to set an amount of maximum space available for each character:</p>
<pre><code>p {
    max-width: 50ch; /* This is an example. You will need to adjust this number depending on the chosen font */
}
</code></pre>
<p>The magic range to aim here is between 50 - 75 characters per line. Ignoring this point has many negative effects and especially troubles vision impaired or dyslexic people. Users will not engage with the content or might even not be able to access important information such as FAQs.</p>
<p>Wikipedia is a great (bad) exemple. Even using a way greater amount of characters than recommended, the difference is easily visible in this <a href="https://fr.wikipedia.org/wiki/Wikip%C3%A9dia">two extraits</a>:</p>
<p>&lt;div style="text-align: left;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/wiki2.png" width="800px" alt="Wikipedia entry with 88 characters" style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;
Wikipedia entry with 88 characters
&lt;/figcaption&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div style="text-align: left;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/wiki1.png" width="800px" alt="Wikipedia entry with 148 characters" style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;
Wikipedia entry with 148 characters
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;br&gt;
Let's jump to the last readability point of this article!
&lt;br&gt;
&lt;br&gt;</p>
<h4>How to choose the right contrast for typography?</h4>
<p>High contrast between the font and the background ensure good readability. This is a quite basic concept and might even feel like an intuitive principle. Nevertheless, it still happens (quite often).</p>
<p>&lt;div style="text-align: left;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/color-contrast.png" width="800px" alt="Two examples of color contrast" style="display: block; margin: auto;"/&gt;
&lt;figcaption&gt;
&lt;br&gt;
Do you think both texts have enough contrast?
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;br&gt;
In fact, no. The text on the left has a score of 8.21 with a <em>very good</em> rating, meanwhile the text on the right has a score of 2.21 points - which means it is not even enough for the minimum contrast ratio asked by WCAG (4:5:1 for normal text).</p>
<p>This might be good advice for designers: it is worth taking some time to check the contrast ratio when choosing an app's palette (especially on font colors!). Fortunately, there is plenty of tools that make this job way easier, such as <a href="https://coolors.co">coolors.co</a> and <a href="https://webaim.org/resources/contrastchecker/">webaim.org</a>.</p>
<h2>Keep it simple (and accessible)</h2>
<p>Web typography is a beautiful and a little bit messy world. In this article we just merely saw the basics of how we can set strong basis on our code and design in order to have the best possible result. There might be a ton of other techniques and points that could not fit in a single blog entry. People even wrote books about it (e.g.: <a href="https://www.goodreads.com/en/book/show/13608106-on-web-typography">On web typography by Jason Santa Maria</a>) and you can even read this <a href="https://www.imarc.com/blog/case-study-in-readable-typography">case study</a> about it.</p>
<p>From my point of view, it is a responsability as creators to care about having inclusive products. Even if accessibility is a wide topic and we can struggle putting all its principles in practice, I think this can be a good start. &lt;b&gt;Caring is always the first step.&lt;/b&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-07-27-responsive-accessible-typography/rocket.png" width="800px" alt="Woman on a rocket heading to the sky" style="display: block; margin: auto; width: 50%;"/&gt;
&lt;/div&gt;</p>
<h2>Ressources</h2>
<ul>
<li>Accessible font sizing, explained:
<a href="https://css-tricks.com/accessible-font-sizing-explained/">https://css-tricks.com/accessible-font-sizing-explained/</a></li>
<li>CSS for JS developers by Joshua W. Comeau:<br />
<a href="https://css-for-js.dev/">https://css-for-js.dev/</a></li>
<li>CSS units:<br />
<a href="https://www.w3.org/Style/Examples/007/units.en.html">https://www.w3.org/Style/Examples/007/units.en.html</a></li>
<li>Custom CSS reset:
<a href="https://www.joshwcomeau.com/css/custom-css-reset/">https://www.joshwcomeau.com/css/custom-css-reset/</a></li>
<li>Readability: The Optimal line-lenght:
<a href="https://baymard.com/blog/line-length-readability">https://baymard.com/blog/line-length-readability</a></li>
<li>Legibility vs. readability:
<a href="https://creativepro.com/legibility-and-readability-whats-the-difference/">https://creativepro.com/legibility-and-readability-whats-the-difference/</a></li>
<li>Modern Fluid Typography Using CSS Clamp:
<a href="https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/">https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/</a></li>
<li>Text resizing according to WCAG:
<a href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html">https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html</a></li>
<li>The Surprising Truth About Pixels and Accessibility: <a href="https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/">https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/</a></li>
<li>Using calc to figure out optimal line-height:
<a href="https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/">https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/</a></li>
</ul>
<h2>Illustrations and icons</h2>
<ul>
<li>Saly illustrations:
<a href="https://www.uistore.design/items/saly-free-3d-illustration-pack-for-figma/">https://www.uistore.design/items/saly-free-3d-illustration-pack-for-figma/</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Découverte de IPython, un shell interactif avancé pour Python]]></title>
            <link>https://blog.eleven-labs.com/fr/decouverte-ipython-un-shell-interactif-avance-pour-python/</link>
            <guid>https://blog.eleven-labs.com/fr/decouverte-ipython-un-shell-interactif-avance-pour-python/</guid>
            <pubDate>Mon, 13 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[IPython est un shell interactif pour Python, qui permet d'avoir des fonctionnalités plus avancées que le shell par défaut. Il est également au coeur des notebooks Jupyter qui sont des outils très utilisés dans l'analyse de données (BigData)]]></description>
            <content:encoded><![CDATA[<h2>IPython, qu'est-ce que c'est ?</h2>
<p>IPython est un environnement de développement riche pour Python avec des fonctionnalités telles
qu'un interpréteur interactif avec de l'auto complétion, un noyau pour Jupyter et du calcul parallélisé.</p>
<p>IPython permet de tester rapidement du code et de voir le résultat immédiatement.</p>
<p>Pour l'installer :</p>
<pre><code>pip install ipython
</code></pre>
<p>Ensuite, lancer la commande suivante pour lancer le shell interactif :</p>
<pre><code>ipython
</code></pre>
<p>Le shell IPython s'affiche, on peut entrer du code pour qu'il soit lu et évalué par l'interpréteur, puis pour que soit affiché le résultat.
Dans cet exemple, je vais saluer wilson :</p>
<pre><code>Python 3.8.10 (default, Mar 15 2022, 12:22:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: print("Salut wilson !")
Salut wilson !
</code></pre>
<p>Le résultat s'affiche dessous. Je peux entrer une fonction complète et l'exécuter. En tapant le début du nom de
la fonction, je peux appuyer sur la touche <code>&lt;tab&gt;</code> du clavier pour lancer l'auto-complétion de la fonction.</p>
<pre><code>In [2]: def salut_wilson():
   ...:     print("Salut Wilson !")
   ...:

In [3]: salut_wilson()
Salut Wilson !

</code></pre>
<p>IPython a des commandes magiques embarquées, qui facilitent son usage
<a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html">https://ipython.readthedocs.io/en/stable/interactive/magics.html</a>.</p>
<h2>Un shell applicatif</h2>
<p>Lors du développement d'une application complexe, il y a de nombreux modules à charger avant de pouvoir faire ce que l'on souhaite.
Dans une application avec une base de données avec des modèles sqlalchemy, il faut charger les modèles avant de les utiliser.</p>
<p>Pour éviter de le faire à la main à chaque lancement de IPython, il est possible de charger tous les éléments nécessaires et ensuite de lancer le shell interactif.</p>
<p>Dans mon fichier <code>app.py</code>, je mets les imports et les fonctions dont j'ai besoin.</p>
<pre><code># app.py
import requests # ce module doit être installé dans votre projet : pip install requests


def get_blog_eleven_labs() -&gt; requests.Response:
    return requests.get("https://blog.eleven-labs.com")
</code></pre>
<p>Ensuite, je lance ipython avec le fichier <code>app.py</code></p>
<pre><code>ipython -i app.py
</code></pre>
<p>Ainsi, j'ai accès au module <code>requests</code> pour lancer des requêtes HTTP et à la fonction <code>get_blog_eleven_labs()</code>.</p>
<pre><code>% ipython -i app.py
Python 3.8.10 (default, Mar 15 2022, 12:22:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: resp = get_blog_eleven_labs()

In [2]: print(resp.status_code)
200

In [3]:
</code></pre>
<h2>Les notebooks Jupyter</h2>
<p>Il n'est pas facile de partager du code produit dans la console IPython. Pour cela, le code sera écrit dans
des notebooks Jupyter. C'est un format de fichiers texte qui stocke le contenu d'une cellule et son résultat.
Cela permet également de documenter avec du markdown. Ainsi, le code peut être partagé plus facilement avec d'autre personnes.</p>
<p>L'interface Jupyter est quasiment identique à IPython. Il y a des cellules dans laquelle le code est lu, interprété et affiché.
Tout est enregistré dans un fichier <code>.ipynb</code>.</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-06-13-decouverte-ipython/jupyter.png" alt="Interface Jupyter" style="display: block; margin: auto;"/&gt;
&lt;/div&gt;</p>
<p>Github met en forme les notebooks Jupyter pour en faciliter la lecture. Par exemple : <a href="https://github.com/jdwittenauer/ipython-notebooks/blob/master/notebooks/ml/ML-Exercise1.ipynb">https://github.com/jdwittenauer/ipython-notebooks/blob/master/notebooks/ml/ML-Exercise1.ipynb</a></p>
<h2>Conclusion</h2>
<p>À travers cet article, nous avons fait la découverte d'un shell interactif alternatif : IPython. C'est un outil très utilisé
en Python et ses fonctionnalités le rendent plus simple à utiliser par rapport au shell natif. Avec les notebooks Jupyter,
le code est plus facilement partagé. Il permet également l'affichage de graphiques pour l'analyse de données. Cette dernière fonctionnalité est très utilisée par les métiers de la data (data analyst, data scientist).</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Organiser son pipeline Gitlab CI avec les templates]]></title>
            <link>https://blog.eleven-labs.com/fr/organiser-son-pipeline-gitlab-ci-avec-les-templates/</link>
            <guid>https://blog.eleven-labs.com/fr/organiser-son-pipeline-gitlab-ci-avec-les-templates/</guid>
            <pubDate>Tue, 26 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Lorsqu'il y a plusieurs services à maintenir et à déployer, le code des pipelines des différents services est très souvent copié-collé. Nous verrons dans cet article comment mutualiser le code !]]></description>
            <content:encoded><![CDATA[<p>Lors de ma mission chez Maisons du Monde en tant que SRE, j'ai découvert une nouvelle façon d'organiser le code du pipeline GitLab.</p>
<p>Lorsqu'il y a plusieurs services à maintenir et à déployer, le code des pipelines des différents
services est très souvent copié-collé. Ce n'est pas DRY (Don't Repeat Yourself).</p>
<p>Il est donc recommandé dans ce cas de mutualiser le code. Il existe plusieurs façons de procéder, mais nous nous attarderons dans cet article sur la façon suivante.</p>
<h2>Un pipeline Gitlab CI</h2>
<p>Prenons cet exemple de pipeline Gitlab CI. Il se lance au moment d'une merge-request
et lors d'un merge dans la branche par défaut.</p>
<p>Le pipeline construit les dépendances, lance les tests et construit l'application.</p>
<pre><code>workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

image: golang:1.18

stages:
  - install
  - test
  - build

install:
  stage: install
  script:
    - go mod download

test:
  stage: test
  script:
    - mkdir report
    - go test -json -cover -coverprofile report/coverage.out &gt; report/unittest.json
  artifacts:
    paths:
      - report
  dependencies:
    - install

build:
  stage: build
  script:
    - mkdir -p build
    - go build -o build/awesome-app
  dependencies:
    - test
  artifacts:
    paths:
      - build/
</code></pre>
<h2>Le concept du template off-the-shelf</h2>
<p>Je pourrais mettre ce pipeline complet en tant que template et le réutiliser partout. Cependant, si
une équipe veut gérer son pipeline différement, ou qu'elle veut ajouter des outils supplémentaires tel que
gosec, elle ne pourra pas le faire simplement.</p>
<p>Le principe est de créer des templates pour chaque job. Ainsi l'équipe responsable du pipeline est libre
de les utiliser ou non. Elle peut également en décider l'ordre. C'est le concept du template off-the-shelf
(cela peut être traduit littéralement par "patron sur étagère" ou "livre sur étagère").</p>
<p>Créons un dépôt git avec tous les templates : gitlab-ci-library</p>
<p>L'organisation des dossiers est libre, mais il faut veiller à sa cohérence. Ce dépôt git va grandir au
fur et à mesure des ajouts des templates pour les différents besoins.</p>
<pre><code>code
  |- go
    |- install.yaml
    |- test.yaml
    |- build.yaml
</code></pre>
<p>Le dossier de niveau 1 sera le thème. Ensuite je spécifie le langage et enfin chaque fichier va contenir le template.</p>
<p>Répartissons le code des différents jobs dans chacun des fichiers correspondants.</p>
<pre><code># code/go/install.yaml
.template:code:go:install:
  variables:
    GO_VERSION: 1.18
  image: golang:$GO_VERSION
  script:
    - go mod download
</code></pre>
<pre><code># code/go/test.yaml
.template:code:go:test:
  variables:
    REPORT_PATH: report
    GO_VERSION: 1.18
  image: golang:$GO_VERSION
  script:
    - mkdir -p ${REPORT_PATH}
    - go test -json -cover -coverprofile ${REPORT_PATH}/coverage.out &gt; ${REPORT_PATH}/unittest.json
  artifacts:
    paths:
      - ${REPORT_PATH}
</code></pre>
<pre><code># code/go/build.yaml
.template:code:go:build:
  variables:
    BUILD_PATH: build
    GO_VERSION: 1.18
  image: golang:$GO_VERSION
  script:
    - mkdir -p ${BUILD_PATH}
    - go build -o ${BUILD_PATH}
  artifacts:
    paths:
      - ${BUILD_PATH}
</code></pre>
<p>La gestion des dépendences entre jobs est laissée à l'équipe de développement des services.</p>
<p>En plus de mutualiser en un seul endroit le code des jobs des pipelines, il est possible de donner
des options pour les rendre configurables. Par exemple, le dossier où sera stocké le rapport peut être
changé sans impacter la fonctionnalité.</p>
<p>Tous les templates dont nous avons besoin pour transformer le pipeline seront inclus via le mot clef <code>include</code>.
Avec l'option <code>ref</code>, les templates sont versionnés. Un outil tel que <a href="https://docs.renovatebot.com/">renovate</a>
pourra faire des MR de mise à jour de la version.</p>
<p>Ci-dessous le nouveau pipeline avec l'inclusion des templates.</p>
<pre><code>include:
  - project: gitlab-ci-library
    ref: 1.0.0
    file:
      - '/code/go/install.yaml'
      - '/code/go/test.yaml'
      - '/code/go/build.yaml'

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

stages:
  - install
  - test
  - build

install:
  stage: install
  extends: .template:code:go:install

test:
  stage: test
  extends: .template:code:go:test
  dependencies:
    - install

build:
  stage: build
  extends: .template:code:go:build
  dependencies:
    - test
</code></pre>
<p>Ce nouveau pipeline est plus lisible. Le développeur s'affranchit de la complexité des jobs. Il se concentre sur
l'ordre et les fonctionnalités du pipeline. Il pourra ajouter un job de code lint plus tard par exemple.</p>
<p>Dans une autre équipe qui gère un autre service, le pipeline pourrait ressembler à ça par exemple :</p>
<pre><code>include:
  - project: gitlab-ci-library
    ref: 1.0.0
    file:
      - '/code/go/install.yaml'
      - '/code/go/test.yaml'

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

variables:
  GO_VERSION: 1.17

stages:
  - download deps
  - testing

download_deps:
  stage: download deps
  extends: .template:code:go:install

test_app:
  stage: testing
  extends: .template:code:go:test
  dependencies:
    - download deps
</code></pre>
<p>Le nom des stages est différent. La version de go est différente. Et pourtant, les fonctionnalités des templates restent les mêmes.</p>
<h2>Conclusion</h2>
<p>Cette organisation du code permet de mutualiser le code à un seul endroit. Le développeur choisi et configure les templates
qui vont lui permettre de créer son pipeline. Il en garde ainsi la pleine maîtrise car il connait les besoins de son application.</p>
<p>Du côté SRE, cette organisation permet de répondre aux besoins de toutes les applications sans avoir à répéter le code.
Chaque template est générique dans son fonctionnement, mais pleinement configurable.</p>
<h2>Ressources</h2>
<ul>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/index.html#includefile">https://docs.gitlab.com/ee/ci/yaml/index.html#includefile</a></li>
<li><a href="https://docs.renovatebot.com/">https://docs.renovatebot.com/</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NestJS : le cycle de vie d'une requête]]></title>
            <link>https://blog.eleven-labs.com/fr/nestjs-le-cycle-de-vie-dune-requete/</link>
            <guid>https://blog.eleven-labs.com/fr/nestjs-le-cycle-de-vie-dune-requete/</guid>
            <pubDate>Tue, 29 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Cet article vous expliquera précisemment chaque étape par laquelle passent une requête et une réponse dans une application NestJS.]]></description>
            <content:encoded><![CDATA[<p>Bienvenue dans cet article ayant pour but de faire un tour d'horizon du cycle de vie d'une requête puis d'une réponse dans un environnement NestJS !</p>
<p>&lt;br /&gt;</p>
<p>&lt;div style="text-align: center;"&gt;
&lt;img src="/imgs/posts/2022-03-04-nestjs-le-cycle-de-vie-dune-requete/nest-logo.png" width="300px" alt="NestJS logo" style="display: block; margin: auto;"/&gt;
&lt;i&gt;NestJS Framework&lt;/i&gt;
&lt;/div&gt;</p>
<p>&lt;br /&gt;</p>
<p>Le but ici sera de donner une représentation précise de chaque étape que peut rencontrer une requête, dans l'ordre, et avec des exemples. Une fois lu une première fois, gardez cet article dans un coin, à la manière d'un <strong>pense-bête</strong>.
Ainsi, en cas de confusion ou d'esprit embrumé le lendemain d'un jeudi soir un peu arrosé, il sera votre meilleur allié pour que votre gueule de bois passe inaperçue.</p>
<p>Voilà d'ailleurs un <strong>sommaire</strong> pour retrouver rapidement la partie qui vous intéresse :</p>
<ul>
<li><a href="#cycle-de-vie--vue-globale">Présentation globale du cycle de vie requête / réponse</a></li>
<li><a href="#niveaux-de-d%C3%A9claration">Les niveaux de déclaration</a></li>
<li><a href="#les-middlewares">Présentation des Middlewares</a></li>
<li><a href="#les-guards">Présentation des Guards</a></li>
<li><a href="#les-interceptors">Présentation des Interceptors</a></li>
<li><a href="#les-pipes">Présentation des Pipes</a></li>
<li><a href="#le-controller">Présentation du Controller</a></li>
<li><a href="#les-exception-filters">Présentation des Exception Filters</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Vous pouvez être totalement débutant en NestJS et quand même lire cet article. C'est peut-être même recommandé.
&lt;/div&gt;</p>
<h2>Cycle de vie : vue globale</h2>
<p>Rien de tel qu'un schéma que je vous ai concocté pour entrer dans le vif du sujet. Je vous laisse vous en imprégner.</p>
<p></p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Il s'agit d'un parcours plutôt exhaustif d'une requête, mais la seule étape réellement essentielle ici est le <strong>Controller</strong>. Il a pour rôle de recevoir votre requête, la traiter, et renvoyer une réponse. Tout le reste est facultatif.
&lt;/div&gt;</p>
<p>Comme vous pouvez le constater, une requête, avant d'arriver au <strong>Controller</strong>, peut passer par 4 premières couches qui sont dans l'ordre : <strong>Middleware</strong> -&gt; <strong>Guard</strong> -&gt; <strong>Interceptor</strong> -&gt; <strong>Pipe</strong>.
Puis, libre à votre <strong>Controller</strong> d'appeler tout <strong>Service</strong> (où par convention repose votre logique métier) ou <strong>Repository</strong> (pour les appels à la base de données) pour traiter la requête.
Enfin, le <strong>Controller</strong> renverra une réponse qui, comme vous le constatez, peut à nouveau passer par un <strong>Interceptor</strong>, puis par les <strong>Exception Filters</strong>.
Nous allons dans cet article expliquer à quoi correspond chacune de ces étapes.</p>
<p>Chacune de ces couches peut être déclarée sur un ou plusieurs niveaux, rendez-vous dans la section suivante pour les découvrir.</p>
<h2>Niveaux de déclaration</h2>
<p>Avant de définir plus en détail chacune des couches vues précédemment, il me semblait important de parler des <em>niveaux de déclaration</em>.
En réalité, chacune de ces étapes que traverse la requête peut se diviser en 1 ou plusieurs sous-étapes. Pas de panique, rien de très compliqué ici, voyons par l'exemple.</p>
<p>Tout d'abord, il existe 5 niveaux de déclarations :</p>
<ul>
<li>Déclaration <strong>globale</strong></li>
<li>Déclaration au niveau <strong>Module</strong></li>
<li>Déclaration au niveau <strong>Controller</strong></li>
<li>Déclaration au niveau <strong>Route</strong></li>
<li>Déclaration au niveau <strong>paramètre de route</strong></li>
</ul>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Par exemple, un Interceptor peut être déclaré à 3 niveaux :</p>
<ul>
<li>Globalement</li>
<li>Au niveau d'un controller</li>
<li>Au niveau d'une route</li>
</ul>
<p>Un Interceptor global intercepte toutes les requêtes, tandis qu'un Interceptor placé au niveau d'un Controller / d'une route intercepte seulement les requêtes qui passent par ce Controller / cette route.
&lt;/div&gt;</p>
<p>Ainsi, sachez que lors d’une requête, au sein de chaque couche, l’ordre de passage est toujours :</p>
<p>Niveau <strong>global</strong> =&gt; Niveau <strong>module</strong> =&gt; Niveau <strong>controller</strong> =&gt; Niveau <strong>route</strong> =&gt; Niveau <strong>paramètre de route</strong>.</p>
<p>Reprenons donc une partie de notre schéma vu plus haut, mais mis à jour. Cela donnerait  :</p>
<p></p>
<p>Ci-dessous à titre indicatif, vous trouverez des exemples de déclaration pour chaque niveau. Rendez-vous dans les prochaines sections pour les présentations plus poussées de toutes nos couches (Middlewares, Interceptors...).</p>
<h3>Déclaration globale</h3>
<p>Exemple avec un Guard :</p>
<pre><code>// app.module.ts

// ...
  providers: [
    {
      provide: APP_GUARD,
      useClass: UserGuard,
    },
  ],
// ...
</code></pre>
<p>=&gt; Ce Guard est appliqué globalement = à toute l'application (quel que soit le module où il est déclaré).</p>
<h3>Déclaration niveau module</h3>
<p>Exemple avec un Middleware :</p>
<pre><code>// app.module.ts

// ...

// Style de déclaration spécifique aux Middlewares
configure(consumer: MiddlewareConsumer): void {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes('*');
}
</code></pre>
<p>=&gt; Ce Middleware est déclaré au niveau d'un module, il est donc appelé après tout éventuel Middleware déclaré globalement. Cela étant dit, un Middleware déclaré comme ci-dessus s'applique sur toutes les routes de l'application grâce au wildcard <code>*</code>.</p>
<h3>Déclaration niveau Controller</h3>
<p>Exemple avec un Interceptor :</p>
<pre><code>// some-controller.ts

@UseInterceptors(LoggingInterceptor)
export class SomeController {}
</code></pre>
<p>=&gt; Cet Interceptor sera appliqué à toutes les routes de ce Controller.</p>
<h3>Déclaration niveau route</h3>
<p>Exemple avec un Guard :</p>
<pre><code>// some-controller.ts

// ...
@UseGuards(new RolesGuard())
@Get()
async someRoute(): any {
  // ...
}
// ...
</code></pre>
<h3>Déclaration niveau paramètres de route</h3>
<p>Exemple avec un Pipe :</p>
<pre><code>// some-controller.ts

// ...
@Get(':id')
async someRoute(@Param('id', ParseIntPipe) id: number): any {
  // ...
}
// ...
</code></pre>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>L'annotation <code>@Param</code> permet de sélectionner un paramètre de l'URL, ici <code>:id</code>.
&lt;/div&gt;</p>
<p>Passons maintenant à l'explication de chacun de ces concepts que nous survolons depuis le début. Pour chacun, en début de section, je mettrai une petite note indiquant à quel(s) niveau(x) il est déclarable.</p>
<h2>Les Middlewares</h2>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Niveaux de déclaration possibles&lt;/p&gt;</p>
<ul>
<li>Global</li>
<li>Module
&lt;/div&gt;</li>
</ul>
<p>Vous êtes peut-être déjà familiers du concept si vous avez déjà fait du développement en NodeJS.
Le Middleware est toujours appelé avant le Controller et il a accès à la requête ainsi qu'à la réponse (par conséquent pas encore peuplée par le retour du Controller).</p>
<p>Voilà un exemple de Middleware en Nest :</p>
<pre><code>@Injectable()  
export class CurrentUserMiddleware implements NestMiddleware {  
  constructor(private userService: UserService) {}  
  
  async use(req: Request, _: Response, next: NextFunction): Promise&lt;void&gt; {  
    const { userId } = req.session;  
  
    if (userId) {  
      const user = await this.userService.getUserById(userId);  
  
      if (user) {  
        req.currentUser = user;  
      }  
    }  
  
    next();  
  }  
}
</code></pre>
<p>Dans cet exemple, nous récupérons un potentiel objet <code>session</code> dans la requête, puis nous peuplons la requête avec un <em>user</em> complet, à l'aide de l'id trouvé dans la <code>session</code>. Enfin, nous n'oublions pas d'appeler <code>next()</code> pour continuer l'exécution.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Un Middleware doit implémenter la fonction <code>use()</code>.</p>
<p>De plus, il doit se terminer par un appel à la fonction <code>next()</code> pour pouvoir passer à la suite des étapes d'exécution. Sans le <code>next()</code>, la requête est suspendue.
&lt;/div&gt;</p>
<h2>Les Guards</h2>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Niveaux de déclaration possibles&lt;/p&gt;</p>
<ul>
<li>Global</li>
<li>Controller</li>
<li>Route
&lt;/div&gt;</li>
</ul>
<p>Le Guard est une classe dont la mission est le plus souvent l'autorisation. Un Guard a accès à tout le <strong>contexte d'exécution</strong> d'une requête. Il a donc la connaissance de ce qui sera exécuté après lui (quel Controller, quelle fonction, quelle route...).</p>
<p>Il peut par exemple vérifier quels sont les rôles nécessaires pour accéder au Controller qui sera appelé dans la foulée, et avorter la requête si elle ne contient pas le rôle requis.</p>
<p>Prenons l'exemple d'un Guard appelé à la suite du Middleware que nous avons écrit plus haut. Voilà ce qu'on pourrait faire :</p>
<pre><code>@Injectable()
export class AdminRoleGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    const request = context.switchToHttp().getRequest();

    return request.currentUser.role === UserRole.ADMIN;
  }
}
</code></pre>
<p>Ici, on vérifie si l'utilisateur stocké plus tôt dans la requête a le rôle <strong>ADMIN</strong>.</p>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Note&lt;/p&gt;</p>
<p>Un Guard doit implémenter la fonction  <code>canActivate()</code>, qui retourne un booléen, de manière synchrone ou dans une Promesse ou un Observable.
&lt;/div&gt;</p>
<h2>Les Interceptors</h2>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Niveaux de déclaration possibles&lt;/p&gt;</p>
<ul>
<li>Global</li>
<li>Controller</li>
<li>Route
&lt;/div&gt;</li>
</ul>
<p>On compare souvent les Interceptors avec les Middlewares. Leurs différences sont nombreuses mais en voici quelques unes :</p>
<ul>
<li>Un Interceptor est appelé à la fois lors de la <strong>requête</strong>, mais aussi lors de la <strong>réponse</strong>.</li>
<li>Comme le Guard, l'Interceptor a accès au <strong>contexte d'exécution</strong> (qui contient la requête), contrairement au Middleware qui a accès à la requête, mais pas au contexte d'exécution.</li>
<li>Comme vous le savez maintenant, l'Interceptor est appelé <strong>après</strong> le Guard. Le Middleware est lui appelé <strong>avant</strong>.</li>
</ul>
<p>Souvent, les Interceptors sont utilisés pour <em>serializer</em> les réponses renvoyées par le Controller, par exemple :</p>
<pre><code>class UserSerializerInterceptor implements NestInterceptor {
  intercept(_: ExecutionContext, next: CallHandler): Observable&lt;unknown&gt; {
    return next.handle().pipe(
      map((user) =&gt;
        plainToInstance(UserDto, user),
      ),
    );
  }
}
</code></pre>
<p>L'Interceptor doit implémenter la fonction <code>intercept()</code> qui prend 2 arguments, représentant respectivement :</p>
<ul>
<li>Un <strong>ExecutionContext</strong>, contenant notamment la requête.</li>
<li>un <strong>CallHandler</strong>, qui donne accès à la réponse.</li>
</ul>
<p>&lt;div  class="admonition note"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Comment ça marche ?&lt;/p&gt;</p>
<p>L'interface <code>CallHandler</code> implémente la méthode <code>handle()</code>, qui retourne un Observable. C'est ainsi que l'Interceptor reste à l'écoute de la réponse. Réponse que vous pouvez ensuite manipuler comme n'importe quel Observable classique. Ici on utilise la fonction <code>plainToInstance()</code> de la librairie <em>class-transformer</em>, qui serialize un objet Javascript selon une classe donnée; ici un hypothétique UserDto.
&lt;/div&gt;</p>
<h2>Les Pipes</h2>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Niveaux de déclaration possibles&lt;/p&gt;</p>
<ul>
<li>Global</li>
<li>Controller</li>
<li>Route</li>
<li>Paramètre de route
&lt;/div&gt;</li>
</ul>
<p>Les Pipes ont 2 cas d'usage : la <strong>validation</strong> des données, et la <strong>transformation</strong>.</p>
<p>Voici un exemple tiré cette fois de la <a href="https://docs.nestjs.com/pipes">documentation de NestJS</a> :</p>
<pre><code>@Injectable()
export class ParseIntPipe implements PipeTransform&lt;string, number&gt; {
  transform(value: string, metadata: ArgumentMetadata): number {
    const val = parseInt(value, 10);
    
    if (isNaN(val)) {
      throw new BadRequestException('Validation failed');
    }
    
    return val;
  }
}
</code></pre>
<p>Ici on récupère une chaîne de caractères que nous tentons de <strong>transformer</strong> en nombre. Si la chaîne de caractères contient autre chose que des chiffres, on fait échouer la <strong>validation</strong>.</p>
<p>Voilà l'utilisation de ce Pipe, associé à un paramètre d'une route :</p>
<pre><code>@Get(':id')
async findOne(@Param('id', ParseIntPipe) id: number): Cat {
  return this.catsService.findOne(id);
}
</code></pre>
<h2>Le Controller</h2>
<p>Et nous voilà au coeur du traitement de notre requête. Nous ne perdrons pas de temps ici à expliquer tout ce qu'est capable de faire un Controller en NestJS car ce n'est pas l'objet de cet article.</p>
<p>Mais voilà un exemple d'un Controller appelé dans la lignée de nos exemples précédents :</p>
<pre><code>@Get('admin/some-secret-route')
@UseGuards(AdminRoleGuard)
async findOne(): User {
  return this.adminService.somePrivateData();
}
</code></pre>
<p>&lt;div  class="admonition important"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Important&lt;/p&gt;</p>
<p>Avec l'annotation <code>@UseGuards()</code>, on utilise également un Guard (celui que nous avons écrit plus haut) au niveau de la route. Ainsi, nous sommes sûrs que l'utilisateur qui appelle cette route est bien un administrateur.
&lt;/div&gt;</p>
<p>Nous n'irons pas plus loin dans le traitement de la <strong>requête</strong>, sachez juste qu'habituellement un Controller appelle un service, à l'intérieur duquel se trouve la logique métier, et les appels éventuels aux Repositories, où résident la connexion à la base de données.</p>
<blockquote>
<p>Votre mantra : quoiqu'il arrive, votre Controller doit récupérer une requête, et retourner une réponse.</p>
</blockquote>
<h2>Les Exception filters</h2>
<p>&lt;div  class="admonition info"  markdown="1"&gt;&lt;p  class="admonition-title"&gt;Niveaux de déclaration possibles&lt;/p&gt;</p>
<ul>
<li>Global</li>
<li>Controller</li>
<li>Route
&lt;/div&gt;</li>
</ul>
<p>Les Exception Filters permettent de <code>catch</code> les exceptions que vous déclenchez dans votre code, pour les transformer en messages d'erreur lisibles dans la réponse du serveur.
NestJS fournit par défaut un Exception Filter <strong>global</strong> qui récupère toutes les Exceptions de type <code>HttpException</code>.</p>
<p>C'est-à-dire que vous pouvez par exemple faire ceci dans un Controller :</p>
<pre><code>@Get('some-admin-route')
async adminRoute(): any {
  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
}
</code></pre>
<p>Et par défaut, NestJS génèrera une réponse JSON reprenant le code d'erreur <code>403</code> d'une exception Forbidden.</p>
<p>La plupart du temps vous n'avez donc par à créer d'Exception Filter custom, vu qu'une bonne pratique est de renvoyer des erreurs HTTP pour des applications REST ou encore GraphQL ; et donc Nest s'en occupera pour vous.</p>
<p>Mais voici tout de même un court exemple de ce à quoi ressemble la définition d'un Exception Filter :</p>
<pre><code>@Catch(HttpException)
export class CustomExceptionFilter implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    // handle exception
  }
}
</code></pre>
<p>L'annotation <code>@Catch()</code> permet de spécifier quelle exception vous souhaitez "écouter".</p>
<p>Le deuxième argument de la fonction <code>catch()</code> est un objet de type <code>ArgumentHost</code>. Cet objet contient tout le contexte d'exécution ; vous pouvez y retrouver notamment la <strong>requête</strong> et la <strong>réponse</strong>. C'est surtout cette dernière qui vous intéresse, pour par exemple y ajouter un message relatif à l'exception récupérée.</p>
<h2>Conclusion</h2>
<p>Vous savez à présent à peu près tout sur le cycle de vie d'une requête en NestJS. Le but était surtout de donner une meilleure vue d'ensemble de ces différentes étapes, de leur <strong>ordre</strong> d'exécution, et de leur utilité. Mais si vous voulez en savoir plus sur <strong>comment</strong> les implémenter, à différents niveaux (module, controller, route...), n'hésitez pas à vous référer à la <a href="https://docs.nestjs.com">documentation officielle de NestJS</a>.</p>
<p>À très bientôt 👋</p>
]]></content:encoded>
        </item>
    </channel>
</rss>