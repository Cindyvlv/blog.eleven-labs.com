{"version":3,"file":"PostPage-2f694774.js","sources":["../../src/pages/PostPage/PostFooter/PostFooter.tsx","../../src/pages/PostPage/PostHeader/PostHeader.tsx","../../src/pages/PostPage/RelatedPostList/RelatedPostList.tsx","../../src/pages/PostPage/PostPage.tsx"],"sourcesContent":["import './PostFooter.scss';\n\nimport { Box, Flex, Link, Text } from '@eleven-labs/design-system';\nimport React from 'react';\n\nexport interface PostFooterProps {\n  title: React.ReactNode;\n  authors: {\n    name: string;\n    content: string;\n    link: React.ComponentPropsWithoutRef<'a'>;\n    avatarImageUrl?: string;\n  }[];\n  emptyAvatarImageUrl: string;\n}\n\nexport const PostFooter: React.FC<PostFooterProps> = ({ title, authors, emptyAvatarImageUrl }) => (\n  <Box className=\"post-footer\" color=\"dark-grey\" mt=\"m\">\n    <Text mb=\"xxs\" size=\"xs\" fontWeight=\"bold\" textTransform=\"uppercase\">\n      {title}\n    </Text>\n    <Flex flexDirection={{ xs: 'column', md: 'row' }} gapY={{ md: 'xxl' }} gap=\"s\">\n      {authors.map((author, authorIndex) => (\n        <Flex key={authorIndex} mb=\"s\" className=\"post-footer__author\">\n          <img\n            src={author.avatarImageUrl ?? emptyAvatarImageUrl}\n            alt={author.name}\n            className={author.avatarImageUrl ? 'post-footer__avatar-img' : 'post-footer__empty-avatar-img'}\n          />\n          <Box ml=\"xxs\">\n            <Link {...author.link} fontWeight=\"medium\" data-internal-link=\"author\">\n              {author.name}\n            </Link>\n            <Text as=\"div\" size=\"xs\" dangerouslySetInnerHTML={{ __html: author.content }} />\n          </Box>\n        </Flex>\n      ))}\n    </Flex>\n  </Box>\n);\n","import { Box, Flex, Heading, Icon, Link } from '@eleven-labs/design-system';\nimport React from 'react';\n\nimport { TutoTag } from '@/components';\nimport { ContentTypeEnum } from '@/constants';\n\nexport interface PostHeaderProps {\n  contentType: ContentTypeEnum.ARTICLE | ContentTypeEnum.TUTORIAL;\n  title: React.ReactNode;\n  date: string;\n  readingTime: number;\n  authors: {\n    username: string;\n    name: string;\n    link: React.ComponentPropsWithoutRef<'a'>;\n  }[];\n}\n\nexport const PostHeader: React.FC<PostHeaderProps> = ({ contentType, title, date, readingTime, authors }) => (\n  <Box mt={{ xs: 's', md: 'xl' }} textSize=\"xs\">\n    <Heading as=\"h1\" size=\"xl\">\n      {title}\n    </Heading>\n    <Flex flexDirection={{ xs: 'column', md: 'row' }} mt={{ md: 'xxs-3' }} gap={{ xs: 'xxs', md: 'm' }}>\n      <Flex mt={{ xs: 'xxs', md: '0' }} color=\"dark-grey\" alignItems=\"center\" gap=\"m\">\n        {contentType === ContentTypeEnum.TUTORIAL && (\n          <Flex alignItems=\"center\">\n            <TutoTag />\n          </Flex>\n        )}\n        <Flex alignItems=\"center\">\n          <Icon name=\"calendar\" size=\"24px\" />\n          <Box as=\"span\" ml={{ xs: 'xxs-3' }}>\n            {date}\n          </Box>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <Icon name=\"access-time\" size=\"24px\" />\n          <Box as=\"span\" ml={{ xs: 'xxs-3' }}>\n            {`${readingTime}mn`}\n          </Box>\n        </Flex>\n      </Flex>\n      <Flex alignItems=\"center\" color=\"dark-grey\">\n        <Icon name=\"person\" size=\"24px\" />\n        {authors.map((author, index) => (\n          <React.Fragment key={author.username}>\n            <Link {...author.link} ml=\"xxs-3\" data-internal-link=\"author\">\n              {author.name}\n            </Link>\n            {authors.length - 1 !== index && (\n              <Box as=\"span\" ml=\"xxs-3\">\n                &\n              </Box>\n            )}\n          </React.Fragment>\n        ))}\n      </Flex>\n    </Flex>\n  </Box>\n);\n","import './RelatedPostList.scss';\n\nimport { Box, BoxProps, Heading } from '@eleven-labs/design-system';\nimport React from 'react';\n\nimport { PostPreview, PostPreviewProps } from '@/components';\n\nexport interface RelatedPostListProps extends BoxProps {\n  relatedPostListTitle: string;\n  posts: PostPreviewProps[];\n}\n\nexport const RelatedPostList: React.FC<RelatedPostListProps> = ({ relatedPostListTitle, posts, ...boxProps }) => (\n  <Box {...boxProps} p=\"m\" className=\"related-post-list\">\n    <Heading as=\"p\" mb=\"m\" size=\"m\">\n      {relatedPostListTitle}\n    </Heading>\n    {posts.map((post, index) => (\n      <PostPreview key={post?.slug ?? index} isRelated={true} {...post} mt=\"s\" />\n    ))}\n  </Box>\n);\n","import React from 'react';\n\nimport { ContactBlock, ContactBlockProps, Container, Divider, ShareLinks } from '@/components';\nimport { ContentTypeEnum } from '@/constants';\n\nimport { PostFooter, PostFooterProps } from './PostFooter';\nimport { PostHeader, PostHeaderProps } from './PostHeader';\nimport { RelatedPostList, RelatedPostListProps } from './RelatedPostList';\n\nexport interface PostPageProps {\n  contentType: ContentTypeEnum.ARTICLE | ContentTypeEnum.TUTORIAL;\n  header: Omit<PostHeaderProps, 'contentType'>;\n  children: React.ReactNode;\n  footer: PostFooterProps;\n  contactBlock: ContactBlockProps;\n  relatedPostList: RelatedPostListProps;\n  className?: string;\n}\n\nexport const PostPage: React.FC<PostPageProps> = ({\n  contentType,\n  header,\n  children,\n  footer,\n  relatedPostList,\n  contactBlock,\n  className,\n}) => {\n  const currentUrl = typeof window !== 'undefined' && window.location.href;\n\n  return (\n    <Container variant=\"global\" className={className}>\n      <Container variant=\"content\">\n        <PostHeader {...header} contentType={contentType} />\n        <Divider mt=\"xs\" bg=\"light-grey\" />\n        <ShareLinks urlToShare={currentUrl as string} />\n        {children}\n        <ShareLinks urlToShare={currentUrl as string} />\n        <Divider mt=\"xs\" bg=\"light-grey\" />\n        <PostFooter {...footer} />\n        <ContactBlock mb={{ xs: 'l' }} {...contactBlock} />\n      </Container>\n      <Container>\n        {relatedPostList.posts.length > 0 && <RelatedPostList mb={{ xs: 'xl', md: 'xxl' }} {...relatedPostList} />}\n      </Container>\n    </Container>\n  );\n};\n"],"names":["PostFooter","title","authors","emptyAvatarImageUrl","jsxs","Box","jsx","Text","Flex","author","authorIndex","Link","PostHeader","contentType","date","readingTime","Heading","ContentTypeEnum","TutoTag","Icon","index","React","RelatedPostList","relatedPostListTitle","posts","boxProps","post","PostPreview","PostPage","header","children","footer","relatedPostList","contactBlock","className","currentUrl","Container","Divider","ShareLinks","ContactBlock"],"mappings":"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"}